/*! For license information please see index.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.SASjs=t():e.SASjs=t()}(self,(function(){return(()=>{var e={3259:function(e,t){"use strict";var o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,o=1,a=arguments.length;o<a;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.prefixMessage=void 0;t.prefixMessage=function(e,t){if("object"==typeof e)if(e.hasOwnProperty("message"))e.message=t+e.message;else{if(!e.hasOwnProperty("body"))return o(o({},e),{message:t});if("object"==typeof e.body&&(e.message=e.body.message?t+e.body.message:t),"string"==typeof e.body){var a=void 0;try{a=JSON.parse(e.body)}catch(o){return e.message=t,e}return a.message=a.message?t+a.message:t,e.body=a,e}}return"string"==typeof e&&(e=t+e),e}},9778:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.prefixMessage=void 0;var a=o(3259);Object.defineProperty(t,"prefixMessage",{enumerable:!0,get:function(){return a.prefixMessage}})},2777:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sanitizeSpecialChars=t.padWithNumber=void 0;var a=o(5306);Object.defineProperty(t,"padWithNumber",{enumerable:!0,get:function(){return a.padWithNumber}});var n=o(9017);Object.defineProperty(t,"sanitizeSpecialChars",{enumerable:!0,get:function(){return n.sanitizeSpecialChars}})},5306:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.padWithNumber=void 0;t.padWithNumber=function(e,t){return void 0===t&&(t=0),e>9?e:""+t+e}},9017:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sanitizeSpecialChars=void 0;t.sanitizeSpecialChars=function(e){return e.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,"")}},8817:function(e,t,o){"use strict";var a=this&&this.__createBinding||(Object.create?function(e,t,o,a){void 0===a&&(a=o),Object.defineProperty(e,a,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,a){void 0===a&&(a=o),e[a]=t[o]}),n=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||a(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0}),n(o(8069),t),n(o(8481),t)},7702:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isLowerThanOrEqualTo=void 0;var a=o(8481);t.isLowerThanOrEqualTo=function(e,t){return e!==a.LogLevel.Off&&(e===a.LogLevel.Debug||(e===a.LogLevel.Info?t===a.LogLevel.Info||t===a.LogLevel.Warn||t===a.LogLevel.Error:e===a.LogLevel.Warn&&t===a.LogLevel.Warn||t===a.LogLevel.Error))}},5625:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNullOrUndefined=void 0;t.isNullOrUndefined=function(e){return null==e}},8481:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LogLevel=void 0,function(e){e.Debug="Debug",e.Info="Info",e.Warn="Warn",e.Error="Error",e.Off="Off"}(t.LogLevel||(t.LogLevel={}))},8069:function(e,t,o){"use strict";var a=this&&this.__spreadArray||function(e,t){for(var o=0,a=t.length,n=e.length;o<a;o++,n++)e[n]=t[o];return e},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Logger=void 0;var i=n(o(4652)),r=o(7702),s=o(5625),u=o(8481),c=o(2777),l=n(o(8593)),p=n(o(4061)),m=function(){function e(e){var t=this;this._logLevel=u.LogLevel.Error,this.debug=function(e){for(var o=[],n=1;n<arguments.length;n++)o[n-1]=arguments[n];r.isLowerThanOrEqualTo(t._logLevel,u.LogLevel.Debug)&&i.default.debug.apply(i.default,a([e],o))},this.info=function(e){for(var o=[],n=1;n<arguments.length;n++)o[n-1]=arguments[n];r.isLowerThanOrEqualTo(t._logLevel,u.LogLevel.Info)&&i.default.info.apply(i.default,a([e],o))},this.success=function(e){for(var o=[],n=1;n<arguments.length;n++)o[n-1]=arguments[n];r.isLowerThanOrEqualTo(t._logLevel,u.LogLevel.Info)&&i.default.success.apply(i.default,a([e],o))},this.warn=function(e){for(var o=[],n=1;n<arguments.length;n++)o[n-1]=arguments[n];r.isLowerThanOrEqualTo(t._logLevel,u.LogLevel.Warn)&&i.default.warn.apply(i.default,a([e],o))},this.error=function(e){for(var o=[],n=1;n<arguments.length;n++)o[n-1]=arguments[n];r.isLowerThanOrEqualTo(t._logLevel,u.LogLevel.Error)&&i.default.error.apply(i.default,a([e],o))},this.log=function(e){for(var t=[],o=1;o<arguments.length;o++)t[o-1]=arguments[o];i.default.log.apply(i.default,a([e],t))},this.table=function(e,o,a){var n,i,r={chars:{top:"═","top-mid":"╤","top-left":"╔","top-right":"╗",bottom:"═","bottom-mid":"╧","bottom-left":"╚","bottom-right":"╝",left:"║","left-mid":"╟",mid:"─","mid-mid":"┼",right:"║","right-mid":"╢",middle:"│"},head:[]};i=o&&Object.keys(o).length?new l.default({chars:o.chars||r.chars,head:(null===(n=o.head)||void 0===n?void 0:n.map((function(e){return p.default.white.bold(e)})))||r.head}):new l.default({chars:r.chars}),e.forEach((function(e){return i.push(e)})),t.log((a?c.sanitizeSpecialChars(i.toString()):i.toString())+"\n")},!s.isNullOrUndefined(e)&&e in u.LogLevel&&(this._logLevel=e)}return Object.defineProperty(e.prototype,"logLevel",{get:function(){return this._logLevel},set:function(e){this._logLevel=e},enumerable:!1,configurable:!0}),e}();t.Logger=m},7757:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateTimestamp=t.timestampToYYYYMMDDHHMMSS=void 0;var a=o(1302);Object.defineProperty(t,"timestampToYYYYMMDDHHMMSS",{enumerable:!0,get:function(){return a.timestampToYYYYMMDDHHMMSS}}),Object.defineProperty(t,"generateTimestamp",{enumerable:!0,get:function(){return a.generateTimestamp}})},1302:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateTimestamp=t.timestampToYYYYMMDDHHMMSS=void 0;var a=o(2777);t.timestampToYYYYMMDDHHMMSS=function(e){void 0===e&&(e=Date.now());var t=new Date(e);return[t.getFullYear(),a.padWithNumber(t.getMonth()+1),a.padWithNumber(t.getDate())].join("/")+" "+[a.padWithNumber(t.getHours()),a.padWithNumber(t.getMinutes()),a.padWithNumber(t.getSeconds())].join(":")},t.generateTimestamp=function(e,t){void 0===e&&(e="");var o=new Date,n=[o.getUTCFullYear(),o.getUTCMonth()+1,o.getUTCDate(),o.getUTCHours(),o.getUTCMinutes(),o.getUTCSeconds()];return n=n.map((function(e){return a.padWithNumber(e)})),t&&e&&t<n.length&&t>=0&&n.splice(t,0,e),n=n.join(t?"":e)}},8239:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},2427:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},3692:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},3900:function(e,t,o){"use strict";var a=this&&this.__createBinding||(Object.create?function(e,t,o,a){void 0===a&&(a=o),Object.defineProperty(e,a,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,a){void 0===a&&(a=o),e[a]=t[o]}),n=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||a(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0}),n(o(2427),t),n(o(8932),t),n(o(8515),t),n(o(2015),t),n(o(8979),t),n(o(8239),t),n(o(4069),t),n(o(3692),t)},4069:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isMacroVars=void 0;t.isMacroVars=function(e){return e&&"object"==typeof e.macroVars&&!Array.isArray(e.macroVars)}},8932:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},2015:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8515:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ServerType=void 0,function(e){e.SasViya="SASVIYA",e.Sas9="SAS9"}(t.ServerType||(t.ServerType={}))},8979:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Target=void 0;var a=o(8515),n=o(6781),i=function(){function e(e){this._serverType=a.ServerType.SasViya,this._macroFolders=[],this._programFolders=[];try{if(!e)throw new Error("Invalid target: Input JSON is null or undefined.");this._name=n.validateTargetName(e.name),this._serverUrl=n.validateServerUrl(e.serverUrl),this._serverType=n.validateServerType(e.serverType),this._allowInsecureRequests=n.validateAllowInsecureRequests(e.allowInsecureRequests),this._appLoc=n.validateAppLoc(e.appLoc),this._contextName=n.validateContextName(e.contextName,this._serverType),this._serverName=n.validateServerName(e.serverName,this._serverType),this._repositoryName=n.validateRepositoryName(e.repositoryName,this._serverType),e.docConfig&&(this._docConfig=n.validateDocConfig(e.docConfig)),e.authConfig&&(this._authConfig=n.validateAuthConfig(e.authConfig)),e.buildConfig&&(this._buildConfig=n.validateBuildConfig(e.buildConfig,this._name)),e.deployConfig&&(this._deployConfig=n.validateDeployConfig(e.deployConfig)),e.serviceConfig&&(this._serviceConfig=n.validateServiceConfig(e.serviceConfig)),e.jobConfig&&(this._jobConfig=n.validateJobConfig(e.jobConfig)),e.streamConfig&&(this._streamConfig=n.validateStreamConfig(e.streamConfig)),e.testConfig&&(this._testConfig=n.validateTestConfig(e.testConfig)),e.macroFolders&&e.macroFolders.length&&(this._macroFolders=e.macroFolders),e.programFolders&&e.programFolders.length&&(this._programFolders=e.programFolders)}catch(e){throw new Error("Error parsing target: "+e.message)}}return Object.defineProperty(e.prototype,"name",{get:function(){return this._name},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"serverUrl",{get:function(){return this._serverUrl},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"serverType",{get:function(){return this._serverType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"allowInsecureRequests",{get:function(){return this._allowInsecureRequests},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"appLoc",{get:function(){return this._appLoc},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"docConfig",{get:function(){return this._docConfig},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"authConfig",{get:function(){return this._authConfig},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"buildConfig",{get:function(){return this._buildConfig},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"deployConfig",{get:function(){return this._deployConfig},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"serviceConfig",{get:function(){return this._serviceConfig},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"jobConfig",{get:function(){return this._jobConfig},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"streamConfig",{get:function(){return this._streamConfig},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"macroFolders",{get:function(){return this._macroFolders},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"programFolders",{get:function(){return this._programFolders},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contextName",{get:function(){return this._contextName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"serverName",{get:function(){return this._serverName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"repositoryName",{get:function(){return this._repositoryName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"testConfig",{get:function(){return this._testConfig},enumerable:!1,configurable:!0}),e.prototype.toJson=function(e){void 0===e&&(e=!0);var t={name:this.name,serverUrl:this.serverUrl,serverType:this.serverType,allowInsecureRequests:this.allowInsecureRequests,appLoc:this.appLoc,macroFolders:this.macroFolders,programFolders:this.programFolders,docConfig:this.docConfig};return this.authConfig?t.authConfig=this.authConfig:e&&(t.authConfig={access_token:"",refresh_token:"",client:"",secret:""}),this.buildConfig?t.buildConfig=this.buildConfig:e&&(t.buildConfig={initProgram:"",termProgram:"",buildOutputFileName:this.name+".sas",buildOutputFolder:"sasjsbuild",buildResultsFolder:"sasjsresults",macroVars:{}}),this.jobConfig?t.jobConfig=this.jobConfig:e&&(t.jobConfig={jobFolders:[],initProgram:"",termProgram:"",macroVars:{}}),this.serviceConfig?t.serviceConfig=this.serviceConfig:e&&(t.serviceConfig={serviceFolders:[],initProgram:"",termProgram:"",macroVars:{}}),this.streamConfig?t.streamConfig=this.streamConfig:e&&(t.streamConfig={streamWebFolder:"",streamWeb:!1,webSourcePath:"",streamServiceName:"",assetPaths:[]}),this.deployConfig?t.deployConfig=this.deployConfig:e&&(t.deployConfig={deployScripts:[],deployServicePack:!1}),this.testConfig?t.testConfig=this.testConfig:e&&(t.testConfig={initProgram:"",termProgram:"",macroVars:{},testSetUp:"",testTearDown:""}),this.serverType===a.ServerType.SasViya?t.contextName=this.contextName:(t.serverName=this.serverName,t.repositoryName=this.repositoryName),t},e}();t.Target=i},6781:function(e,t,o){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.validateRepositoryName=t.validateServerName=t.validateContextName=t.validateStreamConfig=t.validateDeployConfig=t.validateJobConfig=t.validateTestConfig=t.validateServiceConfig=t.validateBuildConfig=t.validateAuthConfig=t.validateDocConfig=t.validateAppLoc=t.validateAllowInsecureRequests=t.validateServerUrl=t.validateTargetName=t.validateServerType=void 0;var n=a(o(8611)),i=o(3900);t.validateServerType=function(e){if(!e)throw new Error("Invalid server type: `serverType` cannot be null or undefined.");if(e!==i.ServerType.Sas9&&e!==i.ServerType.SasViya)throw new Error("Invalid server type: Supported values for  `serverType` are "+i.ServerType.SasViya+" and "+i.ServerType.Sas9+".");return e};t.validateTargetName=function(e){if(!e)throw new Error("Invalid target name: `name` cannot be empty, null or undefined.");if(e.trim().includes(" "))throw new Error("Invalid target name: `name` cannot include spaces.");if(!/^[a-zA-Z0-9\-]+$/i.test(e))throw new Error("Invalid target name: `name` can only contain alphanumeric characters and dashes.");return e};t.validateServerUrl=function(e){if(null==e&&(e=""),""!==e&&!n.default.isHttpUri(e)&&!n.default.isHttpsUri(e))throw new Error("Invalid server URL: `serverUrl` should either be an empty string or a valid URL of the form http(s)://your-server.com(:port).");return e};t.validateAllowInsecureRequests=function(e){if(null==e)e=!1;else if("boolean"!=typeof e)throw new Error("Invalid value: `allowInsecureRequests` should either be an empty or a boolean");return e};t.validateAppLoc=function(e){if(!e)throw new Error("Invalid app location: `appLoc` cannot be empty, null or undefined.");if(!e.startsWith("/"))throw new Error("Invalid app location: `appLoc` must start with a `/`.");return e};t.validateDocConfig=function(e){if(e||(e={}),"boolean"!=typeof e.displayMacroCore&&(e.displayMacroCore=void 0),"boolean"!=typeof e.enableLineage&&(e.enableLineage=void 0),"string"!=typeof e.outDirectory&&(e.outDirectory=void 0),"string"==typeof e.dataControllerUrl){if(""!==e.dataControllerUrl&&!n.default.isHttpUri(e.dataControllerUrl)&&!n.default.isHttpsUri(e.dataControllerUrl))throw new Error("Invalid Data Controller Url: `dataControllerUrl` should either be an empty string or a valid URL of the form http(s)://your-server.com(:port).")}else e.dataControllerUrl=void 0;return e};t.validateAuthConfig=function(e){if(!e)throw new Error("Invalid auth config: JSON cannot be null or undefined.");return e};t.validateBuildConfig=function(e,t){if(!e)throw new Error("Invalid build config: JSON cannot be null or undefined.");return e.buildResultsFolder||(e.buildResultsFolder="sasjsresults"),e.buildOutputFolder||(e.buildOutputFolder="sasjsbuild"),e.buildOutputFileName||(e.buildOutputFileName=t+".sas"),e.initProgram||(e.initProgram=""),e.termProgram||(e.termProgram=""),e.macroVars||(e.macroVars={}),e};t.validateServiceConfig=function(e){if(!e)throw new Error("Invalid service config: JSON cannot be null or undefined.");return e.initProgram||(e.initProgram=""),e.termProgram||(e.termProgram=""),e.serviceFolders||(e.serviceFolders=[]),e.macroVars||(e.macroVars={}),e};t.validateTestConfig=function(e){if(!e)throw new Error("Invalid test config: JSON cannot be null or undefined.");return e.initProgram||(e.initProgram=""),e.termProgram||(e.termProgram=""),e.macroVars||(e.macroVars={}),e.testSetUp||(e.testSetUp=""),e.testTearDown||(e.testTearDown=""),e};t.validateJobConfig=function(e){if(!e)throw new Error("Invalid job config: JSON cannot be null or undefined.");return e.initProgram||(e.initProgram=""),e.termProgram||(e.termProgram=""),e.jobFolders||(e.jobFolders=[]),e.macroVars||(e.macroVars={}),e};t.validateDeployConfig=function(e){if(!e)throw new Error("Invalid deploy config: JSON cannot be null or undefined.");return e.deployServicePack=!!e.deployServicePack,e.deployScripts||(e.deployScripts=[]),e};t.validateStreamConfig=function(e){if(!e)throw new Error("Invalid stream config: JSON cannot be null or undefined.");if(!0!==e.streamWeb&&!1!==e.streamWeb)throw new Error("Invalid stream config: `streamWeb` cannot be a non-boolean value.");if(e.streamWeb&&!e.streamWebFolder)throw new Error("Invalid stream config: `streamWebFolder` cannot be empty, null or undefined when `streamWeb` is true.");if(e.streamWeb&&!e.webSourcePath)throw new Error("Invalid stream config: `webSourcePath` cannot be empty, null or undefined.");return e.assetPaths||(e.assetPaths=[]),e.streamServiceName||(e.streamServiceName="clickme"),e};t.validateContextName=function(e,t){return t!==i.ServerType.SasViya||e?e:"SAS Job Execution compute context"};t.validateServerName=function(e,t){return t!==i.ServerType.Sas9||e?e:"SASApp"};t.validateRepositoryName=function(e,t){return t!==i.ServerType.Sas9||e?e:"Foundation"}},6434:(e,t,o)=>{"use strict";e=o.nmd(e);const a=(e,t)=>(...o)=>`[${e(...o)+t}m`,n=(e,t)=>(...o)=>{const a=e(...o);return`[${38+t};5;${a}m`},i=(e,t)=>(...o)=>{const a=e(...o);return`[${38+t};2;${a[0]};${a[1]};${a[2]}m`},r=e=>e,s=(e,t,o)=>[e,t,o],u=(e,t,o)=>{Object.defineProperty(e,t,{get:()=>{const a=o();return Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0}),a},enumerable:!0,configurable:!0})};let c;const l=(e,t,a,n)=>{void 0===c&&(c=o(2085));const i=n?10:0,r={};for(const[o,n]of Object.entries(c)){const s="ansi16"===o?"ansi":o;o===t?r[s]=e(a,i):"object"==typeof n&&(r[s]=e(n[t],i))}return r};Object.defineProperty(e,"exports",{enumerable:!0,get:function(){const e=new Map,t={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};t.color.gray=t.color.blackBright,t.bgColor.bgGray=t.bgColor.bgBlackBright,t.color.grey=t.color.blackBright,t.bgColor.bgGrey=t.bgColor.bgBlackBright;for(const[o,a]of Object.entries(t)){for(const[o,n]of Object.entries(a))t[o]={open:`[${n[0]}m`,close:`[${n[1]}m`},a[o]=t[o],e.set(n[0],n[1]);Object.defineProperty(t,o,{value:a,enumerable:!1})}return Object.defineProperty(t,"codes",{value:e,enumerable:!1}),t.color.close="[39m",t.bgColor.close="[49m",u(t.color,"ansi",(()=>l(a,"ansi16",r,!1))),u(t.color,"ansi256",(()=>l(n,"ansi256",r,!1))),u(t.color,"ansi16m",(()=>l(i,"rgb",s,!1))),u(t.bgColor,"ansi",(()=>l(a,"ansi16",r,!0))),u(t.bgColor,"ansi256",(()=>l(n,"ansi256",r,!0))),u(t.bgColor,"ansi16m",(()=>l(i,"rgb",s,!0))),t}})},8224:e=>{"use strict";e.exports=function(e){return e}},9669:(e,t,o)=>{e.exports=o(1609)},5448:(e,t,o)=>{"use strict";var a=o(4867),n=o(6026),i=o(4372),r=o(5327),s=o(4097),u=o(4109),c=o(7985),l=o(5061);e.exports=function(e){return new Promise((function(t,o){var p=e.data,m=e.headers;a.isFormData(p)&&delete m["Content-Type"];var h=new XMLHttpRequest;if(e.auth){var d=e.auth.username||"",f=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";m.Authorization="Basic "+btoa(d+":"+f)}var g=s(e.baseURL,e.url);if(h.open(e.method.toUpperCase(),r(g,e.params,e.paramsSerializer),!0),h.timeout=e.timeout,h.onreadystatechange=function(){if(h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var a="getAllResponseHeaders"in h?u(h.getAllResponseHeaders()):null,i={data:e.responseType&&"text"!==e.responseType?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:a,config:e,request:h};n(t,o,i),h=null}},h.onabort=function(){h&&(o(l("Request aborted",e,"ECONNABORTED",h)),h=null)},h.onerror=function(){o(l("Network Error",e,null,h)),h=null},h.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),o(l(t,e,"ECONNABORTED",h)),h=null},a.isStandardBrowserEnv()){var v=(e.withCredentials||c(g))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;v&&(m[e.xsrfHeaderName]=v)}if("setRequestHeader"in h&&a.forEach(m,(function(e,t){void 0===p&&"content-type"===t.toLowerCase()?delete m[t]:h.setRequestHeader(t,e)})),a.isUndefined(e.withCredentials)||(h.withCredentials=!!e.withCredentials),e.responseType)try{h.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&h.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){h&&(h.abort(),o(e),h=null)})),p||(p=null),h.send(p)}))}},1609:(e,t,o)=>{"use strict";var a=o(4867),n=o(1849),i=o(321),r=o(7185);function s(e){var t=new i(e),o=n(i.prototype.request,t);return a.extend(o,i.prototype,t),a.extend(o,t),o}var u=s(o(5655));u.Axios=i,u.create=function(e){return s(r(u.defaults,e))},u.Cancel=o(5263),u.CancelToken=o(4972),u.isCancel=o(6502),u.all=function(e){return Promise.all(e)},u.spread=o(8713),u.isAxiosError=o(6268),e.exports=u,e.exports.default=u},5263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},4972:(e,t,o)=>{"use strict";var a=o(5263);function n(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var o=this;e((function(e){o.reason||(o.reason=new a(e),t(o.reason))}))}n.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},n.source=function(){var e;return{token:new n((function(t){e=t})),cancel:e}},e.exports=n},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,o)=>{"use strict";var a=o(4867),n=o(5327),i=o(782),r=o(3572),s=o(7185);function u(e){this.defaults=e,this.interceptors={request:new i,response:new i}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[r,void 0],o=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)o=o.then(t.shift(),t.shift());return o},u.prototype.getUri=function(e){return e=s(this.defaults,e),n(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},a.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,o){return this.request(s(o||{},{method:e,url:t,data:(o||{}).data}))}})),a.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,o,a){return this.request(s(a||{},{method:e,url:t,data:o}))}})),e.exports=u},782:(e,t,o)=>{"use strict";var a=o(4867);function n(){this.handlers=[]}n.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},n.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},n.prototype.forEach=function(e){a.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=n},4097:(e,t,o)=>{"use strict";var a=o(1793),n=o(7303);e.exports=function(e,t){return e&&!a(t)?n(e,t):t}},5061:(e,t,o)=>{"use strict";var a=o(481);e.exports=function(e,t,o,n,i){var r=new Error(e);return a(r,t,o,n,i)}},3572:(e,t,o)=>{"use strict";var a=o(4867),n=o(8527),i=o(6502),r=o(5655);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=n(e.data,e.headers,e.transformRequest),e.headers=a.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),a.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||r.adapter)(e).then((function(t){return s(e),t.data=n(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(s(e),t&&t.response&&(t.response.data=n(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,o,a,n){return e.config=t,o&&(e.code=o),e.request=a,e.response=n,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},7185:(e,t,o)=>{"use strict";var a=o(4867);e.exports=function(e,t){t=t||{};var o={},n=["url","method","data"],i=["headers","auth","proxy","params"],r=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],s=["validateStatus"];function u(e,t){return a.isPlainObject(e)&&a.isPlainObject(t)?a.merge(e,t):a.isPlainObject(t)?a.merge({},t):a.isArray(t)?t.slice():t}function c(n){a.isUndefined(t[n])?a.isUndefined(e[n])||(o[n]=u(void 0,e[n])):o[n]=u(e[n],t[n])}a.forEach(n,(function(e){a.isUndefined(t[e])||(o[e]=u(void 0,t[e]))})),a.forEach(i,c),a.forEach(r,(function(n){a.isUndefined(t[n])?a.isUndefined(e[n])||(o[n]=u(void 0,e[n])):o[n]=u(void 0,t[n])})),a.forEach(s,(function(a){a in t?o[a]=u(e[a],t[a]):a in e&&(o[a]=u(void 0,e[a]))}));var l=n.concat(i).concat(r).concat(s),p=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===l.indexOf(e)}));return a.forEach(p,c),o}},6026:(e,t,o)=>{"use strict";var a=o(5061);e.exports=function(e,t,o){var n=o.config.validateStatus;o.status&&n&&!n(o.status)?t(a("Request failed with status code "+o.status,o.config,null,o.request,o)):e(o)}},8527:(e,t,o)=>{"use strict";var a=o(4867);e.exports=function(e,t,o){return a.forEach(o,(function(o){e=o(e,t)})),e}},5655:(e,t,o)=>{"use strict";var a=o(4155),n=o(4867),i=o(6016),r={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,c={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==a&&"[object process]"===Object.prototype.toString.call(a))&&(u=o(5448)),u),transformRequest:[function(e,t){return i(t,"Accept"),i(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)?(s(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),n.forEach(["post","put","patch"],(function(e){c.headers[e]=n.merge(r)})),e.exports=c},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var o=new Array(arguments.length),a=0;a<o.length;a++)o[a]=arguments[a];return e.apply(t,o)}}},5327:(e,t,o)=>{"use strict";var a=o(4867);function n(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,o){if(!t)return e;var i;if(o)i=o(t);else if(a.isURLSearchParams(t))i=t.toString();else{var r=[];a.forEach(t,(function(e,t){null!=e&&(a.isArray(e)?t+="[]":e=[e],a.forEach(e,(function(e){a.isDate(e)?e=e.toISOString():a.isObject(e)&&(e=JSON.stringify(e)),r.push(n(t)+"="+n(e))})))})),i=r.join("&")}if(i){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,o)=>{"use strict";var a=o(4867);e.exports=a.isStandardBrowserEnv()?{write:function(e,t,o,n,i,r){var s=[];s.push(e+"="+encodeURIComponent(t)),a.isNumber(o)&&s.push("expires="+new Date(o).toGMTString()),a.isString(n)&&s.push("path="+n),a.isString(i)&&s.push("domain="+i),!0===r&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},6268:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},7985:(e,t,o)=>{"use strict";var a=o(4867);e.exports=a.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),o=document.createElement("a");function n(e){var a=e;return t&&(o.setAttribute("href",a),a=o.href),o.setAttribute("href",a),{href:o.href,protocol:o.protocol?o.protocol.replace(/:$/,""):"",host:o.host,search:o.search?o.search.replace(/^\?/,""):"",hash:o.hash?o.hash.replace(/^#/,""):"",hostname:o.hostname,port:o.port,pathname:"/"===o.pathname.charAt(0)?o.pathname:"/"+o.pathname}}return e=n(window.location.href),function(t){var o=a.isString(t)?n(t):t;return o.protocol===e.protocol&&o.host===e.host}}():function(){return!0}},6016:(e,t,o)=>{"use strict";var a=o(4867);e.exports=function(e,t){a.forEach(e,(function(o,a){a!==t&&a.toUpperCase()===t.toUpperCase()&&(e[t]=o,delete e[a])}))}},4109:(e,t,o)=>{"use strict";var a=o(4867),n=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,o,i,r={};return e?(a.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=a.trim(e.substr(0,i)).toLowerCase(),o=a.trim(e.substr(i+1)),t){if(r[t]&&n.indexOf(t)>=0)return;r[t]="set-cookie"===t?(r[t]?r[t]:[]).concat([o]):r[t]?r[t]+", "+o:o}})),r):r}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},4867:(e,t,o)=>{"use strict";var a=o(1849),n=Object.prototype.toString;function i(e){return"[object Array]"===n.call(e)}function r(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function u(e){if("[object Object]"!==n.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function c(e){return"[object Function]"===n.call(e)}function l(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var o=0,a=e.length;o<a;o++)t.call(null,e[o],o,e);else for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.call(null,e[n],n,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===n.call(e)},isBuffer:function(e){return null!==e&&!r(e)&&null!==e.constructor&&!r(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isPlainObject:u,isUndefined:r,isDate:function(e){return"[object Date]"===n.call(e)},isFile:function(e){return"[object File]"===n.call(e)},isBlob:function(e){return"[object Blob]"===n.call(e)},isFunction:c,isStream:function(e){return s(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:l,merge:function e(){var t={};function o(o,a){u(t[a])&&u(o)?t[a]=e(t[a],o):u(o)?t[a]=e({},o):i(o)?t[a]=o.slice():t[a]=o}for(var a=0,n=arguments.length;a<n;a++)l(arguments[a],o);return t},extend:function(e,t,o){return l(t,(function(t,n){e[n]=o&&"function"==typeof t?a(t,o):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},4061:(e,t,o)=>{"use strict";const a=o(6434),{stdout:n,stderr:i}=o(8555),{stringReplaceAll:r,stringEncaseCRLFWithFirstIndex:s}=o(3559),{isArray:u}=Array,c=["ansi","ansi","ansi256","ansi16m"],l=Object.create(null);class p{constructor(e){return m(e)}}const m=e=>{const t={};return((e,t={})=>{if(t.level&&!(Number.isInteger(t.level)&&t.level>=0&&t.level<=3))throw new Error("The `level` option should be an integer from 0 to 3");const o=n?n.level:0;e.level=void 0===t.level?o:t.level})(t,e),t.template=(...e)=>y(t.template,...e),Object.setPrototypeOf(t,h.prototype),Object.setPrototypeOf(t.template,t),t.template.constructor=()=>{throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.")},t.template.Instance=p,t.template};function h(e){return m(e)}for(const[e,t]of Object.entries(a))l[e]={get(){const o=v(this,g(t.open,t.close,this._styler),this._isEmpty);return Object.defineProperty(this,e,{value:o}),o}};l.visible={get(){const e=v(this,this._styler,!0);return Object.defineProperty(this,"visible",{value:e}),e}};const d=["rgb","hex","keyword","hsl","hsv","hwb","ansi","ansi256"];for(const e of d)l[e]={get(){const{level:t}=this;return function(...o){const n=g(a.color[c[t]][e](...o),a.color.close,this._styler);return v(this,n,this._isEmpty)}}};for(const e of d){l["bg"+e[0].toUpperCase()+e.slice(1)]={get(){const{level:t}=this;return function(...o){const n=g(a.bgColor[c[t]][e](...o),a.bgColor.close,this._styler);return v(this,n,this._isEmpty)}}}}const f=Object.defineProperties((()=>{}),{...l,level:{enumerable:!0,get(){return this._generator.level},set(e){this._generator.level=e}}}),g=(e,t,o)=>{let a,n;return void 0===o?(a=e,n=t):(a=o.openAll+e,n=t+o.closeAll),{open:e,close:t,openAll:a,closeAll:n,parent:o}},v=(e,t,o)=>{const a=(...e)=>u(e[0])&&u(e[0].raw)?b(a,y(a,...e)):b(a,1===e.length?""+e[0]:e.join(" "));return Object.setPrototypeOf(a,f),a._generator=e,a._styler=t,a._isEmpty=o,a},b=(e,t)=>{if(e.level<=0||!t)return e._isEmpty?"":t;let o=e._styler;if(void 0===o)return t;const{openAll:a,closeAll:n}=o;if(-1!==t.indexOf(""))for(;void 0!==o;)t=r(t,o.close,o.open),o=o.parent;const i=t.indexOf("\n");return-1!==i&&(t=s(t,n,a,i)),a+t+n};let k;const y=(e,...t)=>{const[a]=t;if(!u(a)||!u(a.raw))return t.join(" ");const n=t.slice(1),i=[a.raw[0]];for(let e=1;e<a.length;e++)i.push(String(n[e-1]).replace(/[{}\\]/g,"\\$&"),String(a.raw[e]));return void 0===k&&(k=o(9515)),k(e,i.join(""))};Object.defineProperties(h.prototype,l);const j=h();j.supportsColor=n,j.stderr=h({level:i?i.level:0}),j.stderr.supportsColor=i,e.exports=j},9515:e=>{"use strict";const t=/(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi,o=/(?:^|\.)(\w+)(?:\(([^)]*)\))?/g,a=/^(['"])((?:\\.|(?!\1)[^\\])*)\1$/,n=/\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi,i=new Map([["n","\n"],["r","\r"],["t","\t"],["b","\b"],["f","\f"],["v","\v"],["0","\0"],["\\","\\"],["e",""],["a",""]]);function r(e){const t="u"===e[0],o="{"===e[1];return t&&!o&&5===e.length||"x"===e[0]&&3===e.length?String.fromCharCode(parseInt(e.slice(1),16)):t&&o?String.fromCodePoint(parseInt(e.slice(2,-1),16)):i.get(e)||e}function s(e,t){const o=[],i=t.trim().split(/\s*,\s*/g);let s;for(const t of i){const i=Number(t);if(Number.isNaN(i)){if(!(s=t.match(a)))throw new Error(`Invalid Chalk template style argument: ${t} (in style '${e}')`);o.push(s[2].replace(n,((e,t,o)=>t?r(t):o)))}else o.push(i)}return o}function u(e){o.lastIndex=0;const t=[];let a;for(;null!==(a=o.exec(e));){const e=a[1];if(a[2]){const o=s(e,a[2]);t.push([e].concat(o))}else t.push([e])}return t}function c(e,t){const o={};for(const e of t)for(const t of e.styles)o[t[0]]=e.inverse?null:t.slice(1);let a=e;for(const[e,t]of Object.entries(o))if(Array.isArray(t)){if(!(e in a))throw new Error(`Unknown Chalk style: ${e}`);a=t.length>0?a[e](...t):a[e]}return a}e.exports=(e,o)=>{const a=[],n=[];let i=[];if(o.replace(t,((t,o,s,l,p,m)=>{if(o)i.push(r(o));else if(l){const t=i.join("");i=[],n.push(0===a.length?t:c(e,a)(t)),a.push({inverse:s,styles:u(l)})}else if(p){if(0===a.length)throw new Error("Found extraneous } in Chalk template literal");n.push(c(e,a)(i.join(""))),i=[],a.pop()}else i.push(m)})),n.push(i.join("")),a.length>0){const e=`Chalk template literal is missing ${a.length} closing bracket${1===a.length?"":"s"} (\`}\`)`;throw new Error(e)}return n.join("")}},3559:e=>{"use strict";e.exports={stringReplaceAll:(e,t,o)=>{let a=e.indexOf(t);if(-1===a)return e;const n=t.length;let i=0,r="";do{r+=e.substr(i,a-i)+t+o,i=a+n,a=e.indexOf(t,i)}while(-1!==a);return r+=e.substr(i),r},stringEncaseCRLFWithFirstIndex:(e,t,o,a)=>{let n=0,i="";do{const r="\r"===e[a-1];i+=e.substr(n,(r?a-1:a)-n)+t+(r?"\r\n":"\n")+o,n=a+1,a=e.indexOf("\n",n)}while(-1!==a);return i+=e.substr(n),i}}},8593:(e,t,o)=>{var a=o(4431),n=o(3336),i=n.repeat,r=n.truncate,s=n.pad;function u(e){this.options=n.options({chars:{top:"─","top-mid":"┬","top-left":"┌","top-right":"┐",bottom:"─","bottom-mid":"┴","bottom-left":"└","bottom-right":"┘",left:"│","left-mid":"├",mid:"─","mid-mid":"┼",right:"│","right-mid":"┤",middle:"│"},truncate:"…",colWidths:[],colAligns:[],style:{"padding-left":1,"padding-right":1,head:["red"],border:["grey"],compact:!1},head:[]},e)}u.prototype.__proto__=Array.prototype,u.prototype.__defineGetter__("width",(function(){var e=this.toString().split("\n");return e.length?e[0].length:0})),u.prototype.render,u.prototype.toString=function(){var e,t="",o=this.options,u=o.style,c=o.head,l=o.chars,p=o.truncate,m=o.colWidths||new Array(this.head.length);if(!c.length&&!this.length)return"";if(!m.length){var h=this.slice(0);c.length&&(h=h.concat([c])),h.forEach((function(e){if("object"==typeof e&&e.length)d(e);else{var t=Object.keys(e)[0],o=e[t];m[0]=Math.max(m[0]||0,f(t)||0),"object"==typeof o&&o.length?d(o,1):m[1]=Math.max(m[1]||0,f(o)||0)}}))}function d(e,t){t=t||0;e.forEach((function(e,o){m[o+t]=Math.max(m[o+t]||0,f(e)||0)}))}function f(e){return"object"==typeof e&&null!=e.width?e.width:("object"==typeof e?n.strlen(e.text):n.strlen(e))+(u["padding-left"]||0)+(u["padding-right"]||0)}function g(t,a,n,r){var s=0;t=a+i(t,e-2)+n;return m.forEach((function(e,o){o!=m.length-1&&(s+=e+1,t=t.substr(0,s)+r+t.substr(s+1))})),k(o.style.border,t)}function v(){var e=g(l.top,l["top-left"]||l.top,l["top-right"]||l.top,l["top-mid"]);e&&(t+=e+"\n")}function b(e,t){var a=[],n=0;if(!Array.isArray(e)&&"object"==typeof e){var i=Object.keys(e)[0],r=e[i],s=!0;Array.isArray(r)?(e=r).unshift(i):e=[i,r]}e.forEach((function(e,t){var o=e.toString().split("\n").reduce((function(e,o){return e.push(y(o,t)),e}),[]),i=o.length;i>n&&(n=i),a.push({contents:o,height:i})}));var u=new Array(n);a.forEach((function(e,a){e.contents.forEach((function(e,n){u[n]||(u[n]=[]),(t||s&&0===a&&o.style.head)&&(e=k(o.style.head,e)),u[n].push(e)}));for(var i=e.height,r=n;i<r;i++)u[i]||(u[i]=[]),u[i].push(y("",a))}));var c="";return u.forEach((function(e,t){c.length>0&&(c+="\n"+k(o.style.border,l.left)),c+=e.join(k(o.style.border,l.middle))+k(o.style.border,l.right)})),k(o.style.border,l.left)+c}function k(e,t){return t?(e.forEach((function(e){t=a[e](t)})),t):""}function y(e,t){e=String("object"==typeof e&&e.text?e.text:e);var a=n.strlen(e),c=m[t]-(u["padding-left"]||0)-(u["padding-right"]||0),l=o.colAligns[t]||"left";return i(" ",u["padding-left"]||0)+(a==c?e:a<c?s(e,c+(e.length-a)," ","left"==l?"right":"middle"==l?"both":"left"):p?r(e,c,p):e)+i(" ",u["padding-right"]||0)}e=(1==m.length?m[0]:m.reduce((function(e,t){return e+t})))+m.length+1,c.length&&(v(),t+=b(c,u.head)+"\n"),this.length&&this.forEach((function(e,o){if(c.length||0!=o){if(!u.compact||o<!!c.length||0==e.length){var a=g(l.mid,l["left-mid"],l["right-mid"],l["mid-mid"]);a&&(t+=a+"\n")}}else v();e.hasOwnProperty("length")&&!e.length||(t+=b(e)+"\n")}));var j=g(l.bottom,l["bottom-left"]||l.bottom,l["bottom-right"]||l.bottom,l["bottom-mid"]);return j?t+=j:t=t.slice(0,-1),t},e.exports=u,e.exports.version="0.0.1"},3336:(e,t)=>{t.repeat=function(e,t){return Array(t+1).join(e)},t.pad=function(e,t,o,a){if(t+1>=e.length)switch(a){case"left":e=Array(t+1-e.length).join(o)+e;break;case"both":var n=Math.ceil((padlen=t-e.length)/2),i=padlen-n;e=Array(i+1).join(o)+e+Array(n+1).join(o);break;default:e+=Array(t+1-e.length).join(o)}return e},t.truncate=function(e,t,o){return o=o||"…",e.length>=t?e.substr(0,t-o.length)+o:e},t.options=function e(t,o){for(var a in o)"__proto__"!==a&&"constructor"!==a&&"prototype"!==a&&(o[a]&&o[a].constructor&&o[a].constructor===Object?(t[a]=t[a]||{},e(t[a],o[a])):t[a]=o[a]);return t},t.strlen=function(e){return(""+e).replace(/\u001b\[(?:\d*;){0,5}\d*m/g,"").split("\n").reduce((function(e,t){return t.length>e?t.length:e}),0)}},8168:(e,t,o)=>{const a=o(8874),n={};for(const e of Object.keys(a))n[a[e]]=e;const i={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};e.exports=i;for(const e of Object.keys(i)){if(!("channels"in i[e]))throw new Error("missing channels property: "+e);if(!("labels"in i[e]))throw new Error("missing channel labels property: "+e);if(i[e].labels.length!==i[e].channels)throw new Error("channel and label counts mismatch: "+e);const{channels:t,labels:o}=i[e];delete i[e].channels,delete i[e].labels,Object.defineProperty(i[e],"channels",{value:t}),Object.defineProperty(i[e],"labels",{value:o})}i.rgb.hsl=function(e){const t=e[0]/255,o=e[1]/255,a=e[2]/255,n=Math.min(t,o,a),i=Math.max(t,o,a),r=i-n;let s,u;i===n?s=0:t===i?s=(o-a)/r:o===i?s=2+(a-t)/r:a===i&&(s=4+(t-o)/r),s=Math.min(60*s,360),s<0&&(s+=360);const c=(n+i)/2;return u=i===n?0:c<=.5?r/(i+n):r/(2-i-n),[s,100*u,100*c]},i.rgb.hsv=function(e){let t,o,a,n,i;const r=e[0]/255,s=e[1]/255,u=e[2]/255,c=Math.max(r,s,u),l=c-Math.min(r,s,u),p=function(e){return(c-e)/6/l+.5};return 0===l?(n=0,i=0):(i=l/c,t=p(r),o=p(s),a=p(u),r===c?n=a-o:s===c?n=1/3+t-a:u===c&&(n=2/3+o-t),n<0?n+=1:n>1&&(n-=1)),[360*n,100*i,100*c]},i.rgb.hwb=function(e){const t=e[0],o=e[1];let a=e[2];const n=i.rgb.hsl(e)[0],r=1/255*Math.min(t,Math.min(o,a));return a=1-1/255*Math.max(t,Math.max(o,a)),[n,100*r,100*a]},i.rgb.cmyk=function(e){const t=e[0]/255,o=e[1]/255,a=e[2]/255,n=Math.min(1-t,1-o,1-a);return[100*((1-t-n)/(1-n)||0),100*((1-o-n)/(1-n)||0),100*((1-a-n)/(1-n)||0),100*n]},i.rgb.keyword=function(e){const t=n[e];if(t)return t;let o,i=1/0;for(const t of Object.keys(a)){const n=a[t],u=(s=n,((r=e)[0]-s[0])**2+(r[1]-s[1])**2+(r[2]-s[2])**2);u<i&&(i=u,o=t)}var r,s;return o},i.keyword.rgb=function(e){return a[e]},i.rgb.xyz=function(e){let t=e[0]/255,o=e[1]/255,a=e[2]/255;t=t>.04045?((t+.055)/1.055)**2.4:t/12.92,o=o>.04045?((o+.055)/1.055)**2.4:o/12.92,a=a>.04045?((a+.055)/1.055)**2.4:a/12.92;return[100*(.4124*t+.3576*o+.1805*a),100*(.2126*t+.7152*o+.0722*a),100*(.0193*t+.1192*o+.9505*a)]},i.rgb.lab=function(e){const t=i.rgb.xyz(e);let o=t[0],a=t[1],n=t[2];o/=95.047,a/=100,n/=108.883,o=o>.008856?o**(1/3):7.787*o+16/116,a=a>.008856?a**(1/3):7.787*a+16/116,n=n>.008856?n**(1/3):7.787*n+16/116;return[116*a-16,500*(o-a),200*(a-n)]},i.hsl.rgb=function(e){const t=e[0]/360,o=e[1]/100,a=e[2]/100;let n,i,r;if(0===o)return r=255*a,[r,r,r];n=a<.5?a*(1+o):a+o-a*o;const s=2*a-n,u=[0,0,0];for(let e=0;e<3;e++)i=t+1/3*-(e-1),i<0&&i++,i>1&&i--,r=6*i<1?s+6*(n-s)*i:2*i<1?n:3*i<2?s+(n-s)*(2/3-i)*6:s,u[e]=255*r;return u},i.hsl.hsv=function(e){const t=e[0];let o=e[1]/100,a=e[2]/100,n=o;const i=Math.max(a,.01);a*=2,o*=a<=1?a:2-a,n*=i<=1?i:2-i;return[t,100*(0===a?2*n/(i+n):2*o/(a+o)),100*((a+o)/2)]},i.hsv.rgb=function(e){const t=e[0]/60,o=e[1]/100;let a=e[2]/100;const n=Math.floor(t)%6,i=t-Math.floor(t),r=255*a*(1-o),s=255*a*(1-o*i),u=255*a*(1-o*(1-i));switch(a*=255,n){case 0:return[a,u,r];case 1:return[s,a,r];case 2:return[r,a,u];case 3:return[r,s,a];case 4:return[u,r,a];case 5:return[a,r,s]}},i.hsv.hsl=function(e){const t=e[0],o=e[1]/100,a=e[2]/100,n=Math.max(a,.01);let i,r;r=(2-o)*a;const s=(2-o)*n;return i=o*n,i/=s<=1?s:2-s,i=i||0,r/=2,[t,100*i,100*r]},i.hwb.rgb=function(e){const t=e[0]/360;let o=e[1]/100,a=e[2]/100;const n=o+a;let i;n>1&&(o/=n,a/=n);const r=Math.floor(6*t),s=1-a;i=6*t-r,0!=(1&r)&&(i=1-i);const u=o+i*(s-o);let c,l,p;switch(r){default:case 6:case 0:c=s,l=u,p=o;break;case 1:c=u,l=s,p=o;break;case 2:c=o,l=s,p=u;break;case 3:c=o,l=u,p=s;break;case 4:c=u,l=o,p=s;break;case 5:c=s,l=o,p=u}return[255*c,255*l,255*p]},i.cmyk.rgb=function(e){const t=e[0]/100,o=e[1]/100,a=e[2]/100,n=e[3]/100;return[255*(1-Math.min(1,t*(1-n)+n)),255*(1-Math.min(1,o*(1-n)+n)),255*(1-Math.min(1,a*(1-n)+n))]},i.xyz.rgb=function(e){const t=e[0]/100,o=e[1]/100,a=e[2]/100;let n,i,r;return n=3.2406*t+-1.5372*o+-.4986*a,i=-.9689*t+1.8758*o+.0415*a,r=.0557*t+-.204*o+1.057*a,n=n>.0031308?1.055*n**(1/2.4)-.055:12.92*n,i=i>.0031308?1.055*i**(1/2.4)-.055:12.92*i,r=r>.0031308?1.055*r**(1/2.4)-.055:12.92*r,n=Math.min(Math.max(0,n),1),i=Math.min(Math.max(0,i),1),r=Math.min(Math.max(0,r),1),[255*n,255*i,255*r]},i.xyz.lab=function(e){let t=e[0],o=e[1],a=e[2];t/=95.047,o/=100,a/=108.883,t=t>.008856?t**(1/3):7.787*t+16/116,o=o>.008856?o**(1/3):7.787*o+16/116,a=a>.008856?a**(1/3):7.787*a+16/116;return[116*o-16,500*(t-o),200*(o-a)]},i.lab.xyz=function(e){let t,o,a;o=(e[0]+16)/116,t=e[1]/500+o,a=o-e[2]/200;const n=o**3,i=t**3,r=a**3;return o=n>.008856?n:(o-16/116)/7.787,t=i>.008856?i:(t-16/116)/7.787,a=r>.008856?r:(a-16/116)/7.787,t*=95.047,o*=100,a*=108.883,[t,o,a]},i.lab.lch=function(e){const t=e[0],o=e[1],a=e[2];let n;n=360*Math.atan2(a,o)/2/Math.PI,n<0&&(n+=360);return[t,Math.sqrt(o*o+a*a),n]},i.lch.lab=function(e){const t=e[0],o=e[1],a=e[2]/360*2*Math.PI;return[t,o*Math.cos(a),o*Math.sin(a)]},i.rgb.ansi16=function(e,t=null){const[o,a,n]=e;let r=null===t?i.rgb.hsv(e)[2]:t;if(r=Math.round(r/50),0===r)return 30;let s=30+(Math.round(n/255)<<2|Math.round(a/255)<<1|Math.round(o/255));return 2===r&&(s+=60),s},i.hsv.ansi16=function(e){return i.rgb.ansi16(i.hsv.rgb(e),e[2])},i.rgb.ansi256=function(e){const t=e[0],o=e[1],a=e[2];if(t===o&&o===a)return t<8?16:t>248?231:Math.round((t-8)/247*24)+232;return 16+36*Math.round(t/255*5)+6*Math.round(o/255*5)+Math.round(a/255*5)},i.ansi16.rgb=function(e){let t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),t=t/10.5*255,[t,t,t];const o=.5*(1+~~(e>50));return[(1&t)*o*255,(t>>1&1)*o*255,(t>>2&1)*o*255]},i.ansi256.rgb=function(e){if(e>=232){const t=10*(e-232)+8;return[t,t,t]}let t;e-=16;return[Math.floor(e/36)/5*255,Math.floor((t=e%36)/6)/5*255,t%6/5*255]},i.rgb.hex=function(e){const t=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(t.length)+t},i.hex.rgb=function(e){const t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];let o=t[0];3===t[0].length&&(o=o.split("").map((e=>e+e)).join(""));const a=parseInt(o,16);return[a>>16&255,a>>8&255,255&a]},i.rgb.hcg=function(e){const t=e[0]/255,o=e[1]/255,a=e[2]/255,n=Math.max(Math.max(t,o),a),i=Math.min(Math.min(t,o),a),r=n-i;let s,u;return s=r<1?i/(1-r):0,u=r<=0?0:n===t?(o-a)/r%6:n===o?2+(a-t)/r:4+(t-o)/r,u/=6,u%=1,[360*u,100*r,100*s]},i.hsl.hcg=function(e){const t=e[1]/100,o=e[2]/100,a=o<.5?2*t*o:2*t*(1-o);let n=0;return a<1&&(n=(o-.5*a)/(1-a)),[e[0],100*a,100*n]},i.hsv.hcg=function(e){const t=e[1]/100,o=e[2]/100,a=t*o;let n=0;return a<1&&(n=(o-a)/(1-a)),[e[0],100*a,100*n]},i.hcg.rgb=function(e){const t=e[0]/360,o=e[1]/100,a=e[2]/100;if(0===o)return[255*a,255*a,255*a];const n=[0,0,0],i=t%1*6,r=i%1,s=1-r;let u=0;switch(Math.floor(i)){case 0:n[0]=1,n[1]=r,n[2]=0;break;case 1:n[0]=s,n[1]=1,n[2]=0;break;case 2:n[0]=0,n[1]=1,n[2]=r;break;case 3:n[0]=0,n[1]=s,n[2]=1;break;case 4:n[0]=r,n[1]=0,n[2]=1;break;default:n[0]=1,n[1]=0,n[2]=s}return u=(1-o)*a,[255*(o*n[0]+u),255*(o*n[1]+u),255*(o*n[2]+u)]},i.hcg.hsv=function(e){const t=e[1]/100,o=t+e[2]/100*(1-t);let a=0;return o>0&&(a=t/o),[e[0],100*a,100*o]},i.hcg.hsl=function(e){const t=e[1]/100,o=e[2]/100*(1-t)+.5*t;let a=0;return o>0&&o<.5?a=t/(2*o):o>=.5&&o<1&&(a=t/(2*(1-o))),[e[0],100*a,100*o]},i.hcg.hwb=function(e){const t=e[1]/100,o=t+e[2]/100*(1-t);return[e[0],100*(o-t),100*(1-o)]},i.hwb.hcg=function(e){const t=e[1]/100,o=1-e[2]/100,a=o-t;let n=0;return a<1&&(n=(o-a)/(1-a)),[e[0],100*a,100*n]},i.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},i.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},i.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},i.gray.hsl=function(e){return[0,0,e[0]]},i.gray.hsv=i.gray.hsl,i.gray.hwb=function(e){return[0,100,e[0]]},i.gray.cmyk=function(e){return[0,0,0,e[0]]},i.gray.lab=function(e){return[e[0],0,0]},i.gray.hex=function(e){const t=255&Math.round(e[0]/100*255),o=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(o.length)+o},i.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}},2085:(e,t,o)=>{const a=o(8168),n=o(4111),i={};Object.keys(a).forEach((e=>{i[e]={},Object.defineProperty(i[e],"channels",{value:a[e].channels}),Object.defineProperty(i[e],"labels",{value:a[e].labels});const t=n(e);Object.keys(t).forEach((o=>{const a=t[o];i[e][o]=function(e){const t=function(...t){const o=t[0];if(null==o)return o;o.length>1&&(t=o);const a=e(t);if("object"==typeof a)for(let e=a.length,t=0;t<e;t++)a[t]=Math.round(a[t]);return a};return"conversion"in e&&(t.conversion=e.conversion),t}(a),i[e][o].raw=function(e){const t=function(...t){const o=t[0];return null==o?o:(o.length>1&&(t=o),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}(a)}))})),e.exports=i},4111:(e,t,o)=>{const a=o(8168);function n(e){const t=function(){const e={},t=Object.keys(a);for(let o=t.length,a=0;a<o;a++)e[t[a]]={distance:-1,parent:null};return e}(),o=[e];for(t[e].distance=0;o.length;){const e=o.pop(),n=Object.keys(a[e]);for(let a=n.length,i=0;i<a;i++){const a=n[i],r=t[a];-1===r.distance&&(r.distance=t[e].distance+1,r.parent=e,o.unshift(a))}}return t}function i(e,t){return function(o){return t(e(o))}}function r(e,t){const o=[t[e].parent,e];let n=a[t[e].parent][e],r=t[e].parent;for(;t[r].parent;)o.unshift(t[r].parent),n=i(a[t[r].parent][r],n),r=t[r].parent;return n.conversion=o,n}e.exports=function(e){const t=n(e),o={},a=Object.keys(t);for(let e=a.length,n=0;n<e;n++){const e=a[n];null!==t[e].parent&&(o[e]=r(e,t))}return o}},8874:e=>{"use strict";e.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},2517:(e,t,o)=>{var a={};e.exports=a,a.themes={};var n=a.styles=o(5784),i=Object.defineProperties;a.supportsColor=o(6561),void 0===a.enabled&&(a.enabled=a.supportsColor),a.stripColors=a.strip=function(e){return(""+e).replace(/\x1B\[\d+m/g,"")};a.stylize=function(e,t){return n[t].open+e+n[t].close};var r=/[|\\{}()[\]^$+*?.]/g;function s(e){var t=function e(){return p.apply(e,arguments)};return t._styles=e,t.__proto__=l,t}var u,c=(u={},n.grey=n.gray,Object.keys(n).forEach((function(e){n[e].closeRe=new RegExp(function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(r,"\\$&")}(n[e].close),"g"),u[e]={get:function(){return s(this._styles.concat(e))}}})),u),l=i((function(){}),c);function p(){var e=arguments,t=e.length,o=0!==t&&String(arguments[0]);if(t>1)for(var i=1;i<t;i++)o+=" "+e[i];if(!a.enabled||!o)return o;for(var r=this._styles,s=r.length;s--;){var u=n[r[s]];o=u.open+o.replace(u.closeRe,u.open)+u.close}return o}function m(e){for(var t in e)!function(t){a[t]=function(o){return a[e[t]](o)}}(t)}a.setTheme=function(e){if("string"==typeof e)try{return a.themes[e]=o(5756)(e),m(a.themes[e]),a.themes[e]}catch(e){return console.log(e),e}else m(e)};var h=function(e,t){var o=t.split("");return(o=o.map(e)).join("")};for(var d in a.trap=o(5117),a.zalgo=o(1492),a.maps={},a.maps.america=o(6260),a.maps.zebra=o(3270),a.maps.rainbow=o(5920),a.maps.random=o(2449),a.maps)!function(e){a[e]=function(t){return h(a.maps[e],t)}}(d);i(a,function(){var e={};return Object.keys(c).forEach((function(t){e[t]={get:function(){return s([t])}}})),e}())},5117:e=>{e.exports=function(e,t){var o="";e=(e=e||"Run the trap, drop the bass").split("");var a={a:["@","Ą","Ⱥ","Ʌ","Δ","Λ","Д"],b:["ß","Ɓ","Ƀ","ɮ","β","฿"],c:["©","Ȼ","Ͼ"],d:["Ð","Ɗ","Ԁ","ԁ","Ԃ","ԃ"],e:["Ë","ĕ","Ǝ","ɘ","Σ","ξ","Ҽ","੬"],f:["Ӻ"],g:["ɢ"],h:["Ħ","ƕ","Ң","Һ","Ӈ","Ԋ"],i:["༏"],j:["Ĵ"],k:["ĸ","Ҡ","Ӄ","Ԟ"],l:["Ĺ"],m:["ʍ","Ӎ","ӎ","Ԡ","ԡ","൩"],n:["Ñ","ŋ","Ɲ","Ͷ","Π","Ҋ"],o:["Ø","õ","ø","Ǿ","ʘ","Ѻ","ם","۝","๏"],p:["Ƿ","Ҏ"],q:["্"],r:["®","Ʀ","Ȑ","Ɍ","ʀ","Я"],s:["§","Ϟ","ϟ","Ϩ"],t:["Ł","Ŧ","ͳ"],u:["Ʊ","Ս"],v:["ט"],w:["Ш","Ѡ","Ѽ","൰"],x:["Ҳ","Ӿ","Ӽ","ӽ"],y:["¥","Ұ","Ӌ"],z:["Ƶ","ɀ"]};return e.forEach((function(e){e=e.toLowerCase();var t=a[e]||[" "],n=Math.floor(Math.random()*t.length);o+=void 0!==a[e]?a[e][n]:e})),o}},1492:e=>{e.exports=function(e,t){e=e||"   he is here   ";var o={up:["̍","̎","̄","̅","̿","̑","̆","̐","͒","͗","͑","̇","̈","̊","͂","̓","̈","͊","͋","͌","̃","̂","̌","͐","̀","́","̋","̏","̒","̓","̔","̽","̉","ͣ","ͤ","ͥ","ͦ","ͧ","ͨ","ͩ","ͪ","ͫ","ͬ","ͭ","ͮ","ͯ","̾","͛","͆","̚"],down:["̖","̗","̘","̙","̜","̝","̞","̟","̠","̤","̥","̦","̩","̪","̫","̬","̭","̮","̯","̰","̱","̲","̳","̹","̺","̻","̼","ͅ","͇","͈","͉","͍","͎","͓","͔","͕","͖","͙","͚","̣"],mid:["̕","̛","̀","́","͘","̡","̢","̧","̨","̴","̵","̶","͜","͝","͞","͟","͠","͢","̸","̷","͡"," ҉"]},a=[].concat(o.up,o.down,o.mid);function n(e){return Math.floor(Math.random()*e)}function i(e){var t=!1;return a.filter((function(o){t=o===e})),t}return function(e,t){var a,r,s="";for(r in(t=t||{}).up=t.up||!0,t.mid=t.mid||!0,t.down=t.down||!0,t.size=t.size||"maxi",e=e.split(""))if(!i(r)){switch(s+=e[r],a={up:0,down:0,mid:0},t.size){case"mini":a.up=n(8),a.min=n(2),a.down=n(8);break;case"maxi":a.up=n(16)+3,a.min=n(4)+1,a.down=n(64)+3;break;default:a.up=n(8)+1,a.mid=n(6)/2,a.down=n(8)+1}var u=["up","mid","down"];for(var c in u)for(var l=u[c],p=0;p<=a[l];p++)t[l]&&(s+=o[l][n(o[l].length)])}return s}(e)}},6260:(e,t,o)=>{var a=o(2517);e.exports=function(e,t,o){if(" "===e)return e;switch(t%3){case 0:return a.red(e);case 1:return a.white(e);case 2:return a.blue(e)}}},5920:(e,t,o)=>{var a,n=o(2517);e.exports=(a=["red","yellow","green","blue","magenta"],function(e,t,o){return" "===e?e:n[a[t++%a.length]](e)})},2449:(e,t,o)=>{var a,n=o(2517);e.exports=(a=["underline","inverse","grey","yellow","red","green","blue","white","cyan","magenta"],function(e,t,o){return" "===e?e:n[a[Math.round(Math.random()*(a.length-1))]](e)})},3270:(e,t,o)=>{var a=o(2517);e.exports=function(e,t,o){return t%2==0?e:a.inverse(e)}},5784:e=>{var t={};e.exports=t;var o={reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29],black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],grey:[90,39],bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],blackBG:[40,49],redBG:[41,49],greenBG:[42,49],yellowBG:[43,49],blueBG:[44,49],magentaBG:[45,49],cyanBG:[46,49],whiteBG:[47,49]};Object.keys(o).forEach((function(e){var a=o[e],n=t[e]=[];n.open="["+a[0]+"m",n.close="["+a[1]+"m"}))},6561:(e,t,o)=>{var a=o(4155),n=a.argv;e.exports=-1===n.indexOf("--no-color")&&-1===n.indexOf("--color=false")&&(-1!==n.indexOf("--color")||-1!==n.indexOf("--color=true")||-1!==n.indexOf("--color=always")||!(a.stdout&&!a.stdout.isTTY)&&("win32"===a.platform||"COLORTERM"in a.env||"dumb"!==a.env.TERM&&!!/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(a.env.TERM)))},5756:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=5756,e.exports=t},4431:(e,t,o)=>{var a=o(2517);e.exports=a},4652:function(e){e.exports=function(){"use strict";function e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function t(e,t){for(var o=0;o<t.length;o++){var a=t[o];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function o(e,o,a){return o&&t(e.prototype,o),a&&t(e,a),e}function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function n(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?n(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):n(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function r(e){return function(e){if(Array.isArray(e))return u(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||s(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){if(e){if("string"==typeof e)return u(e,t);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?u(e,t):void 0}}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var o=0,a=new Array(t);o<t;o++)a[o]=e[o];return a}function c(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=s(e))){var t=0,o=function(){};return{s:o,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,n,i=!0,r=!1;return{s:function(){a=e[Symbol.iterator]()},n:function(){var e=a.next();return i=e.done,e},e:function(e){r=!0,n=e},f:function(){try{i||null==a.return||a.return()}finally{if(r)throw n}}}}var l={};l[l.Fatal=0]="Fatal",l[l.Error=0]="Error",l[l.Warn=1]="Warn",l[l.Log=2]="Log",l[l.Info=3]="Info",l[l.Success=3]="Success",l[l.Debug=4]="Debug",l[l.Trace=5]="Trace",l[l.Silent=-1/0]="Silent",l[l.Verbose=1/0]="Verbose";var p={silent:{level:-1},fatal:{level:l.Fatal},error:{level:l.Error},warn:{level:l.Warn},log:{level:l.Log},info:{level:l.Info},success:{level:l.Success},debug:{level:l.Debug},trace:{level:l.Trace},verbose:{level:l.Trace},ready:{level:l.Info},start:{level:l.Info}};function m(e){return t=e,!("[object Object]"!==Object.prototype.toString.call(t)||!e.message&&!e.args||e.stack);var t}var h=!1,d=[],f=function(){function t(){var o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};for(var a in e(this,t),this._reporters=o.reporters||[],this._types=o.types||p,this.level=void 0!==o.level?o.level:3,this._defaults=o.defaults||{},this._async=void 0!==o.async?o.async:void 0,this._stdout=o.stdout,this._stderr=o.stderr,this._mockFn=o.mockFn,this._throttle=o.throttle||1e3,this._throttleMin=o.throttleMin||5,this._types){var n=i(i({type:a},this._types[a]),this._defaults);this[a]=this._wrapLogFn(n),this[a].raw=this._wrapLogFn(n,!0)}this._mockFn&&this.mockTypes(),this._lastLogSerialized=void 0,this._lastLog=void 0,this._lastLogTime=void 0,this._lastLogCount=0,this._throttleTimeout=void 0}return o(t,[{key:"create",value:function(e){return new t(Object.assign({reporters:this._reporters,level:this.level,types:this._types,defaults:this._defaults,stdout:this._stdout,stderr:this._stderr,mockFn:this._mockFn},e))}},{key:"withDefaults",value:function(e){return this.create({defaults:Object.assign({},this._defaults,e)})}},{key:"withTag",value:function(e){return this.withDefaults({tag:this._defaults.tag?this._defaults.tag+":"+e:e})}},{key:"addReporter",value:function(e){return this._reporters.push(e),this}},{key:"removeReporter",value:function(e){if(e){var t=this._reporters.indexOf(e);if(t>=0)return this._reporters.splice(t,1)}else this._reporters.splice(0);return this}},{key:"setReporters",value:function(e){return this._reporters=Array.isArray(e)?e:[e],this}},{key:"wrapAll",value:function(){this.wrapConsole(),this.wrapStd()}},{key:"restoreAll",value:function(){this.restoreConsole(),this.restoreStd()}},{key:"wrapConsole",value:function(){for(var e in this._types)console["__"+e]||(console["__"+e]=console[e]),console[e]=this[e].raw}},{key:"restoreConsole",value:function(){for(var e in this._types)console["__"+e]&&(console[e]=console["__"+e],delete console["__"+e])}},{key:"wrapStd",value:function(){this._wrapStream(this.stdout,"log"),this._wrapStream(this.stderr,"log")}},{key:"_wrapStream",value:function(e,t){var o=this;e&&(e.__write||(e.__write=e.write),e.write=function(e){o[t].raw(String(e).trim())})}},{key:"restoreStd",value:function(){this._restoreStream(this.stdout),this._restoreStream(this.stderr)}},{key:"_restoreStream",value:function(e){e&&e.__write&&(e.write=e.__write,delete e.__write)}},{key:"pauseLogs",value:function(){h=!0}},{key:"resumeLogs",value:function(){h=!1;var e,t=c(d.splice(0));try{for(t.s();!(e=t.n()).done;){var o=e.value;o[0]._logFn(o[1],o[2])}}catch(e){t.e(e)}finally{t.f()}}},{key:"mockTypes",value:function(e){if(this._mockFn=e||this._mockFn,"function"==typeof this._mockFn)for(var t in this._types)this[t]=this._mockFn(t,this._types[t])||this[t],this[t].raw=this[t]}},{key:"_wrapLogFn",value:function(e,t){var o=this;return function(){for(var a=arguments.length,n=new Array(a),i=0;i<a;i++)n[i]=arguments[i];if(!h)return o._logFn(e,n,t);d.push([o,e,n,t])}}},{key:"_logFn",value:function(e,t,o){var a=this;if(e.level>this.level)return!!this._async&&Promise.resolve(!1);var n=Object.assign({date:new Date,args:[]},e);!o&&1===t.length&&m(t[0])?Object.assign(n,t[0]):n.args=Array.from(t),n.message&&(n.args.unshift(n.message),delete n.message),n.additional&&(Array.isArray(n.additional)||(n.additional=n.additional.split("\n")),n.args.push("\n"+n.additional.join("\n")),delete n.additional),n.type="string"==typeof n.type?n.type.toLowerCase():"",n.tag="string"==typeof n.tag?n.tag.toLowerCase():"";var s=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=a._lastLogCount-a._throttleMin;if(a._lastLog&&t>0){var o=r(a._lastLog.args);t>1&&o.push("(repeated ".concat(t," times)")),a._log(i(i({},a._lastLog),{},{args:o})),a._lastLogCount=1}if(e){if(a._lastLog=n,a._async)return a._logAsync(n);a._log(n)}};clearTimeout(this._throttleTimeout);var u=this._lastLogTime?n.date-this._lastLogTime:0;if(this._lastLogTime=n.date,u<this._throttle)try{var c=JSON.stringify([n.type,n.tag,n.args]),l=this._lastLogSerialized===c;if(this._lastLogSerialized=c,l&&(this._lastLogCount++,this._lastLogCount>this._throttleMin))return void(this._throttleTimeout=setTimeout(s,this._throttle))}catch(e){}s(!0)}},{key:"_log",value:function(e){var t,o=c(this._reporters);try{for(o.s();!(t=o.n()).done;)t.value.log(e,{async:!1,stdout:this.stdout,stderr:this.stderr})}catch(e){o.e(e)}finally{o.f()}}},{key:"_logAsync",value:function(e){var t=this;return Promise.all(this._reporters.map((function(o){return o.log(e,{async:!0,stdout:t.stdout,stderr:t.stderr})})))}},{key:"stdout",get:function(){return this._stdout||console._stdout}},{key:"stderr",get:function(){return this._stderr||console._stderr}}]),t}();f.prototype.add=f.prototype.addReporter,f.prototype.remove=f.prototype.removeReporter,f.prototype.clear=f.prototype.removeReporter,f.prototype.withScope=f.prototype.withTag,f.prototype.mock=f.prototype.mockTypes,f.prototype.pause=f.prototype.pauseLogs,f.prototype.resume=f.prototype.resumeLogs;var g,v=function(){function t(o){e(this,t),this.options=Object.assign({},o),this.defaultColor="#7f8c8d",this.levelColorMap={0:"#c0392b",1:"#f39c12",3:"#00BCD4"},this.typeColorMap={success:"#2ecc71"}}return o(t,[{key:"log",value:function(e){var t=e.level<1?console.__error||console.error:1===e.level&&console.warn?console.__warn||console.warn:console.__log||console.log,o="log"!==e.type?e.type:"",a=e.tag?e.tag:"",n=this.typeColorMap[e.type]||this.levelColorMap[e.level]||this.defaultColor,i="\n      background: ".concat(n,";\n      border-radius: 0.5em;\n      color: white;\n      font-weight: bold;\n      padding: 2px 0.5em;\n    "),s="%c".concat([a,o].filter(Boolean).join(":"));"string"==typeof e.args[0]?t.apply(void 0,["".concat(s,"%c ").concat(e.args[0]),i,""].concat(r(e.args.slice(1)))):t.apply(void 0,[s,i].concat(r(e.args)))}}]),t}();return"undefined"!=typeof window&&window.consola||((g=new f({reporters:[new v]})).Consola=f,g.LogLevel=l,g.BrowserReporter=v,g)}()},6230:e=>{e.exports="object"==typeof self?self.FormData:window.FormData},9146:e=>{"use strict";function t(){this._types=Object.create(null),this._extensions=Object.create(null);for(let e=0;e<arguments.length;e++)this.define(arguments[e]);this.define=this.define.bind(this),this.getType=this.getType.bind(this),this.getExtension=this.getExtension.bind(this)}t.prototype.define=function(e,t){for(let o in e){let a=e[o].map((function(e){return e.toLowerCase()}));o=o.toLowerCase();for(let e=0;e<a.length;e++){const n=a[e];if("*"!==n[0]){if(!t&&n in this._types)throw new Error('Attempt to change mapping for "'+n+'" extension from "'+this._types[n]+'" to "'+o+'". Pass `force=true` to allow this, otherwise remove "'+n+'" from the list of extensions for "'+o+'".');this._types[n]=o}}if(t||!this._extensions[o]){const e=a[0];this._extensions[o]="*"!==e[0]?e:e.substr(1)}}},t.prototype.getType=function(e){let t=(e=String(e)).replace(/^.*[/\\]/,"").toLowerCase(),o=t.replace(/^.*\./,"").toLowerCase(),a=t.length<e.length;return(o.length<t.length-1||!a)&&this._types[o]||null},t.prototype.getExtension=function(e){return(e=/^\s*([^;\s]*)/.test(e)&&RegExp.$1)&&this._extensions[e.toLowerCase()]||null},e.exports=t},3893:(e,t,o)=>{"use strict";let a=o(9146);e.exports=new a(o(4415),o(3014))},3014:e=>{e.exports={"application/prs.cww":["cww"],"application/vnd.1000minds.decision-model+xml":["1km"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.keynote":["key"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.apple.numbers":["numbers"],"application/vnd.apple.pages":["pages"],"application/vnd.apple.pkpass":["pkpass"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.balsamiq.bmml+xml":["bmml"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.citationstyles.style+xml":["csl"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dbf":["dbf"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-apps.document":["gdoc"],"application/vnd.google-apps.presentation":["gslides"],"application/vnd.google-apps.spreadsheet":["gsheet"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.hydrostatix.sof-data":["sfd-hdstx"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-outlook":["msg"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["*stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.ac+xml":["*ac"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.n-gage.symbian.install":["n-gage"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openblox.game+xml":["obgx"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openstreetmap.data+xml":["osm"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.rar":["rar"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.software602.filler.form+xml":["fo"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.wadl+xml":["wadl"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.syncml.dmddf+xml":["ddf"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":["*dmg"],"application/x-arj":["arj"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bdoc":["*bdoc"],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-cocoa":["cco"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["*deb","udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-httpd-php":["php"],"application/x-install-instructions":["install"],"application/x-iso9660-image":["*iso"],"application/x-java-archive-diff":["jardiff"],"application/x-java-jnlp-file":["jnlp"],"application/x-keepass2":["kdbx"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-makeself":["run"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdos-program":["*exe"],"application/x-msdownload":["*exe","*dll","com","bat","*msi"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["*wmf","*wmz","*emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-ns-proxy-autoconfig":["pac"],"application/x-nzb":["nzb"],"application/x-perl":["pl","pm"],"application/x-pilot":["*prc","*pdb"],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["*rar"],"application/x-redhat-package-manager":["rpm"],"application/x-research-info-systems":["ris"],"application/x-sea":["sea"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl","tk"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["*obj"],"application/x-ustar":["ustar"],"application/x-virtualbox-hdd":["hdd"],"application/x-virtualbox-ova":["ova"],"application/x-virtualbox-ovf":["ovf"],"application/x-virtualbox-vbox":["vbox"],"application/x-virtualbox-vbox-extpack":["vbox-extpack"],"application/x-virtualbox-vdi":["vdi"],"application/x-virtualbox-vhd":["vhd"],"application/x-virtualbox-vmdk":["vmdk"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt","pem"],"application/x-xfig":["fig"],"application/x-xliff+xml":["*xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-m4a":["*m4a"],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-realaudio":["*ra"],"audio/x-wav":["*wav"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"image/prs.btif":["btif"],"image/prs.pti":["pti"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.airzip.accelerator.azv":["azv"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":["*sub"],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.microsoft.icon":["ico"],"image/vnd.ms-dds":["dds"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.pco.b16":["b16"],"image/vnd.tencent.tap":["tap"],"image/vnd.valve.source.texture":["vtf"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/vnd.zbrush.pcx":["pcx"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["*ico"],"image/x-jng":["jng"],"image/x-mrsid-image":["sid"],"image/x-ms-bmp":["*bmp"],"image/x-pcx":["*pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/vnd.wfa.wsc":["wsc"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.opengex":["ogex"],"model/vnd.parasolid.transmit.binary":["x_b"],"model/vnd.parasolid.transmit.text":["x_t"],"model/vnd.usdz+zip":["usdz"],"model/vnd.valve.source.compiled-map":["bsp"],"model/vnd.vtu":["vtu"],"text/prs.lines.tag":["dsc"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-org":["*org"],"text/x-pascal":["p","pas"],"text/x-processing":["pde"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-suse-ymp":["ymp"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]}},4415:e=>{e.exports={"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomdeleted+xml":["atomdeleted"],"application/atomsvc+xml":["atomsvc"],"application/atsc-dwd+xml":["dwd"],"application/atsc-held+xml":["held"],"application/atsc-rsat+xml":["rsat"],"application/bdoc":["bdoc"],"application/calendar+xml":["xcs"],"application/ccxml+xml":["ccxml"],"application/cdfx+xml":["cdfx"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["ecma","es"],"application/emma+xml":["emma"],"application/emotionml+xml":["emotionml"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/fdt+xml":["fdt"],"application/font-tdpfr":["pfr"],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hjson":["hjson"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/its+xml":["its"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lgr+xml":["lgr"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mmt-aei+xml":["maei"],"application/mmt-usd+xml":["musd"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/mrb-consumer+xml":["*xdf"],"application/mrb-publish+xml":["*xdf"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/n-quads":["nq"],"application/n-triples":["nt"],"application/node":["cjs"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/p2p-overlay+xml":["relo"],"application/patch-ops-error+xml":["*xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/provenance+xml":["provx"],"application/pskc+xml":["pskcxml"],"application/raml+yaml":["raml"],"application/rdf+xml":["rdf","owl"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/route-apd+xml":["rapd"],"application/route-s-tsid+xml":["sls"],"application/route-usd+xml":["rusd"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/senml+xml":["senmlx"],"application/sensml+xml":["sensmlx"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/sieve":["siv","sieve"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/swid+xml":["swidtag"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/toml":["toml"],"application/ttml+xml":["ttml"],"application/ubjson":["ubj"],"application/urc-ressheet+xml":["rsheet"],"application/urc-targetdesc+xml":["td"],"application/voicexml+xml":["vxml"],"application/wasm":["wasm"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/xaml+xml":["xaml"],"application/xcap-att+xml":["xav"],"application/xcap-caps+xml":["xca"],"application/xcap-diff+xml":["xdf"],"application/xcap-el+xml":["xel"],"application/xcap-error+xml":["xer"],"application/xcap-ns+xml":["xns"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xliff+xml":["xlf"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["*xsl","xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":["*3gpp"],"audio/adpcm":["adp"],"audio/amr":["amr"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mobile-xmf":["mxmf"],"audio/mp3":["*mp3"],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx","opus"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/wav":["wav"],"audio/wave":["*wav"],"audio/webm":["weba"],"audio/xm":["xm"],"font/collection":["ttc"],"font/otf":["otf"],"font/ttf":["ttf"],"font/woff":["woff"],"font/woff2":["woff2"],"image/aces":["exr"],"image/apng":["apng"],"image/avif":["avif"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/dicom-rle":["drle"],"image/emf":["emf"],"image/fits":["fits"],"image/g3fax":["g3"],"image/gif":["gif"],"image/heic":["heic"],"image/heic-sequence":["heics"],"image/heif":["heif"],"image/heif-sequence":["heifs"],"image/hej2k":["hej2"],"image/hsj2":["hsj2"],"image/ief":["ief"],"image/jls":["jls"],"image/jp2":["jp2","jpg2"],"image/jpeg":["jpeg","jpg","jpe"],"image/jph":["jph"],"image/jphc":["jhc"],"image/jpm":["jpm"],"image/jpx":["jpx","jpf"],"image/jxr":["jxr"],"image/jxra":["jxra"],"image/jxrs":["jxrs"],"image/jxs":["jxs"],"image/jxsc":["jxsc"],"image/jxsi":["jxsi"],"image/jxss":["jxss"],"image/ktx":["ktx"],"image/ktx2":["ktx2"],"image/png":["png"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/t38":["t38"],"image/tiff":["tif","tiff"],"image/tiff-fx":["tfx"],"image/webp":["webp"],"image/wmf":["wmf"],"message/disposition-notification":["disposition-notification"],"message/global":["u8msg"],"message/global-delivery-status":["u8dsn"],"message/global-disposition-notification":["u8mdn"],"message/global-headers":["u8hdr"],"message/rfc822":["eml","mime"],"model/3mf":["3mf"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/mtl":["mtl"],"model/obj":["obj"],"model/stl":["stl"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["*x3db","x3dbz"],"model/x3d+fastinfoset":["x3db"],"model/x3d+vrml":["*x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"model/x3d-vrml":["x3dv"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/mdx":["mdx"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/richtext":["rtx"],"text/rtf":["*rtf"],"text/sgml":["sgml","sgm"],"text/shex":["shex"],"text/slim":["slim","slm"],"text/spdx":["spdx"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vtt":["vtt"],"text/xml":["*xml"],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/iso.segment":["m4s"],"video/jpeg":["jpgv"],"video/jpm":["*jpm","jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/webm":["webm"]}},4155:e=>{var t,o,a=e.exports={};function n(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function r(e){if(t===setTimeout)return setTimeout(e,0);if((t===n||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(o){try{return t.call(null,e,0)}catch(o){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:n}catch(e){t=n}try{o="function"==typeof clearTimeout?clearTimeout:i}catch(e){o=i}}();var s,u=[],c=!1,l=-1;function p(){c&&s&&(c=!1,s.length?u=s.concat(u):l=-1,u.length&&m())}function m(){if(!c){var e=r(p);c=!0;for(var t=u.length;t;){for(s=u,u=[];++l<t;)s&&s[l].run();l=-1,t=u.length}s=null,c=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===i||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function d(){}a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var o=1;o<arguments.length;o++)t[o-1]=arguments[o];u.push(new h(e,t)),1!==u.length||c||r(m)},h.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=d,a.addListener=d,a.once=d,a.off=d,a.removeListener=d,a.removeAllListeners=d,a.emit=d,a.prependListener=d,a.prependOnceListener=d,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},2156:e=>{"use strict";e.exports=JSON.parse('["ac","com.ac","edu.ac","gov.ac","net.ac","mil.ac","org.ac","ad","nom.ad","ae","co.ae","net.ae","org.ae","sch.ae","ac.ae","gov.ae","mil.ae","aero","accident-investigation.aero","accident-prevention.aero","aerobatic.aero","aeroclub.aero","aerodrome.aero","agents.aero","aircraft.aero","airline.aero","airport.aero","air-surveillance.aero","airtraffic.aero","air-traffic-control.aero","ambulance.aero","amusement.aero","association.aero","author.aero","ballooning.aero","broker.aero","caa.aero","cargo.aero","catering.aero","certification.aero","championship.aero","charter.aero","civilaviation.aero","club.aero","conference.aero","consultant.aero","consulting.aero","control.aero","council.aero","crew.aero","design.aero","dgca.aero","educator.aero","emergency.aero","engine.aero","engineer.aero","entertainment.aero","equipment.aero","exchange.aero","express.aero","federation.aero","flight.aero","freight.aero","fuel.aero","gliding.aero","government.aero","groundhandling.aero","group.aero","hanggliding.aero","homebuilt.aero","insurance.aero","journal.aero","journalist.aero","leasing.aero","logistics.aero","magazine.aero","maintenance.aero","media.aero","microlight.aero","modelling.aero","navigation.aero","parachuting.aero","paragliding.aero","passenger-association.aero","pilot.aero","press.aero","production.aero","recreation.aero","repbody.aero","res.aero","research.aero","rotorcraft.aero","safety.aero","scientist.aero","services.aero","show.aero","skydiving.aero","software.aero","student.aero","trader.aero","trading.aero","trainer.aero","union.aero","workinggroup.aero","works.aero","af","gov.af","com.af","org.af","net.af","edu.af","ag","com.ag","org.ag","net.ag","co.ag","nom.ag","ai","off.ai","com.ai","net.ai","org.ai","al","com.al","edu.al","gov.al","mil.al","net.al","org.al","am","co.am","com.am","commune.am","net.am","org.am","ao","ed.ao","gv.ao","og.ao","co.ao","pb.ao","it.ao","aq","ar","com.ar","edu.ar","gob.ar","gov.ar","int.ar","mil.ar","musica.ar","net.ar","org.ar","tur.ar","arpa","e164.arpa","in-addr.arpa","ip6.arpa","iris.arpa","uri.arpa","urn.arpa","as","gov.as","asia","at","ac.at","co.at","gv.at","or.at","au","com.au","net.au","org.au","edu.au","gov.au","asn.au","id.au","info.au","conf.au","oz.au","act.au","nsw.au","nt.au","qld.au","sa.au","tas.au","vic.au","wa.au","act.edu.au","catholic.edu.au","nsw.edu.au","nt.edu.au","qld.edu.au","sa.edu.au","tas.edu.au","vic.edu.au","wa.edu.au","qld.gov.au","sa.gov.au","tas.gov.au","vic.gov.au","wa.gov.au","education.tas.edu.au","schools.nsw.edu.au","aw","com.aw","ax","az","com.az","net.az","int.az","gov.az","org.az","edu.az","info.az","pp.az","mil.az","name.az","pro.az","biz.az","ba","com.ba","edu.ba","gov.ba","mil.ba","net.ba","org.ba","bb","biz.bb","co.bb","com.bb","edu.bb","gov.bb","info.bb","net.bb","org.bb","store.bb","tv.bb","*.bd","be","ac.be","bf","gov.bf","bg","a.bg","b.bg","c.bg","d.bg","e.bg","f.bg","g.bg","h.bg","i.bg","j.bg","k.bg","l.bg","m.bg","n.bg","o.bg","p.bg","q.bg","r.bg","s.bg","t.bg","u.bg","v.bg","w.bg","x.bg","y.bg","z.bg","0.bg","1.bg","2.bg","3.bg","4.bg","5.bg","6.bg","7.bg","8.bg","9.bg","bh","com.bh","edu.bh","net.bh","org.bh","gov.bh","bi","co.bi","com.bi","edu.bi","or.bi","org.bi","biz","bj","asso.bj","barreau.bj","gouv.bj","bm","com.bm","edu.bm","gov.bm","net.bm","org.bm","bn","com.bn","edu.bn","gov.bn","net.bn","org.bn","bo","com.bo","edu.bo","gob.bo","int.bo","org.bo","net.bo","mil.bo","tv.bo","web.bo","academia.bo","agro.bo","arte.bo","blog.bo","bolivia.bo","ciencia.bo","cooperativa.bo","democracia.bo","deporte.bo","ecologia.bo","economia.bo","empresa.bo","indigena.bo","industria.bo","info.bo","medicina.bo","movimiento.bo","musica.bo","natural.bo","nombre.bo","noticias.bo","patria.bo","politica.bo","profesional.bo","plurinacional.bo","pueblo.bo","revista.bo","salud.bo","tecnologia.bo","tksat.bo","transporte.bo","wiki.bo","br","9guacu.br","abc.br","adm.br","adv.br","agr.br","aju.br","am.br","anani.br","aparecida.br","arq.br","art.br","ato.br","b.br","barueri.br","belem.br","bhz.br","bio.br","blog.br","bmd.br","boavista.br","bsb.br","campinagrande.br","campinas.br","caxias.br","cim.br","cng.br","cnt.br","com.br","contagem.br","coop.br","cri.br","cuiaba.br","curitiba.br","def.br","ecn.br","eco.br","edu.br","emp.br","eng.br","esp.br","etc.br","eti.br","far.br","feira.br","flog.br","floripa.br","fm.br","fnd.br","fortal.br","fot.br","foz.br","fst.br","g12.br","ggf.br","goiania.br","gov.br","ac.gov.br","al.gov.br","am.gov.br","ap.gov.br","ba.gov.br","ce.gov.br","df.gov.br","es.gov.br","go.gov.br","ma.gov.br","mg.gov.br","ms.gov.br","mt.gov.br","pa.gov.br","pb.gov.br","pe.gov.br","pi.gov.br","pr.gov.br","rj.gov.br","rn.gov.br","ro.gov.br","rr.gov.br","rs.gov.br","sc.gov.br","se.gov.br","sp.gov.br","to.gov.br","gru.br","imb.br","ind.br","inf.br","jab.br","jampa.br","jdf.br","joinville.br","jor.br","jus.br","leg.br","lel.br","londrina.br","macapa.br","maceio.br","manaus.br","maringa.br","mat.br","med.br","mil.br","morena.br","mp.br","mus.br","natal.br","net.br","niteroi.br","*.nom.br","not.br","ntr.br","odo.br","ong.br","org.br","osasco.br","palmas.br","poa.br","ppg.br","pro.br","psc.br","psi.br","pvh.br","qsl.br","radio.br","rec.br","recife.br","ribeirao.br","rio.br","riobranco.br","riopreto.br","salvador.br","sampa.br","santamaria.br","santoandre.br","saobernardo.br","saogonca.br","sjc.br","slg.br","slz.br","sorocaba.br","srv.br","taxi.br","tc.br","teo.br","the.br","tmp.br","trd.br","tur.br","tv.br","udi.br","vet.br","vix.br","vlog.br","wiki.br","zlg.br","bs","com.bs","net.bs","org.bs","edu.bs","gov.bs","bt","com.bt","edu.bt","gov.bt","net.bt","org.bt","bv","bw","co.bw","org.bw","by","gov.by","mil.by","com.by","of.by","bz","com.bz","net.bz","org.bz","edu.bz","gov.bz","ca","ab.ca","bc.ca","mb.ca","nb.ca","nf.ca","nl.ca","ns.ca","nt.ca","nu.ca","on.ca","pe.ca","qc.ca","sk.ca","yk.ca","gc.ca","cat","cc","cd","gov.cd","cf","cg","ch","ci","org.ci","or.ci","com.ci","co.ci","edu.ci","ed.ci","ac.ci","net.ci","go.ci","asso.ci","aéroport.ci","int.ci","presse.ci","md.ci","gouv.ci","*.ck","!www.ck","cl","aprendemas.cl","co.cl","gob.cl","gov.cl","mil.cl","cm","co.cm","com.cm","gov.cm","net.cm","cn","ac.cn","com.cn","edu.cn","gov.cn","net.cn","org.cn","mil.cn","公司.cn","网络.cn","網絡.cn","ah.cn","bj.cn","cq.cn","fj.cn","gd.cn","gs.cn","gz.cn","gx.cn","ha.cn","hb.cn","he.cn","hi.cn","hl.cn","hn.cn","jl.cn","js.cn","jx.cn","ln.cn","nm.cn","nx.cn","qh.cn","sc.cn","sd.cn","sh.cn","sn.cn","sx.cn","tj.cn","xj.cn","xz.cn","yn.cn","zj.cn","hk.cn","mo.cn","tw.cn","co","arts.co","com.co","edu.co","firm.co","gov.co","info.co","int.co","mil.co","net.co","nom.co","org.co","rec.co","web.co","com","coop","cr","ac.cr","co.cr","ed.cr","fi.cr","go.cr","or.cr","sa.cr","cu","com.cu","edu.cu","org.cu","net.cu","gov.cu","inf.cu","cv","cw","com.cw","edu.cw","net.cw","org.cw","cx","gov.cx","cy","ac.cy","biz.cy","com.cy","ekloges.cy","gov.cy","ltd.cy","name.cy","net.cy","org.cy","parliament.cy","press.cy","pro.cy","tm.cy","cz","de","dj","dk","dm","com.dm","net.dm","org.dm","edu.dm","gov.dm","do","art.do","com.do","edu.do","gob.do","gov.do","mil.do","net.do","org.do","sld.do","web.do","dz","com.dz","org.dz","net.dz","gov.dz","edu.dz","asso.dz","pol.dz","art.dz","ec","com.ec","info.ec","net.ec","fin.ec","k12.ec","med.ec","pro.ec","org.ec","edu.ec","gov.ec","gob.ec","mil.ec","edu","ee","edu.ee","gov.ee","riik.ee","lib.ee","med.ee","com.ee","pri.ee","aip.ee","org.ee","fie.ee","eg","com.eg","edu.eg","eun.eg","gov.eg","mil.eg","name.eg","net.eg","org.eg","sci.eg","*.er","es","com.es","nom.es","org.es","gob.es","edu.es","et","com.et","gov.et","org.et","edu.et","biz.et","name.et","info.et","net.et","eu","fi","aland.fi","fj","ac.fj","biz.fj","com.fj","gov.fj","info.fj","mil.fj","name.fj","net.fj","org.fj","pro.fj","*.fk","fm","fo","fr","asso.fr","com.fr","gouv.fr","nom.fr","prd.fr","tm.fr","aeroport.fr","avocat.fr","avoues.fr","cci.fr","chambagri.fr","chirurgiens-dentistes.fr","experts-comptables.fr","geometre-expert.fr","greta.fr","huissier-justice.fr","medecin.fr","notaires.fr","pharmacien.fr","port.fr","veterinaire.fr","ga","gb","gd","ge","com.ge","edu.ge","gov.ge","org.ge","mil.ge","net.ge","pvt.ge","gf","gg","co.gg","net.gg","org.gg","gh","com.gh","edu.gh","gov.gh","org.gh","mil.gh","gi","com.gi","ltd.gi","gov.gi","mod.gi","edu.gi","org.gi","gl","co.gl","com.gl","edu.gl","net.gl","org.gl","gm","gn","ac.gn","com.gn","edu.gn","gov.gn","org.gn","net.gn","gov","gp","com.gp","net.gp","mobi.gp","edu.gp","org.gp","asso.gp","gq","gr","com.gr","edu.gr","net.gr","org.gr","gov.gr","gs","gt","com.gt","edu.gt","gob.gt","ind.gt","mil.gt","net.gt","org.gt","gu","com.gu","edu.gu","gov.gu","guam.gu","info.gu","net.gu","org.gu","web.gu","gw","gy","co.gy","com.gy","edu.gy","gov.gy","net.gy","org.gy","hk","com.hk","edu.hk","gov.hk","idv.hk","net.hk","org.hk","公司.hk","教育.hk","敎育.hk","政府.hk","個人.hk","个人.hk","箇人.hk","網络.hk","网络.hk","组織.hk","網絡.hk","网絡.hk","组织.hk","組織.hk","組织.hk","hm","hn","com.hn","edu.hn","org.hn","net.hn","mil.hn","gob.hn","hr","iz.hr","from.hr","name.hr","com.hr","ht","com.ht","shop.ht","firm.ht","info.ht","adult.ht","net.ht","pro.ht","org.ht","med.ht","art.ht","coop.ht","pol.ht","asso.ht","edu.ht","rel.ht","gouv.ht","perso.ht","hu","co.hu","info.hu","org.hu","priv.hu","sport.hu","tm.hu","2000.hu","agrar.hu","bolt.hu","casino.hu","city.hu","erotica.hu","erotika.hu","film.hu","forum.hu","games.hu","hotel.hu","ingatlan.hu","jogasz.hu","konyvelo.hu","lakas.hu","media.hu","news.hu","reklam.hu","sex.hu","shop.hu","suli.hu","szex.hu","tozsde.hu","utazas.hu","video.hu","id","ac.id","biz.id","co.id","desa.id","go.id","mil.id","my.id","net.id","or.id","ponpes.id","sch.id","web.id","ie","gov.ie","il","ac.il","co.il","gov.il","idf.il","k12.il","muni.il","net.il","org.il","im","ac.im","co.im","com.im","ltd.co.im","net.im","org.im","plc.co.im","tt.im","tv.im","in","co.in","firm.in","net.in","org.in","gen.in","ind.in","nic.in","ac.in","edu.in","res.in","gov.in","mil.in","info","int","eu.int","io","com.io","iq","gov.iq","edu.iq","mil.iq","com.iq","org.iq","net.iq","ir","ac.ir","co.ir","gov.ir","id.ir","net.ir","org.ir","sch.ir","ایران.ir","ايران.ir","is","net.is","com.is","edu.is","gov.is","org.is","int.is","it","gov.it","edu.it","abr.it","abruzzo.it","aosta-valley.it","aostavalley.it","bas.it","basilicata.it","cal.it","calabria.it","cam.it","campania.it","emilia-romagna.it","emiliaromagna.it","emr.it","friuli-v-giulia.it","friuli-ve-giulia.it","friuli-vegiulia.it","friuli-venezia-giulia.it","friuli-veneziagiulia.it","friuli-vgiulia.it","friuliv-giulia.it","friulive-giulia.it","friulivegiulia.it","friulivenezia-giulia.it","friuliveneziagiulia.it","friulivgiulia.it","fvg.it","laz.it","lazio.it","lig.it","liguria.it","lom.it","lombardia.it","lombardy.it","lucania.it","mar.it","marche.it","mol.it","molise.it","piedmont.it","piemonte.it","pmn.it","pug.it","puglia.it","sar.it","sardegna.it","sardinia.it","sic.it","sicilia.it","sicily.it","taa.it","tos.it","toscana.it","trentin-sud-tirol.it","trentin-süd-tirol.it","trentin-sudtirol.it","trentin-südtirol.it","trentin-sued-tirol.it","trentin-suedtirol.it","trentino-a-adige.it","trentino-aadige.it","trentino-alto-adige.it","trentino-altoadige.it","trentino-s-tirol.it","trentino-stirol.it","trentino-sud-tirol.it","trentino-süd-tirol.it","trentino-sudtirol.it","trentino-südtirol.it","trentino-sued-tirol.it","trentino-suedtirol.it","trentino.it","trentinoa-adige.it","trentinoaadige.it","trentinoalto-adige.it","trentinoaltoadige.it","trentinos-tirol.it","trentinostirol.it","trentinosud-tirol.it","trentinosüd-tirol.it","trentinosudtirol.it","trentinosüdtirol.it","trentinosued-tirol.it","trentinosuedtirol.it","trentinsud-tirol.it","trentinsüd-tirol.it","trentinsudtirol.it","trentinsüdtirol.it","trentinsued-tirol.it","trentinsuedtirol.it","tuscany.it","umb.it","umbria.it","val-d-aosta.it","val-daosta.it","vald-aosta.it","valdaosta.it","valle-aosta.it","valle-d-aosta.it","valle-daosta.it","valleaosta.it","valled-aosta.it","valledaosta.it","vallee-aoste.it","vallée-aoste.it","vallee-d-aoste.it","vallée-d-aoste.it","valleeaoste.it","valléeaoste.it","valleedaoste.it","valléedaoste.it","vao.it","vda.it","ven.it","veneto.it","ag.it","agrigento.it","al.it","alessandria.it","alto-adige.it","altoadige.it","an.it","ancona.it","andria-barletta-trani.it","andria-trani-barletta.it","andriabarlettatrani.it","andriatranibarletta.it","ao.it","aosta.it","aoste.it","ap.it","aq.it","aquila.it","ar.it","arezzo.it","ascoli-piceno.it","ascolipiceno.it","asti.it","at.it","av.it","avellino.it","ba.it","balsan-sudtirol.it","balsan-südtirol.it","balsan-suedtirol.it","balsan.it","bari.it","barletta-trani-andria.it","barlettatraniandria.it","belluno.it","benevento.it","bergamo.it","bg.it","bi.it","biella.it","bl.it","bn.it","bo.it","bologna.it","bolzano-altoadige.it","bolzano.it","bozen-sudtirol.it","bozen-südtirol.it","bozen-suedtirol.it","bozen.it","br.it","brescia.it","brindisi.it","bs.it","bt.it","bulsan-sudtirol.it","bulsan-südtirol.it","bulsan-suedtirol.it","bulsan.it","bz.it","ca.it","cagliari.it","caltanissetta.it","campidano-medio.it","campidanomedio.it","campobasso.it","carbonia-iglesias.it","carboniaiglesias.it","carrara-massa.it","carraramassa.it","caserta.it","catania.it","catanzaro.it","cb.it","ce.it","cesena-forli.it","cesena-forlì.it","cesenaforli.it","cesenaforlì.it","ch.it","chieti.it","ci.it","cl.it","cn.it","co.it","como.it","cosenza.it","cr.it","cremona.it","crotone.it","cs.it","ct.it","cuneo.it","cz.it","dell-ogliastra.it","dellogliastra.it","en.it","enna.it","fc.it","fe.it","fermo.it","ferrara.it","fg.it","fi.it","firenze.it","florence.it","fm.it","foggia.it","forli-cesena.it","forlì-cesena.it","forlicesena.it","forlìcesena.it","fr.it","frosinone.it","ge.it","genoa.it","genova.it","go.it","gorizia.it","gr.it","grosseto.it","iglesias-carbonia.it","iglesiascarbonia.it","im.it","imperia.it","is.it","isernia.it","kr.it","la-spezia.it","laquila.it","laspezia.it","latina.it","lc.it","le.it","lecce.it","lecco.it","li.it","livorno.it","lo.it","lodi.it","lt.it","lu.it","lucca.it","macerata.it","mantova.it","massa-carrara.it","massacarrara.it","matera.it","mb.it","mc.it","me.it","medio-campidano.it","mediocampidano.it","messina.it","mi.it","milan.it","milano.it","mn.it","mo.it","modena.it","monza-brianza.it","monza-e-della-brianza.it","monza.it","monzabrianza.it","monzaebrianza.it","monzaedellabrianza.it","ms.it","mt.it","na.it","naples.it","napoli.it","no.it","novara.it","nu.it","nuoro.it","og.it","ogliastra.it","olbia-tempio.it","olbiatempio.it","or.it","oristano.it","ot.it","pa.it","padova.it","padua.it","palermo.it","parma.it","pavia.it","pc.it","pd.it","pe.it","perugia.it","pesaro-urbino.it","pesarourbino.it","pescara.it","pg.it","pi.it","piacenza.it","pisa.it","pistoia.it","pn.it","po.it","pordenone.it","potenza.it","pr.it","prato.it","pt.it","pu.it","pv.it","pz.it","ra.it","ragusa.it","ravenna.it","rc.it","re.it","reggio-calabria.it","reggio-emilia.it","reggiocalabria.it","reggioemilia.it","rg.it","ri.it","rieti.it","rimini.it","rm.it","rn.it","ro.it","roma.it","rome.it","rovigo.it","sa.it","salerno.it","sassari.it","savona.it","si.it","siena.it","siracusa.it","so.it","sondrio.it","sp.it","sr.it","ss.it","suedtirol.it","südtirol.it","sv.it","ta.it","taranto.it","te.it","tempio-olbia.it","tempioolbia.it","teramo.it","terni.it","tn.it","to.it","torino.it","tp.it","tr.it","trani-andria-barletta.it","trani-barletta-andria.it","traniandriabarletta.it","tranibarlettaandria.it","trapani.it","trento.it","treviso.it","trieste.it","ts.it","turin.it","tv.it","ud.it","udine.it","urbino-pesaro.it","urbinopesaro.it","va.it","varese.it","vb.it","vc.it","ve.it","venezia.it","venice.it","verbania.it","vercelli.it","verona.it","vi.it","vibo-valentia.it","vibovalentia.it","vicenza.it","viterbo.it","vr.it","vs.it","vt.it","vv.it","je","co.je","net.je","org.je","*.jm","jo","com.jo","org.jo","net.jo","edu.jo","sch.jo","gov.jo","mil.jo","name.jo","jobs","jp","ac.jp","ad.jp","co.jp","ed.jp","go.jp","gr.jp","lg.jp","ne.jp","or.jp","aichi.jp","akita.jp","aomori.jp","chiba.jp","ehime.jp","fukui.jp","fukuoka.jp","fukushima.jp","gifu.jp","gunma.jp","hiroshima.jp","hokkaido.jp","hyogo.jp","ibaraki.jp","ishikawa.jp","iwate.jp","kagawa.jp","kagoshima.jp","kanagawa.jp","kochi.jp","kumamoto.jp","kyoto.jp","mie.jp","miyagi.jp","miyazaki.jp","nagano.jp","nagasaki.jp","nara.jp","niigata.jp","oita.jp","okayama.jp","okinawa.jp","osaka.jp","saga.jp","saitama.jp","shiga.jp","shimane.jp","shizuoka.jp","tochigi.jp","tokushima.jp","tokyo.jp","tottori.jp","toyama.jp","wakayama.jp","yamagata.jp","yamaguchi.jp","yamanashi.jp","栃木.jp","愛知.jp","愛媛.jp","兵庫.jp","熊本.jp","茨城.jp","北海道.jp","千葉.jp","和歌山.jp","長崎.jp","長野.jp","新潟.jp","青森.jp","静岡.jp","東京.jp","石川.jp","埼玉.jp","三重.jp","京都.jp","佐賀.jp","大分.jp","大阪.jp","奈良.jp","宮城.jp","宮崎.jp","富山.jp","山口.jp","山形.jp","山梨.jp","岩手.jp","岐阜.jp","岡山.jp","島根.jp","広島.jp","徳島.jp","沖縄.jp","滋賀.jp","神奈川.jp","福井.jp","福岡.jp","福島.jp","秋田.jp","群馬.jp","香川.jp","高知.jp","鳥取.jp","鹿児島.jp","*.kawasaki.jp","*.kitakyushu.jp","*.kobe.jp","*.nagoya.jp","*.sapporo.jp","*.sendai.jp","*.yokohama.jp","!city.kawasaki.jp","!city.kitakyushu.jp","!city.kobe.jp","!city.nagoya.jp","!city.sapporo.jp","!city.sendai.jp","!city.yokohama.jp","aisai.aichi.jp","ama.aichi.jp","anjo.aichi.jp","asuke.aichi.jp","chiryu.aichi.jp","chita.aichi.jp","fuso.aichi.jp","gamagori.aichi.jp","handa.aichi.jp","hazu.aichi.jp","hekinan.aichi.jp","higashiura.aichi.jp","ichinomiya.aichi.jp","inazawa.aichi.jp","inuyama.aichi.jp","isshiki.aichi.jp","iwakura.aichi.jp","kanie.aichi.jp","kariya.aichi.jp","kasugai.aichi.jp","kira.aichi.jp","kiyosu.aichi.jp","komaki.aichi.jp","konan.aichi.jp","kota.aichi.jp","mihama.aichi.jp","miyoshi.aichi.jp","nishio.aichi.jp","nisshin.aichi.jp","obu.aichi.jp","oguchi.aichi.jp","oharu.aichi.jp","okazaki.aichi.jp","owariasahi.aichi.jp","seto.aichi.jp","shikatsu.aichi.jp","shinshiro.aichi.jp","shitara.aichi.jp","tahara.aichi.jp","takahama.aichi.jp","tobishima.aichi.jp","toei.aichi.jp","togo.aichi.jp","tokai.aichi.jp","tokoname.aichi.jp","toyoake.aichi.jp","toyohashi.aichi.jp","toyokawa.aichi.jp","toyone.aichi.jp","toyota.aichi.jp","tsushima.aichi.jp","yatomi.aichi.jp","akita.akita.jp","daisen.akita.jp","fujisato.akita.jp","gojome.akita.jp","hachirogata.akita.jp","happou.akita.jp","higashinaruse.akita.jp","honjo.akita.jp","honjyo.akita.jp","ikawa.akita.jp","kamikoani.akita.jp","kamioka.akita.jp","katagami.akita.jp","kazuno.akita.jp","kitaakita.akita.jp","kosaka.akita.jp","kyowa.akita.jp","misato.akita.jp","mitane.akita.jp","moriyoshi.akita.jp","nikaho.akita.jp","noshiro.akita.jp","odate.akita.jp","oga.akita.jp","ogata.akita.jp","semboku.akita.jp","yokote.akita.jp","yurihonjo.akita.jp","aomori.aomori.jp","gonohe.aomori.jp","hachinohe.aomori.jp","hashikami.aomori.jp","hiranai.aomori.jp","hirosaki.aomori.jp","itayanagi.aomori.jp","kuroishi.aomori.jp","misawa.aomori.jp","mutsu.aomori.jp","nakadomari.aomori.jp","noheji.aomori.jp","oirase.aomori.jp","owani.aomori.jp","rokunohe.aomori.jp","sannohe.aomori.jp","shichinohe.aomori.jp","shingo.aomori.jp","takko.aomori.jp","towada.aomori.jp","tsugaru.aomori.jp","tsuruta.aomori.jp","abiko.chiba.jp","asahi.chiba.jp","chonan.chiba.jp","chosei.chiba.jp","choshi.chiba.jp","chuo.chiba.jp","funabashi.chiba.jp","futtsu.chiba.jp","hanamigawa.chiba.jp","ichihara.chiba.jp","ichikawa.chiba.jp","ichinomiya.chiba.jp","inzai.chiba.jp","isumi.chiba.jp","kamagaya.chiba.jp","kamogawa.chiba.jp","kashiwa.chiba.jp","katori.chiba.jp","katsuura.chiba.jp","kimitsu.chiba.jp","kisarazu.chiba.jp","kozaki.chiba.jp","kujukuri.chiba.jp","kyonan.chiba.jp","matsudo.chiba.jp","midori.chiba.jp","mihama.chiba.jp","minamiboso.chiba.jp","mobara.chiba.jp","mutsuzawa.chiba.jp","nagara.chiba.jp","nagareyama.chiba.jp","narashino.chiba.jp","narita.chiba.jp","noda.chiba.jp","oamishirasato.chiba.jp","omigawa.chiba.jp","onjuku.chiba.jp","otaki.chiba.jp","sakae.chiba.jp","sakura.chiba.jp","shimofusa.chiba.jp","shirako.chiba.jp","shiroi.chiba.jp","shisui.chiba.jp","sodegaura.chiba.jp","sosa.chiba.jp","tako.chiba.jp","tateyama.chiba.jp","togane.chiba.jp","tohnosho.chiba.jp","tomisato.chiba.jp","urayasu.chiba.jp","yachimata.chiba.jp","yachiyo.chiba.jp","yokaichiba.chiba.jp","yokoshibahikari.chiba.jp","yotsukaido.chiba.jp","ainan.ehime.jp","honai.ehime.jp","ikata.ehime.jp","imabari.ehime.jp","iyo.ehime.jp","kamijima.ehime.jp","kihoku.ehime.jp","kumakogen.ehime.jp","masaki.ehime.jp","matsuno.ehime.jp","matsuyama.ehime.jp","namikata.ehime.jp","niihama.ehime.jp","ozu.ehime.jp","saijo.ehime.jp","seiyo.ehime.jp","shikokuchuo.ehime.jp","tobe.ehime.jp","toon.ehime.jp","uchiko.ehime.jp","uwajima.ehime.jp","yawatahama.ehime.jp","echizen.fukui.jp","eiheiji.fukui.jp","fukui.fukui.jp","ikeda.fukui.jp","katsuyama.fukui.jp","mihama.fukui.jp","minamiechizen.fukui.jp","obama.fukui.jp","ohi.fukui.jp","ono.fukui.jp","sabae.fukui.jp","sakai.fukui.jp","takahama.fukui.jp","tsuruga.fukui.jp","wakasa.fukui.jp","ashiya.fukuoka.jp","buzen.fukuoka.jp","chikugo.fukuoka.jp","chikuho.fukuoka.jp","chikujo.fukuoka.jp","chikushino.fukuoka.jp","chikuzen.fukuoka.jp","chuo.fukuoka.jp","dazaifu.fukuoka.jp","fukuchi.fukuoka.jp","hakata.fukuoka.jp","higashi.fukuoka.jp","hirokawa.fukuoka.jp","hisayama.fukuoka.jp","iizuka.fukuoka.jp","inatsuki.fukuoka.jp","kaho.fukuoka.jp","kasuga.fukuoka.jp","kasuya.fukuoka.jp","kawara.fukuoka.jp","keisen.fukuoka.jp","koga.fukuoka.jp","kurate.fukuoka.jp","kurogi.fukuoka.jp","kurume.fukuoka.jp","minami.fukuoka.jp","miyako.fukuoka.jp","miyama.fukuoka.jp","miyawaka.fukuoka.jp","mizumaki.fukuoka.jp","munakata.fukuoka.jp","nakagawa.fukuoka.jp","nakama.fukuoka.jp","nishi.fukuoka.jp","nogata.fukuoka.jp","ogori.fukuoka.jp","okagaki.fukuoka.jp","okawa.fukuoka.jp","oki.fukuoka.jp","omuta.fukuoka.jp","onga.fukuoka.jp","onojo.fukuoka.jp","oto.fukuoka.jp","saigawa.fukuoka.jp","sasaguri.fukuoka.jp","shingu.fukuoka.jp","shinyoshitomi.fukuoka.jp","shonai.fukuoka.jp","soeda.fukuoka.jp","sue.fukuoka.jp","tachiarai.fukuoka.jp","tagawa.fukuoka.jp","takata.fukuoka.jp","toho.fukuoka.jp","toyotsu.fukuoka.jp","tsuiki.fukuoka.jp","ukiha.fukuoka.jp","umi.fukuoka.jp","usui.fukuoka.jp","yamada.fukuoka.jp","yame.fukuoka.jp","yanagawa.fukuoka.jp","yukuhashi.fukuoka.jp","aizubange.fukushima.jp","aizumisato.fukushima.jp","aizuwakamatsu.fukushima.jp","asakawa.fukushima.jp","bandai.fukushima.jp","date.fukushima.jp","fukushima.fukushima.jp","furudono.fukushima.jp","futaba.fukushima.jp","hanawa.fukushima.jp","higashi.fukushima.jp","hirata.fukushima.jp","hirono.fukushima.jp","iitate.fukushima.jp","inawashiro.fukushima.jp","ishikawa.fukushima.jp","iwaki.fukushima.jp","izumizaki.fukushima.jp","kagamiishi.fukushima.jp","kaneyama.fukushima.jp","kawamata.fukushima.jp","kitakata.fukushima.jp","kitashiobara.fukushima.jp","koori.fukushima.jp","koriyama.fukushima.jp","kunimi.fukushima.jp","miharu.fukushima.jp","mishima.fukushima.jp","namie.fukushima.jp","nango.fukushima.jp","nishiaizu.fukushima.jp","nishigo.fukushima.jp","okuma.fukushima.jp","omotego.fukushima.jp","ono.fukushima.jp","otama.fukushima.jp","samegawa.fukushima.jp","shimogo.fukushima.jp","shirakawa.fukushima.jp","showa.fukushima.jp","soma.fukushima.jp","sukagawa.fukushima.jp","taishin.fukushima.jp","tamakawa.fukushima.jp","tanagura.fukushima.jp","tenei.fukushima.jp","yabuki.fukushima.jp","yamato.fukushima.jp","yamatsuri.fukushima.jp","yanaizu.fukushima.jp","yugawa.fukushima.jp","anpachi.gifu.jp","ena.gifu.jp","gifu.gifu.jp","ginan.gifu.jp","godo.gifu.jp","gujo.gifu.jp","hashima.gifu.jp","hichiso.gifu.jp","hida.gifu.jp","higashishirakawa.gifu.jp","ibigawa.gifu.jp","ikeda.gifu.jp","kakamigahara.gifu.jp","kani.gifu.jp","kasahara.gifu.jp","kasamatsu.gifu.jp","kawaue.gifu.jp","kitagata.gifu.jp","mino.gifu.jp","minokamo.gifu.jp","mitake.gifu.jp","mizunami.gifu.jp","motosu.gifu.jp","nakatsugawa.gifu.jp","ogaki.gifu.jp","sakahogi.gifu.jp","seki.gifu.jp","sekigahara.gifu.jp","shirakawa.gifu.jp","tajimi.gifu.jp","takayama.gifu.jp","tarui.gifu.jp","toki.gifu.jp","tomika.gifu.jp","wanouchi.gifu.jp","yamagata.gifu.jp","yaotsu.gifu.jp","yoro.gifu.jp","annaka.gunma.jp","chiyoda.gunma.jp","fujioka.gunma.jp","higashiagatsuma.gunma.jp","isesaki.gunma.jp","itakura.gunma.jp","kanna.gunma.jp","kanra.gunma.jp","katashina.gunma.jp","kawaba.gunma.jp","kiryu.gunma.jp","kusatsu.gunma.jp","maebashi.gunma.jp","meiwa.gunma.jp","midori.gunma.jp","minakami.gunma.jp","naganohara.gunma.jp","nakanojo.gunma.jp","nanmoku.gunma.jp","numata.gunma.jp","oizumi.gunma.jp","ora.gunma.jp","ota.gunma.jp","shibukawa.gunma.jp","shimonita.gunma.jp","shinto.gunma.jp","showa.gunma.jp","takasaki.gunma.jp","takayama.gunma.jp","tamamura.gunma.jp","tatebayashi.gunma.jp","tomioka.gunma.jp","tsukiyono.gunma.jp","tsumagoi.gunma.jp","ueno.gunma.jp","yoshioka.gunma.jp","asaminami.hiroshima.jp","daiwa.hiroshima.jp","etajima.hiroshima.jp","fuchu.hiroshima.jp","fukuyama.hiroshima.jp","hatsukaichi.hiroshima.jp","higashihiroshima.hiroshima.jp","hongo.hiroshima.jp","jinsekikogen.hiroshima.jp","kaita.hiroshima.jp","kui.hiroshima.jp","kumano.hiroshima.jp","kure.hiroshima.jp","mihara.hiroshima.jp","miyoshi.hiroshima.jp","naka.hiroshima.jp","onomichi.hiroshima.jp","osakikamijima.hiroshima.jp","otake.hiroshima.jp","saka.hiroshima.jp","sera.hiroshima.jp","seranishi.hiroshima.jp","shinichi.hiroshima.jp","shobara.hiroshima.jp","takehara.hiroshima.jp","abashiri.hokkaido.jp","abira.hokkaido.jp","aibetsu.hokkaido.jp","akabira.hokkaido.jp","akkeshi.hokkaido.jp","asahikawa.hokkaido.jp","ashibetsu.hokkaido.jp","ashoro.hokkaido.jp","assabu.hokkaido.jp","atsuma.hokkaido.jp","bibai.hokkaido.jp","biei.hokkaido.jp","bifuka.hokkaido.jp","bihoro.hokkaido.jp","biratori.hokkaido.jp","chippubetsu.hokkaido.jp","chitose.hokkaido.jp","date.hokkaido.jp","ebetsu.hokkaido.jp","embetsu.hokkaido.jp","eniwa.hokkaido.jp","erimo.hokkaido.jp","esan.hokkaido.jp","esashi.hokkaido.jp","fukagawa.hokkaido.jp","fukushima.hokkaido.jp","furano.hokkaido.jp","furubira.hokkaido.jp","haboro.hokkaido.jp","hakodate.hokkaido.jp","hamatonbetsu.hokkaido.jp","hidaka.hokkaido.jp","higashikagura.hokkaido.jp","higashikawa.hokkaido.jp","hiroo.hokkaido.jp","hokuryu.hokkaido.jp","hokuto.hokkaido.jp","honbetsu.hokkaido.jp","horokanai.hokkaido.jp","horonobe.hokkaido.jp","ikeda.hokkaido.jp","imakane.hokkaido.jp","ishikari.hokkaido.jp","iwamizawa.hokkaido.jp","iwanai.hokkaido.jp","kamifurano.hokkaido.jp","kamikawa.hokkaido.jp","kamishihoro.hokkaido.jp","kamisunagawa.hokkaido.jp","kamoenai.hokkaido.jp","kayabe.hokkaido.jp","kembuchi.hokkaido.jp","kikonai.hokkaido.jp","kimobetsu.hokkaido.jp","kitahiroshima.hokkaido.jp","kitami.hokkaido.jp","kiyosato.hokkaido.jp","koshimizu.hokkaido.jp","kunneppu.hokkaido.jp","kuriyama.hokkaido.jp","kuromatsunai.hokkaido.jp","kushiro.hokkaido.jp","kutchan.hokkaido.jp","kyowa.hokkaido.jp","mashike.hokkaido.jp","matsumae.hokkaido.jp","mikasa.hokkaido.jp","minamifurano.hokkaido.jp","mombetsu.hokkaido.jp","moseushi.hokkaido.jp","mukawa.hokkaido.jp","muroran.hokkaido.jp","naie.hokkaido.jp","nakagawa.hokkaido.jp","nakasatsunai.hokkaido.jp","nakatombetsu.hokkaido.jp","nanae.hokkaido.jp","nanporo.hokkaido.jp","nayoro.hokkaido.jp","nemuro.hokkaido.jp","niikappu.hokkaido.jp","niki.hokkaido.jp","nishiokoppe.hokkaido.jp","noboribetsu.hokkaido.jp","numata.hokkaido.jp","obihiro.hokkaido.jp","obira.hokkaido.jp","oketo.hokkaido.jp","okoppe.hokkaido.jp","otaru.hokkaido.jp","otobe.hokkaido.jp","otofuke.hokkaido.jp","otoineppu.hokkaido.jp","oumu.hokkaido.jp","ozora.hokkaido.jp","pippu.hokkaido.jp","rankoshi.hokkaido.jp","rebun.hokkaido.jp","rikubetsu.hokkaido.jp","rishiri.hokkaido.jp","rishirifuji.hokkaido.jp","saroma.hokkaido.jp","sarufutsu.hokkaido.jp","shakotan.hokkaido.jp","shari.hokkaido.jp","shibecha.hokkaido.jp","shibetsu.hokkaido.jp","shikabe.hokkaido.jp","shikaoi.hokkaido.jp","shimamaki.hokkaido.jp","shimizu.hokkaido.jp","shimokawa.hokkaido.jp","shinshinotsu.hokkaido.jp","shintoku.hokkaido.jp","shiranuka.hokkaido.jp","shiraoi.hokkaido.jp","shiriuchi.hokkaido.jp","sobetsu.hokkaido.jp","sunagawa.hokkaido.jp","taiki.hokkaido.jp","takasu.hokkaido.jp","takikawa.hokkaido.jp","takinoue.hokkaido.jp","teshikaga.hokkaido.jp","tobetsu.hokkaido.jp","tohma.hokkaido.jp","tomakomai.hokkaido.jp","tomari.hokkaido.jp","toya.hokkaido.jp","toyako.hokkaido.jp","toyotomi.hokkaido.jp","toyoura.hokkaido.jp","tsubetsu.hokkaido.jp","tsukigata.hokkaido.jp","urakawa.hokkaido.jp","urausu.hokkaido.jp","uryu.hokkaido.jp","utashinai.hokkaido.jp","wakkanai.hokkaido.jp","wassamu.hokkaido.jp","yakumo.hokkaido.jp","yoichi.hokkaido.jp","aioi.hyogo.jp","akashi.hyogo.jp","ako.hyogo.jp","amagasaki.hyogo.jp","aogaki.hyogo.jp","asago.hyogo.jp","ashiya.hyogo.jp","awaji.hyogo.jp","fukusaki.hyogo.jp","goshiki.hyogo.jp","harima.hyogo.jp","himeji.hyogo.jp","ichikawa.hyogo.jp","inagawa.hyogo.jp","itami.hyogo.jp","kakogawa.hyogo.jp","kamigori.hyogo.jp","kamikawa.hyogo.jp","kasai.hyogo.jp","kasuga.hyogo.jp","kawanishi.hyogo.jp","miki.hyogo.jp","minamiawaji.hyogo.jp","nishinomiya.hyogo.jp","nishiwaki.hyogo.jp","ono.hyogo.jp","sanda.hyogo.jp","sannan.hyogo.jp","sasayama.hyogo.jp","sayo.hyogo.jp","shingu.hyogo.jp","shinonsen.hyogo.jp","shiso.hyogo.jp","sumoto.hyogo.jp","taishi.hyogo.jp","taka.hyogo.jp","takarazuka.hyogo.jp","takasago.hyogo.jp","takino.hyogo.jp","tamba.hyogo.jp","tatsuno.hyogo.jp","toyooka.hyogo.jp","yabu.hyogo.jp","yashiro.hyogo.jp","yoka.hyogo.jp","yokawa.hyogo.jp","ami.ibaraki.jp","asahi.ibaraki.jp","bando.ibaraki.jp","chikusei.ibaraki.jp","daigo.ibaraki.jp","fujishiro.ibaraki.jp","hitachi.ibaraki.jp","hitachinaka.ibaraki.jp","hitachiomiya.ibaraki.jp","hitachiota.ibaraki.jp","ibaraki.ibaraki.jp","ina.ibaraki.jp","inashiki.ibaraki.jp","itako.ibaraki.jp","iwama.ibaraki.jp","joso.ibaraki.jp","kamisu.ibaraki.jp","kasama.ibaraki.jp","kashima.ibaraki.jp","kasumigaura.ibaraki.jp","koga.ibaraki.jp","miho.ibaraki.jp","mito.ibaraki.jp","moriya.ibaraki.jp","naka.ibaraki.jp","namegata.ibaraki.jp","oarai.ibaraki.jp","ogawa.ibaraki.jp","omitama.ibaraki.jp","ryugasaki.ibaraki.jp","sakai.ibaraki.jp","sakuragawa.ibaraki.jp","shimodate.ibaraki.jp","shimotsuma.ibaraki.jp","shirosato.ibaraki.jp","sowa.ibaraki.jp","suifu.ibaraki.jp","takahagi.ibaraki.jp","tamatsukuri.ibaraki.jp","tokai.ibaraki.jp","tomobe.ibaraki.jp","tone.ibaraki.jp","toride.ibaraki.jp","tsuchiura.ibaraki.jp","tsukuba.ibaraki.jp","uchihara.ibaraki.jp","ushiku.ibaraki.jp","yachiyo.ibaraki.jp","yamagata.ibaraki.jp","yawara.ibaraki.jp","yuki.ibaraki.jp","anamizu.ishikawa.jp","hakui.ishikawa.jp","hakusan.ishikawa.jp","kaga.ishikawa.jp","kahoku.ishikawa.jp","kanazawa.ishikawa.jp","kawakita.ishikawa.jp","komatsu.ishikawa.jp","nakanoto.ishikawa.jp","nanao.ishikawa.jp","nomi.ishikawa.jp","nonoichi.ishikawa.jp","noto.ishikawa.jp","shika.ishikawa.jp","suzu.ishikawa.jp","tsubata.ishikawa.jp","tsurugi.ishikawa.jp","uchinada.ishikawa.jp","wajima.ishikawa.jp","fudai.iwate.jp","fujisawa.iwate.jp","hanamaki.iwate.jp","hiraizumi.iwate.jp","hirono.iwate.jp","ichinohe.iwate.jp","ichinoseki.iwate.jp","iwaizumi.iwate.jp","iwate.iwate.jp","joboji.iwate.jp","kamaishi.iwate.jp","kanegasaki.iwate.jp","karumai.iwate.jp","kawai.iwate.jp","kitakami.iwate.jp","kuji.iwate.jp","kunohe.iwate.jp","kuzumaki.iwate.jp","miyako.iwate.jp","mizusawa.iwate.jp","morioka.iwate.jp","ninohe.iwate.jp","noda.iwate.jp","ofunato.iwate.jp","oshu.iwate.jp","otsuchi.iwate.jp","rikuzentakata.iwate.jp","shiwa.iwate.jp","shizukuishi.iwate.jp","sumita.iwate.jp","tanohata.iwate.jp","tono.iwate.jp","yahaba.iwate.jp","yamada.iwate.jp","ayagawa.kagawa.jp","higashikagawa.kagawa.jp","kanonji.kagawa.jp","kotohira.kagawa.jp","manno.kagawa.jp","marugame.kagawa.jp","mitoyo.kagawa.jp","naoshima.kagawa.jp","sanuki.kagawa.jp","tadotsu.kagawa.jp","takamatsu.kagawa.jp","tonosho.kagawa.jp","uchinomi.kagawa.jp","utazu.kagawa.jp","zentsuji.kagawa.jp","akune.kagoshima.jp","amami.kagoshima.jp","hioki.kagoshima.jp","isa.kagoshima.jp","isen.kagoshima.jp","izumi.kagoshima.jp","kagoshima.kagoshima.jp","kanoya.kagoshima.jp","kawanabe.kagoshima.jp","kinko.kagoshima.jp","kouyama.kagoshima.jp","makurazaki.kagoshima.jp","matsumoto.kagoshima.jp","minamitane.kagoshima.jp","nakatane.kagoshima.jp","nishinoomote.kagoshima.jp","satsumasendai.kagoshima.jp","soo.kagoshima.jp","tarumizu.kagoshima.jp","yusui.kagoshima.jp","aikawa.kanagawa.jp","atsugi.kanagawa.jp","ayase.kanagawa.jp","chigasaki.kanagawa.jp","ebina.kanagawa.jp","fujisawa.kanagawa.jp","hadano.kanagawa.jp","hakone.kanagawa.jp","hiratsuka.kanagawa.jp","isehara.kanagawa.jp","kaisei.kanagawa.jp","kamakura.kanagawa.jp","kiyokawa.kanagawa.jp","matsuda.kanagawa.jp","minamiashigara.kanagawa.jp","miura.kanagawa.jp","nakai.kanagawa.jp","ninomiya.kanagawa.jp","odawara.kanagawa.jp","oi.kanagawa.jp","oiso.kanagawa.jp","sagamihara.kanagawa.jp","samukawa.kanagawa.jp","tsukui.kanagawa.jp","yamakita.kanagawa.jp","yamato.kanagawa.jp","yokosuka.kanagawa.jp","yugawara.kanagawa.jp","zama.kanagawa.jp","zushi.kanagawa.jp","aki.kochi.jp","geisei.kochi.jp","hidaka.kochi.jp","higashitsuno.kochi.jp","ino.kochi.jp","kagami.kochi.jp","kami.kochi.jp","kitagawa.kochi.jp","kochi.kochi.jp","mihara.kochi.jp","motoyama.kochi.jp","muroto.kochi.jp","nahari.kochi.jp","nakamura.kochi.jp","nankoku.kochi.jp","nishitosa.kochi.jp","niyodogawa.kochi.jp","ochi.kochi.jp","okawa.kochi.jp","otoyo.kochi.jp","otsuki.kochi.jp","sakawa.kochi.jp","sukumo.kochi.jp","susaki.kochi.jp","tosa.kochi.jp","tosashimizu.kochi.jp","toyo.kochi.jp","tsuno.kochi.jp","umaji.kochi.jp","yasuda.kochi.jp","yusuhara.kochi.jp","amakusa.kumamoto.jp","arao.kumamoto.jp","aso.kumamoto.jp","choyo.kumamoto.jp","gyokuto.kumamoto.jp","kamiamakusa.kumamoto.jp","kikuchi.kumamoto.jp","kumamoto.kumamoto.jp","mashiki.kumamoto.jp","mifune.kumamoto.jp","minamata.kumamoto.jp","minamioguni.kumamoto.jp","nagasu.kumamoto.jp","nishihara.kumamoto.jp","oguni.kumamoto.jp","ozu.kumamoto.jp","sumoto.kumamoto.jp","takamori.kumamoto.jp","uki.kumamoto.jp","uto.kumamoto.jp","yamaga.kumamoto.jp","yamato.kumamoto.jp","yatsushiro.kumamoto.jp","ayabe.kyoto.jp","fukuchiyama.kyoto.jp","higashiyama.kyoto.jp","ide.kyoto.jp","ine.kyoto.jp","joyo.kyoto.jp","kameoka.kyoto.jp","kamo.kyoto.jp","kita.kyoto.jp","kizu.kyoto.jp","kumiyama.kyoto.jp","kyotamba.kyoto.jp","kyotanabe.kyoto.jp","kyotango.kyoto.jp","maizuru.kyoto.jp","minami.kyoto.jp","minamiyamashiro.kyoto.jp","miyazu.kyoto.jp","muko.kyoto.jp","nagaokakyo.kyoto.jp","nakagyo.kyoto.jp","nantan.kyoto.jp","oyamazaki.kyoto.jp","sakyo.kyoto.jp","seika.kyoto.jp","tanabe.kyoto.jp","uji.kyoto.jp","ujitawara.kyoto.jp","wazuka.kyoto.jp","yamashina.kyoto.jp","yawata.kyoto.jp","asahi.mie.jp","inabe.mie.jp","ise.mie.jp","kameyama.mie.jp","kawagoe.mie.jp","kiho.mie.jp","kisosaki.mie.jp","kiwa.mie.jp","komono.mie.jp","kumano.mie.jp","kuwana.mie.jp","matsusaka.mie.jp","meiwa.mie.jp","mihama.mie.jp","minamiise.mie.jp","misugi.mie.jp","miyama.mie.jp","nabari.mie.jp","shima.mie.jp","suzuka.mie.jp","tado.mie.jp","taiki.mie.jp","taki.mie.jp","tamaki.mie.jp","toba.mie.jp","tsu.mie.jp","udono.mie.jp","ureshino.mie.jp","watarai.mie.jp","yokkaichi.mie.jp","furukawa.miyagi.jp","higashimatsushima.miyagi.jp","ishinomaki.miyagi.jp","iwanuma.miyagi.jp","kakuda.miyagi.jp","kami.miyagi.jp","kawasaki.miyagi.jp","marumori.miyagi.jp","matsushima.miyagi.jp","minamisanriku.miyagi.jp","misato.miyagi.jp","murata.miyagi.jp","natori.miyagi.jp","ogawara.miyagi.jp","ohira.miyagi.jp","onagawa.miyagi.jp","osaki.miyagi.jp","rifu.miyagi.jp","semine.miyagi.jp","shibata.miyagi.jp","shichikashuku.miyagi.jp","shikama.miyagi.jp","shiogama.miyagi.jp","shiroishi.miyagi.jp","tagajo.miyagi.jp","taiwa.miyagi.jp","tome.miyagi.jp","tomiya.miyagi.jp","wakuya.miyagi.jp","watari.miyagi.jp","yamamoto.miyagi.jp","zao.miyagi.jp","aya.miyazaki.jp","ebino.miyazaki.jp","gokase.miyazaki.jp","hyuga.miyazaki.jp","kadogawa.miyazaki.jp","kawaminami.miyazaki.jp","kijo.miyazaki.jp","kitagawa.miyazaki.jp","kitakata.miyazaki.jp","kitaura.miyazaki.jp","kobayashi.miyazaki.jp","kunitomi.miyazaki.jp","kushima.miyazaki.jp","mimata.miyazaki.jp","miyakonojo.miyazaki.jp","miyazaki.miyazaki.jp","morotsuka.miyazaki.jp","nichinan.miyazaki.jp","nishimera.miyazaki.jp","nobeoka.miyazaki.jp","saito.miyazaki.jp","shiiba.miyazaki.jp","shintomi.miyazaki.jp","takaharu.miyazaki.jp","takanabe.miyazaki.jp","takazaki.miyazaki.jp","tsuno.miyazaki.jp","achi.nagano.jp","agematsu.nagano.jp","anan.nagano.jp","aoki.nagano.jp","asahi.nagano.jp","azumino.nagano.jp","chikuhoku.nagano.jp","chikuma.nagano.jp","chino.nagano.jp","fujimi.nagano.jp","hakuba.nagano.jp","hara.nagano.jp","hiraya.nagano.jp","iida.nagano.jp","iijima.nagano.jp","iiyama.nagano.jp","iizuna.nagano.jp","ikeda.nagano.jp","ikusaka.nagano.jp","ina.nagano.jp","karuizawa.nagano.jp","kawakami.nagano.jp","kiso.nagano.jp","kisofukushima.nagano.jp","kitaaiki.nagano.jp","komagane.nagano.jp","komoro.nagano.jp","matsukawa.nagano.jp","matsumoto.nagano.jp","miasa.nagano.jp","minamiaiki.nagano.jp","minamimaki.nagano.jp","minamiminowa.nagano.jp","minowa.nagano.jp","miyada.nagano.jp","miyota.nagano.jp","mochizuki.nagano.jp","nagano.nagano.jp","nagawa.nagano.jp","nagiso.nagano.jp","nakagawa.nagano.jp","nakano.nagano.jp","nozawaonsen.nagano.jp","obuse.nagano.jp","ogawa.nagano.jp","okaya.nagano.jp","omachi.nagano.jp","omi.nagano.jp","ookuwa.nagano.jp","ooshika.nagano.jp","otaki.nagano.jp","otari.nagano.jp","sakae.nagano.jp","sakaki.nagano.jp","saku.nagano.jp","sakuho.nagano.jp","shimosuwa.nagano.jp","shinanomachi.nagano.jp","shiojiri.nagano.jp","suwa.nagano.jp","suzaka.nagano.jp","takagi.nagano.jp","takamori.nagano.jp","takayama.nagano.jp","tateshina.nagano.jp","tatsuno.nagano.jp","togakushi.nagano.jp","togura.nagano.jp","tomi.nagano.jp","ueda.nagano.jp","wada.nagano.jp","yamagata.nagano.jp","yamanouchi.nagano.jp","yasaka.nagano.jp","yasuoka.nagano.jp","chijiwa.nagasaki.jp","futsu.nagasaki.jp","goto.nagasaki.jp","hasami.nagasaki.jp","hirado.nagasaki.jp","iki.nagasaki.jp","isahaya.nagasaki.jp","kawatana.nagasaki.jp","kuchinotsu.nagasaki.jp","matsuura.nagasaki.jp","nagasaki.nagasaki.jp","obama.nagasaki.jp","omura.nagasaki.jp","oseto.nagasaki.jp","saikai.nagasaki.jp","sasebo.nagasaki.jp","seihi.nagasaki.jp","shimabara.nagasaki.jp","shinkamigoto.nagasaki.jp","togitsu.nagasaki.jp","tsushima.nagasaki.jp","unzen.nagasaki.jp","ando.nara.jp","gose.nara.jp","heguri.nara.jp","higashiyoshino.nara.jp","ikaruga.nara.jp","ikoma.nara.jp","kamikitayama.nara.jp","kanmaki.nara.jp","kashiba.nara.jp","kashihara.nara.jp","katsuragi.nara.jp","kawai.nara.jp","kawakami.nara.jp","kawanishi.nara.jp","koryo.nara.jp","kurotaki.nara.jp","mitsue.nara.jp","miyake.nara.jp","nara.nara.jp","nosegawa.nara.jp","oji.nara.jp","ouda.nara.jp","oyodo.nara.jp","sakurai.nara.jp","sango.nara.jp","shimoichi.nara.jp","shimokitayama.nara.jp","shinjo.nara.jp","soni.nara.jp","takatori.nara.jp","tawaramoto.nara.jp","tenkawa.nara.jp","tenri.nara.jp","uda.nara.jp","yamatokoriyama.nara.jp","yamatotakada.nara.jp","yamazoe.nara.jp","yoshino.nara.jp","aga.niigata.jp","agano.niigata.jp","gosen.niigata.jp","itoigawa.niigata.jp","izumozaki.niigata.jp","joetsu.niigata.jp","kamo.niigata.jp","kariwa.niigata.jp","kashiwazaki.niigata.jp","minamiuonuma.niigata.jp","mitsuke.niigata.jp","muika.niigata.jp","murakami.niigata.jp","myoko.niigata.jp","nagaoka.niigata.jp","niigata.niigata.jp","ojiya.niigata.jp","omi.niigata.jp","sado.niigata.jp","sanjo.niigata.jp","seiro.niigata.jp","seirou.niigata.jp","sekikawa.niigata.jp","shibata.niigata.jp","tagami.niigata.jp","tainai.niigata.jp","tochio.niigata.jp","tokamachi.niigata.jp","tsubame.niigata.jp","tsunan.niigata.jp","uonuma.niigata.jp","yahiko.niigata.jp","yoita.niigata.jp","yuzawa.niigata.jp","beppu.oita.jp","bungoono.oita.jp","bungotakada.oita.jp","hasama.oita.jp","hiji.oita.jp","himeshima.oita.jp","hita.oita.jp","kamitsue.oita.jp","kokonoe.oita.jp","kuju.oita.jp","kunisaki.oita.jp","kusu.oita.jp","oita.oita.jp","saiki.oita.jp","taketa.oita.jp","tsukumi.oita.jp","usa.oita.jp","usuki.oita.jp","yufu.oita.jp","akaiwa.okayama.jp","asakuchi.okayama.jp","bizen.okayama.jp","hayashima.okayama.jp","ibara.okayama.jp","kagamino.okayama.jp","kasaoka.okayama.jp","kibichuo.okayama.jp","kumenan.okayama.jp","kurashiki.okayama.jp","maniwa.okayama.jp","misaki.okayama.jp","nagi.okayama.jp","niimi.okayama.jp","nishiawakura.okayama.jp","okayama.okayama.jp","satosho.okayama.jp","setouchi.okayama.jp","shinjo.okayama.jp","shoo.okayama.jp","soja.okayama.jp","takahashi.okayama.jp","tamano.okayama.jp","tsuyama.okayama.jp","wake.okayama.jp","yakage.okayama.jp","aguni.okinawa.jp","ginowan.okinawa.jp","ginoza.okinawa.jp","gushikami.okinawa.jp","haebaru.okinawa.jp","higashi.okinawa.jp","hirara.okinawa.jp","iheya.okinawa.jp","ishigaki.okinawa.jp","ishikawa.okinawa.jp","itoman.okinawa.jp","izena.okinawa.jp","kadena.okinawa.jp","kin.okinawa.jp","kitadaito.okinawa.jp","kitanakagusuku.okinawa.jp","kumejima.okinawa.jp","kunigami.okinawa.jp","minamidaito.okinawa.jp","motobu.okinawa.jp","nago.okinawa.jp","naha.okinawa.jp","nakagusuku.okinawa.jp","nakijin.okinawa.jp","nanjo.okinawa.jp","nishihara.okinawa.jp","ogimi.okinawa.jp","okinawa.okinawa.jp","onna.okinawa.jp","shimoji.okinawa.jp","taketomi.okinawa.jp","tarama.okinawa.jp","tokashiki.okinawa.jp","tomigusuku.okinawa.jp","tonaki.okinawa.jp","urasoe.okinawa.jp","uruma.okinawa.jp","yaese.okinawa.jp","yomitan.okinawa.jp","yonabaru.okinawa.jp","yonaguni.okinawa.jp","zamami.okinawa.jp","abeno.osaka.jp","chihayaakasaka.osaka.jp","chuo.osaka.jp","daito.osaka.jp","fujiidera.osaka.jp","habikino.osaka.jp","hannan.osaka.jp","higashiosaka.osaka.jp","higashisumiyoshi.osaka.jp","higashiyodogawa.osaka.jp","hirakata.osaka.jp","ibaraki.osaka.jp","ikeda.osaka.jp","izumi.osaka.jp","izumiotsu.osaka.jp","izumisano.osaka.jp","kadoma.osaka.jp","kaizuka.osaka.jp","kanan.osaka.jp","kashiwara.osaka.jp","katano.osaka.jp","kawachinagano.osaka.jp","kishiwada.osaka.jp","kita.osaka.jp","kumatori.osaka.jp","matsubara.osaka.jp","minato.osaka.jp","minoh.osaka.jp","misaki.osaka.jp","moriguchi.osaka.jp","neyagawa.osaka.jp","nishi.osaka.jp","nose.osaka.jp","osakasayama.osaka.jp","sakai.osaka.jp","sayama.osaka.jp","sennan.osaka.jp","settsu.osaka.jp","shijonawate.osaka.jp","shimamoto.osaka.jp","suita.osaka.jp","tadaoka.osaka.jp","taishi.osaka.jp","tajiri.osaka.jp","takaishi.osaka.jp","takatsuki.osaka.jp","tondabayashi.osaka.jp","toyonaka.osaka.jp","toyono.osaka.jp","yao.osaka.jp","ariake.saga.jp","arita.saga.jp","fukudomi.saga.jp","genkai.saga.jp","hamatama.saga.jp","hizen.saga.jp","imari.saga.jp","kamimine.saga.jp","kanzaki.saga.jp","karatsu.saga.jp","kashima.saga.jp","kitagata.saga.jp","kitahata.saga.jp","kiyama.saga.jp","kouhoku.saga.jp","kyuragi.saga.jp","nishiarita.saga.jp","ogi.saga.jp","omachi.saga.jp","ouchi.saga.jp","saga.saga.jp","shiroishi.saga.jp","taku.saga.jp","tara.saga.jp","tosu.saga.jp","yoshinogari.saga.jp","arakawa.saitama.jp","asaka.saitama.jp","chichibu.saitama.jp","fujimi.saitama.jp","fujimino.saitama.jp","fukaya.saitama.jp","hanno.saitama.jp","hanyu.saitama.jp","hasuda.saitama.jp","hatogaya.saitama.jp","hatoyama.saitama.jp","hidaka.saitama.jp","higashichichibu.saitama.jp","higashimatsuyama.saitama.jp","honjo.saitama.jp","ina.saitama.jp","iruma.saitama.jp","iwatsuki.saitama.jp","kamiizumi.saitama.jp","kamikawa.saitama.jp","kamisato.saitama.jp","kasukabe.saitama.jp","kawagoe.saitama.jp","kawaguchi.saitama.jp","kawajima.saitama.jp","kazo.saitama.jp","kitamoto.saitama.jp","koshigaya.saitama.jp","kounosu.saitama.jp","kuki.saitama.jp","kumagaya.saitama.jp","matsubushi.saitama.jp","minano.saitama.jp","misato.saitama.jp","miyashiro.saitama.jp","miyoshi.saitama.jp","moroyama.saitama.jp","nagatoro.saitama.jp","namegawa.saitama.jp","niiza.saitama.jp","ogano.saitama.jp","ogawa.saitama.jp","ogose.saitama.jp","okegawa.saitama.jp","omiya.saitama.jp","otaki.saitama.jp","ranzan.saitama.jp","ryokami.saitama.jp","saitama.saitama.jp","sakado.saitama.jp","satte.saitama.jp","sayama.saitama.jp","shiki.saitama.jp","shiraoka.saitama.jp","soka.saitama.jp","sugito.saitama.jp","toda.saitama.jp","tokigawa.saitama.jp","tokorozawa.saitama.jp","tsurugashima.saitama.jp","urawa.saitama.jp","warabi.saitama.jp","yashio.saitama.jp","yokoze.saitama.jp","yono.saitama.jp","yorii.saitama.jp","yoshida.saitama.jp","yoshikawa.saitama.jp","yoshimi.saitama.jp","aisho.shiga.jp","gamo.shiga.jp","higashiomi.shiga.jp","hikone.shiga.jp","koka.shiga.jp","konan.shiga.jp","kosei.shiga.jp","koto.shiga.jp","kusatsu.shiga.jp","maibara.shiga.jp","moriyama.shiga.jp","nagahama.shiga.jp","nishiazai.shiga.jp","notogawa.shiga.jp","omihachiman.shiga.jp","otsu.shiga.jp","ritto.shiga.jp","ryuoh.shiga.jp","takashima.shiga.jp","takatsuki.shiga.jp","torahime.shiga.jp","toyosato.shiga.jp","yasu.shiga.jp","akagi.shimane.jp","ama.shimane.jp","gotsu.shimane.jp","hamada.shimane.jp","higashiizumo.shimane.jp","hikawa.shimane.jp","hikimi.shimane.jp","izumo.shimane.jp","kakinoki.shimane.jp","masuda.shimane.jp","matsue.shimane.jp","misato.shimane.jp","nishinoshima.shimane.jp","ohda.shimane.jp","okinoshima.shimane.jp","okuizumo.shimane.jp","shimane.shimane.jp","tamayu.shimane.jp","tsuwano.shimane.jp","unnan.shimane.jp","yakumo.shimane.jp","yasugi.shimane.jp","yatsuka.shimane.jp","arai.shizuoka.jp","atami.shizuoka.jp","fuji.shizuoka.jp","fujieda.shizuoka.jp","fujikawa.shizuoka.jp","fujinomiya.shizuoka.jp","fukuroi.shizuoka.jp","gotemba.shizuoka.jp","haibara.shizuoka.jp","hamamatsu.shizuoka.jp","higashiizu.shizuoka.jp","ito.shizuoka.jp","iwata.shizuoka.jp","izu.shizuoka.jp","izunokuni.shizuoka.jp","kakegawa.shizuoka.jp","kannami.shizuoka.jp","kawanehon.shizuoka.jp","kawazu.shizuoka.jp","kikugawa.shizuoka.jp","kosai.shizuoka.jp","makinohara.shizuoka.jp","matsuzaki.shizuoka.jp","minamiizu.shizuoka.jp","mishima.shizuoka.jp","morimachi.shizuoka.jp","nishiizu.shizuoka.jp","numazu.shizuoka.jp","omaezaki.shizuoka.jp","shimada.shizuoka.jp","shimizu.shizuoka.jp","shimoda.shizuoka.jp","shizuoka.shizuoka.jp","susono.shizuoka.jp","yaizu.shizuoka.jp","yoshida.shizuoka.jp","ashikaga.tochigi.jp","bato.tochigi.jp","haga.tochigi.jp","ichikai.tochigi.jp","iwafune.tochigi.jp","kaminokawa.tochigi.jp","kanuma.tochigi.jp","karasuyama.tochigi.jp","kuroiso.tochigi.jp","mashiko.tochigi.jp","mibu.tochigi.jp","moka.tochigi.jp","motegi.tochigi.jp","nasu.tochigi.jp","nasushiobara.tochigi.jp","nikko.tochigi.jp","nishikata.tochigi.jp","nogi.tochigi.jp","ohira.tochigi.jp","ohtawara.tochigi.jp","oyama.tochigi.jp","sakura.tochigi.jp","sano.tochigi.jp","shimotsuke.tochigi.jp","shioya.tochigi.jp","takanezawa.tochigi.jp","tochigi.tochigi.jp","tsuga.tochigi.jp","ujiie.tochigi.jp","utsunomiya.tochigi.jp","yaita.tochigi.jp","aizumi.tokushima.jp","anan.tokushima.jp","ichiba.tokushima.jp","itano.tokushima.jp","kainan.tokushima.jp","komatsushima.tokushima.jp","matsushige.tokushima.jp","mima.tokushima.jp","minami.tokushima.jp","miyoshi.tokushima.jp","mugi.tokushima.jp","nakagawa.tokushima.jp","naruto.tokushima.jp","sanagochi.tokushima.jp","shishikui.tokushima.jp","tokushima.tokushima.jp","wajiki.tokushima.jp","adachi.tokyo.jp","akiruno.tokyo.jp","akishima.tokyo.jp","aogashima.tokyo.jp","arakawa.tokyo.jp","bunkyo.tokyo.jp","chiyoda.tokyo.jp","chofu.tokyo.jp","chuo.tokyo.jp","edogawa.tokyo.jp","fuchu.tokyo.jp","fussa.tokyo.jp","hachijo.tokyo.jp","hachioji.tokyo.jp","hamura.tokyo.jp","higashikurume.tokyo.jp","higashimurayama.tokyo.jp","higashiyamato.tokyo.jp","hino.tokyo.jp","hinode.tokyo.jp","hinohara.tokyo.jp","inagi.tokyo.jp","itabashi.tokyo.jp","katsushika.tokyo.jp","kita.tokyo.jp","kiyose.tokyo.jp","kodaira.tokyo.jp","koganei.tokyo.jp","kokubunji.tokyo.jp","komae.tokyo.jp","koto.tokyo.jp","kouzushima.tokyo.jp","kunitachi.tokyo.jp","machida.tokyo.jp","meguro.tokyo.jp","minato.tokyo.jp","mitaka.tokyo.jp","mizuho.tokyo.jp","musashimurayama.tokyo.jp","musashino.tokyo.jp","nakano.tokyo.jp","nerima.tokyo.jp","ogasawara.tokyo.jp","okutama.tokyo.jp","ome.tokyo.jp","oshima.tokyo.jp","ota.tokyo.jp","setagaya.tokyo.jp","shibuya.tokyo.jp","shinagawa.tokyo.jp","shinjuku.tokyo.jp","suginami.tokyo.jp","sumida.tokyo.jp","tachikawa.tokyo.jp","taito.tokyo.jp","tama.tokyo.jp","toshima.tokyo.jp","chizu.tottori.jp","hino.tottori.jp","kawahara.tottori.jp","koge.tottori.jp","kotoura.tottori.jp","misasa.tottori.jp","nanbu.tottori.jp","nichinan.tottori.jp","sakaiminato.tottori.jp","tottori.tottori.jp","wakasa.tottori.jp","yazu.tottori.jp","yonago.tottori.jp","asahi.toyama.jp","fuchu.toyama.jp","fukumitsu.toyama.jp","funahashi.toyama.jp","himi.toyama.jp","imizu.toyama.jp","inami.toyama.jp","johana.toyama.jp","kamiichi.toyama.jp","kurobe.toyama.jp","nakaniikawa.toyama.jp","namerikawa.toyama.jp","nanto.toyama.jp","nyuzen.toyama.jp","oyabe.toyama.jp","taira.toyama.jp","takaoka.toyama.jp","tateyama.toyama.jp","toga.toyama.jp","tonami.toyama.jp","toyama.toyama.jp","unazuki.toyama.jp","uozu.toyama.jp","yamada.toyama.jp","arida.wakayama.jp","aridagawa.wakayama.jp","gobo.wakayama.jp","hashimoto.wakayama.jp","hidaka.wakayama.jp","hirogawa.wakayama.jp","inami.wakayama.jp","iwade.wakayama.jp","kainan.wakayama.jp","kamitonda.wakayama.jp","katsuragi.wakayama.jp","kimino.wakayama.jp","kinokawa.wakayama.jp","kitayama.wakayama.jp","koya.wakayama.jp","koza.wakayama.jp","kozagawa.wakayama.jp","kudoyama.wakayama.jp","kushimoto.wakayama.jp","mihama.wakayama.jp","misato.wakayama.jp","nachikatsuura.wakayama.jp","shingu.wakayama.jp","shirahama.wakayama.jp","taiji.wakayama.jp","tanabe.wakayama.jp","wakayama.wakayama.jp","yuasa.wakayama.jp","yura.wakayama.jp","asahi.yamagata.jp","funagata.yamagata.jp","higashine.yamagata.jp","iide.yamagata.jp","kahoku.yamagata.jp","kaminoyama.yamagata.jp","kaneyama.yamagata.jp","kawanishi.yamagata.jp","mamurogawa.yamagata.jp","mikawa.yamagata.jp","murayama.yamagata.jp","nagai.yamagata.jp","nakayama.yamagata.jp","nanyo.yamagata.jp","nishikawa.yamagata.jp","obanazawa.yamagata.jp","oe.yamagata.jp","oguni.yamagata.jp","ohkura.yamagata.jp","oishida.yamagata.jp","sagae.yamagata.jp","sakata.yamagata.jp","sakegawa.yamagata.jp","shinjo.yamagata.jp","shirataka.yamagata.jp","shonai.yamagata.jp","takahata.yamagata.jp","tendo.yamagata.jp","tozawa.yamagata.jp","tsuruoka.yamagata.jp","yamagata.yamagata.jp","yamanobe.yamagata.jp","yonezawa.yamagata.jp","yuza.yamagata.jp","abu.yamaguchi.jp","hagi.yamaguchi.jp","hikari.yamaguchi.jp","hofu.yamaguchi.jp","iwakuni.yamaguchi.jp","kudamatsu.yamaguchi.jp","mitou.yamaguchi.jp","nagato.yamaguchi.jp","oshima.yamaguchi.jp","shimonoseki.yamaguchi.jp","shunan.yamaguchi.jp","tabuse.yamaguchi.jp","tokuyama.yamaguchi.jp","toyota.yamaguchi.jp","ube.yamaguchi.jp","yuu.yamaguchi.jp","chuo.yamanashi.jp","doshi.yamanashi.jp","fuefuki.yamanashi.jp","fujikawa.yamanashi.jp","fujikawaguchiko.yamanashi.jp","fujiyoshida.yamanashi.jp","hayakawa.yamanashi.jp","hokuto.yamanashi.jp","ichikawamisato.yamanashi.jp","kai.yamanashi.jp","kofu.yamanashi.jp","koshu.yamanashi.jp","kosuge.yamanashi.jp","minami-alps.yamanashi.jp","minobu.yamanashi.jp","nakamichi.yamanashi.jp","nanbu.yamanashi.jp","narusawa.yamanashi.jp","nirasaki.yamanashi.jp","nishikatsura.yamanashi.jp","oshino.yamanashi.jp","otsuki.yamanashi.jp","showa.yamanashi.jp","tabayama.yamanashi.jp","tsuru.yamanashi.jp","uenohara.yamanashi.jp","yamanakako.yamanashi.jp","yamanashi.yamanashi.jp","ke","ac.ke","co.ke","go.ke","info.ke","me.ke","mobi.ke","ne.ke","or.ke","sc.ke","kg","org.kg","net.kg","com.kg","edu.kg","gov.kg","mil.kg","*.kh","ki","edu.ki","biz.ki","net.ki","org.ki","gov.ki","info.ki","com.ki","km","org.km","nom.km","gov.km","prd.km","tm.km","edu.km","mil.km","ass.km","com.km","coop.km","asso.km","presse.km","medecin.km","notaires.km","pharmaciens.km","veterinaire.km","gouv.km","kn","net.kn","org.kn","edu.kn","gov.kn","kp","com.kp","edu.kp","gov.kp","org.kp","rep.kp","tra.kp","kr","ac.kr","co.kr","es.kr","go.kr","hs.kr","kg.kr","mil.kr","ms.kr","ne.kr","or.kr","pe.kr","re.kr","sc.kr","busan.kr","chungbuk.kr","chungnam.kr","daegu.kr","daejeon.kr","gangwon.kr","gwangju.kr","gyeongbuk.kr","gyeonggi.kr","gyeongnam.kr","incheon.kr","jeju.kr","jeonbuk.kr","jeonnam.kr","seoul.kr","ulsan.kr","kw","com.kw","edu.kw","emb.kw","gov.kw","ind.kw","net.kw","org.kw","ky","edu.ky","gov.ky","com.ky","org.ky","net.ky","kz","org.kz","edu.kz","net.kz","gov.kz","mil.kz","com.kz","la","int.la","net.la","info.la","edu.la","gov.la","per.la","com.la","org.la","lb","com.lb","edu.lb","gov.lb","net.lb","org.lb","lc","com.lc","net.lc","co.lc","org.lc","edu.lc","gov.lc","li","lk","gov.lk","sch.lk","net.lk","int.lk","com.lk","org.lk","edu.lk","ngo.lk","soc.lk","web.lk","ltd.lk","assn.lk","grp.lk","hotel.lk","ac.lk","lr","com.lr","edu.lr","gov.lr","org.lr","net.lr","ls","ac.ls","biz.ls","co.ls","edu.ls","gov.ls","info.ls","net.ls","org.ls","sc.ls","lt","gov.lt","lu","lv","com.lv","edu.lv","gov.lv","org.lv","mil.lv","id.lv","net.lv","asn.lv","conf.lv","ly","com.ly","net.ly","gov.ly","plc.ly","edu.ly","sch.ly","med.ly","org.ly","id.ly","ma","co.ma","net.ma","gov.ma","org.ma","ac.ma","press.ma","mc","tm.mc","asso.mc","md","me","co.me","net.me","org.me","edu.me","ac.me","gov.me","its.me","priv.me","mg","org.mg","nom.mg","gov.mg","prd.mg","tm.mg","edu.mg","mil.mg","com.mg","co.mg","mh","mil","mk","com.mk","org.mk","net.mk","edu.mk","gov.mk","inf.mk","name.mk","ml","com.ml","edu.ml","gouv.ml","gov.ml","net.ml","org.ml","presse.ml","*.mm","mn","gov.mn","edu.mn","org.mn","mo","com.mo","net.mo","org.mo","edu.mo","gov.mo","mobi","mp","mq","mr","gov.mr","ms","com.ms","edu.ms","gov.ms","net.ms","org.ms","mt","com.mt","edu.mt","net.mt","org.mt","mu","com.mu","net.mu","org.mu","gov.mu","ac.mu","co.mu","or.mu","museum","academy.museum","agriculture.museum","air.museum","airguard.museum","alabama.museum","alaska.museum","amber.museum","ambulance.museum","american.museum","americana.museum","americanantiques.museum","americanart.museum","amsterdam.museum","and.museum","annefrank.museum","anthro.museum","anthropology.museum","antiques.museum","aquarium.museum","arboretum.museum","archaeological.museum","archaeology.museum","architecture.museum","art.museum","artanddesign.museum","artcenter.museum","artdeco.museum","arteducation.museum","artgallery.museum","arts.museum","artsandcrafts.museum","asmatart.museum","assassination.museum","assisi.museum","association.museum","astronomy.museum","atlanta.museum","austin.museum","australia.museum","automotive.museum","aviation.museum","axis.museum","badajoz.museum","baghdad.museum","bahn.museum","bale.museum","baltimore.museum","barcelona.museum","baseball.museum","basel.museum","baths.museum","bauern.museum","beauxarts.museum","beeldengeluid.museum","bellevue.museum","bergbau.museum","berkeley.museum","berlin.museum","bern.museum","bible.museum","bilbao.museum","bill.museum","birdart.museum","birthplace.museum","bonn.museum","boston.museum","botanical.museum","botanicalgarden.museum","botanicgarden.museum","botany.museum","brandywinevalley.museum","brasil.museum","bristol.museum","british.museum","britishcolumbia.museum","broadcast.museum","brunel.museum","brussel.museum","brussels.museum","bruxelles.museum","building.museum","burghof.museum","bus.museum","bushey.museum","cadaques.museum","california.museum","cambridge.museum","can.museum","canada.museum","capebreton.museum","carrier.museum","cartoonart.museum","casadelamoneda.museum","castle.museum","castres.museum","celtic.museum","center.museum","chattanooga.museum","cheltenham.museum","chesapeakebay.museum","chicago.museum","children.museum","childrens.museum","childrensgarden.museum","chiropractic.museum","chocolate.museum","christiansburg.museum","cincinnati.museum","cinema.museum","circus.museum","civilisation.museum","civilization.museum","civilwar.museum","clinton.museum","clock.museum","coal.museum","coastaldefence.museum","cody.museum","coldwar.museum","collection.museum","colonialwilliamsburg.museum","coloradoplateau.museum","columbia.museum","columbus.museum","communication.museum","communications.museum","community.museum","computer.museum","computerhistory.museum","comunicações.museum","contemporary.museum","contemporaryart.museum","convent.museum","copenhagen.museum","corporation.museum","correios-e-telecomunicações.museum","corvette.museum","costume.museum","countryestate.museum","county.museum","crafts.museum","cranbrook.museum","creation.museum","cultural.museum","culturalcenter.museum","culture.museum","cyber.museum","cymru.museum","dali.museum","dallas.museum","database.museum","ddr.museum","decorativearts.museum","delaware.museum","delmenhorst.museum","denmark.museum","depot.museum","design.museum","detroit.museum","dinosaur.museum","discovery.museum","dolls.museum","donostia.museum","durham.museum","eastafrica.museum","eastcoast.museum","education.museum","educational.museum","egyptian.museum","eisenbahn.museum","elburg.museum","elvendrell.museum","embroidery.museum","encyclopedic.museum","england.museum","entomology.museum","environment.museum","environmentalconservation.museum","epilepsy.museum","essex.museum","estate.museum","ethnology.museum","exeter.museum","exhibition.museum","family.museum","farm.museum","farmequipment.museum","farmers.museum","farmstead.museum","field.museum","figueres.museum","filatelia.museum","film.museum","fineart.museum","finearts.museum","finland.museum","flanders.museum","florida.museum","force.museum","fortmissoula.museum","fortworth.museum","foundation.museum","francaise.museum","frankfurt.museum","franziskaner.museum","freemasonry.museum","freiburg.museum","fribourg.museum","frog.museum","fundacio.museum","furniture.museum","gallery.museum","garden.museum","gateway.museum","geelvinck.museum","gemological.museum","geology.museum","georgia.museum","giessen.museum","glas.museum","glass.museum","gorge.museum","grandrapids.museum","graz.museum","guernsey.museum","halloffame.museum","hamburg.museum","handson.museum","harvestcelebration.museum","hawaii.museum","health.museum","heimatunduhren.museum","hellas.museum","helsinki.museum","hembygdsforbund.museum","heritage.museum","histoire.museum","historical.museum","historicalsociety.museum","historichouses.museum","historisch.museum","historisches.museum","history.museum","historyofscience.museum","horology.museum","house.museum","humanities.museum","illustration.museum","imageandsound.museum","indian.museum","indiana.museum","indianapolis.museum","indianmarket.museum","intelligence.museum","interactive.museum","iraq.museum","iron.museum","isleofman.museum","jamison.museum","jefferson.museum","jerusalem.museum","jewelry.museum","jewish.museum","jewishart.museum","jfk.museum","journalism.museum","judaica.museum","judygarland.museum","juedisches.museum","juif.museum","karate.museum","karikatur.museum","kids.museum","koebenhavn.museum","koeln.museum","kunst.museum","kunstsammlung.museum","kunstunddesign.museum","labor.museum","labour.museum","lajolla.museum","lancashire.museum","landes.museum","lans.museum","läns.museum","larsson.museum","lewismiller.museum","lincoln.museum","linz.museum","living.museum","livinghistory.museum","localhistory.museum","london.museum","losangeles.museum","louvre.museum","loyalist.museum","lucerne.museum","luxembourg.museum","luzern.museum","mad.museum","madrid.museum","mallorca.museum","manchester.museum","mansion.museum","mansions.museum","manx.museum","marburg.museum","maritime.museum","maritimo.museum","maryland.museum","marylhurst.museum","media.museum","medical.museum","medizinhistorisches.museum","meeres.museum","memorial.museum","mesaverde.museum","michigan.museum","midatlantic.museum","military.museum","mill.museum","miners.museum","mining.museum","minnesota.museum","missile.museum","missoula.museum","modern.museum","moma.museum","money.museum","monmouth.museum","monticello.museum","montreal.museum","moscow.museum","motorcycle.museum","muenchen.museum","muenster.museum","mulhouse.museum","muncie.museum","museet.museum","museumcenter.museum","museumvereniging.museum","music.museum","national.museum","nationalfirearms.museum","nationalheritage.museum","nativeamerican.museum","naturalhistory.museum","naturalhistorymuseum.museum","naturalsciences.museum","nature.museum","naturhistorisches.museum","natuurwetenschappen.museum","naumburg.museum","naval.museum","nebraska.museum","neues.museum","newhampshire.museum","newjersey.museum","newmexico.museum","newport.museum","newspaper.museum","newyork.museum","niepce.museum","norfolk.museum","north.museum","nrw.museum","nyc.museum","nyny.museum","oceanographic.museum","oceanographique.museum","omaha.museum","online.museum","ontario.museum","openair.museum","oregon.museum","oregontrail.museum","otago.museum","oxford.museum","pacific.museum","paderborn.museum","palace.museum","paleo.museum","palmsprings.museum","panama.museum","paris.museum","pasadena.museum","pharmacy.museum","philadelphia.museum","philadelphiaarea.museum","philately.museum","phoenix.museum","photography.museum","pilots.museum","pittsburgh.museum","planetarium.museum","plantation.museum","plants.museum","plaza.museum","portal.museum","portland.museum","portlligat.museum","posts-and-telecommunications.museum","preservation.museum","presidio.museum","press.museum","project.museum","public.museum","pubol.museum","quebec.museum","railroad.museum","railway.museum","research.museum","resistance.museum","riodejaneiro.museum","rochester.museum","rockart.museum","roma.museum","russia.museum","saintlouis.museum","salem.museum","salvadordali.museum","salzburg.museum","sandiego.museum","sanfrancisco.museum","santabarbara.museum","santacruz.museum","santafe.museum","saskatchewan.museum","satx.museum","savannahga.museum","schlesisches.museum","schoenbrunn.museum","schokoladen.museum","school.museum","schweiz.museum","science.museum","scienceandhistory.museum","scienceandindustry.museum","sciencecenter.museum","sciencecenters.museum","science-fiction.museum","sciencehistory.museum","sciences.museum","sciencesnaturelles.museum","scotland.museum","seaport.museum","settlement.museum","settlers.museum","shell.museum","sherbrooke.museum","sibenik.museum","silk.museum","ski.museum","skole.museum","society.museum","sologne.museum","soundandvision.museum","southcarolina.museum","southwest.museum","space.museum","spy.museum","square.museum","stadt.museum","stalbans.museum","starnberg.museum","state.museum","stateofdelaware.museum","station.museum","steam.museum","steiermark.museum","stjohn.museum","stockholm.museum","stpetersburg.museum","stuttgart.museum","suisse.museum","surgeonshall.museum","surrey.museum","svizzera.museum","sweden.museum","sydney.museum","tank.museum","tcm.museum","technology.museum","telekommunikation.museum","television.museum","texas.museum","textile.museum","theater.museum","time.museum","timekeeping.museum","topology.museum","torino.museum","touch.museum","town.museum","transport.museum","tree.museum","trolley.museum","trust.museum","trustee.museum","uhren.museum","ulm.museum","undersea.museum","university.museum","usa.museum","usantiques.museum","usarts.museum","uscountryestate.museum","usculture.museum","usdecorativearts.museum","usgarden.museum","ushistory.museum","ushuaia.museum","uslivinghistory.museum","utah.museum","uvic.museum","valley.museum","vantaa.museum","versailles.museum","viking.museum","village.museum","virginia.museum","virtual.museum","virtuel.museum","vlaanderen.museum","volkenkunde.museum","wales.museum","wallonie.museum","war.museum","washingtondc.museum","watchandclock.museum","watch-and-clock.museum","western.museum","westfalen.museum","whaling.museum","wildlife.museum","williamsburg.museum","windmill.museum","workshop.museum","york.museum","yorkshire.museum","yosemite.museum","youth.museum","zoological.museum","zoology.museum","ירושלים.museum","иком.museum","mv","aero.mv","biz.mv","com.mv","coop.mv","edu.mv","gov.mv","info.mv","int.mv","mil.mv","museum.mv","name.mv","net.mv","org.mv","pro.mv","mw","ac.mw","biz.mw","co.mw","com.mw","coop.mw","edu.mw","gov.mw","int.mw","museum.mw","net.mw","org.mw","mx","com.mx","org.mx","gob.mx","edu.mx","net.mx","my","com.my","net.my","org.my","gov.my","edu.my","mil.my","name.my","mz","ac.mz","adv.mz","co.mz","edu.mz","gov.mz","mil.mz","net.mz","org.mz","na","info.na","pro.na","name.na","school.na","or.na","dr.na","us.na","mx.na","ca.na","in.na","cc.na","tv.na","ws.na","mobi.na","co.na","com.na","org.na","name","nc","asso.nc","nom.nc","ne","net","nf","com.nf","net.nf","per.nf","rec.nf","web.nf","arts.nf","firm.nf","info.nf","other.nf","store.nf","ng","com.ng","edu.ng","gov.ng","i.ng","mil.ng","mobi.ng","name.ng","net.ng","org.ng","sch.ng","ni","ac.ni","biz.ni","co.ni","com.ni","edu.ni","gob.ni","in.ni","info.ni","int.ni","mil.ni","net.ni","nom.ni","org.ni","web.ni","nl","no","fhs.no","vgs.no","fylkesbibl.no","folkebibl.no","museum.no","idrett.no","priv.no","mil.no","stat.no","dep.no","kommune.no","herad.no","aa.no","ah.no","bu.no","fm.no","hl.no","hm.no","jan-mayen.no","mr.no","nl.no","nt.no","of.no","ol.no","oslo.no","rl.no","sf.no","st.no","svalbard.no","tm.no","tr.no","va.no","vf.no","gs.aa.no","gs.ah.no","gs.bu.no","gs.fm.no","gs.hl.no","gs.hm.no","gs.jan-mayen.no","gs.mr.no","gs.nl.no","gs.nt.no","gs.of.no","gs.ol.no","gs.oslo.no","gs.rl.no","gs.sf.no","gs.st.no","gs.svalbard.no","gs.tm.no","gs.tr.no","gs.va.no","gs.vf.no","akrehamn.no","åkrehamn.no","algard.no","ålgård.no","arna.no","brumunddal.no","bryne.no","bronnoysund.no","brønnøysund.no","drobak.no","drøbak.no","egersund.no","fetsund.no","floro.no","florø.no","fredrikstad.no","hokksund.no","honefoss.no","hønefoss.no","jessheim.no","jorpeland.no","jørpeland.no","kirkenes.no","kopervik.no","krokstadelva.no","langevag.no","langevåg.no","leirvik.no","mjondalen.no","mjøndalen.no","mo-i-rana.no","mosjoen.no","mosjøen.no","nesoddtangen.no","orkanger.no","osoyro.no","osøyro.no","raholt.no","råholt.no","sandnessjoen.no","sandnessjøen.no","skedsmokorset.no","slattum.no","spjelkavik.no","stathelle.no","stavern.no","stjordalshalsen.no","stjørdalshalsen.no","tananger.no","tranby.no","vossevangen.no","afjord.no","åfjord.no","agdenes.no","al.no","ål.no","alesund.no","ålesund.no","alstahaug.no","alta.no","áltá.no","alaheadju.no","álaheadju.no","alvdal.no","amli.no","åmli.no","amot.no","åmot.no","andebu.no","andoy.no","andøy.no","andasuolo.no","ardal.no","årdal.no","aremark.no","arendal.no","ås.no","aseral.no","åseral.no","asker.no","askim.no","askvoll.no","askoy.no","askøy.no","asnes.no","åsnes.no","audnedaln.no","aukra.no","aure.no","aurland.no","aurskog-holand.no","aurskog-høland.no","austevoll.no","austrheim.no","averoy.no","averøy.no","balestrand.no","ballangen.no","balat.no","bálát.no","balsfjord.no","bahccavuotna.no","báhccavuotna.no","bamble.no","bardu.no","beardu.no","beiarn.no","bajddar.no","bájddar.no","baidar.no","báidár.no","berg.no","bergen.no","berlevag.no","berlevåg.no","bearalvahki.no","bearalváhki.no","bindal.no","birkenes.no","bjarkoy.no","bjarkøy.no","bjerkreim.no","bjugn.no","bodo.no","bodø.no","badaddja.no","bådåddjå.no","budejju.no","bokn.no","bremanger.no","bronnoy.no","brønnøy.no","bygland.no","bykle.no","barum.no","bærum.no","bo.telemark.no","bø.telemark.no","bo.nordland.no","bø.nordland.no","bievat.no","bievát.no","bomlo.no","bømlo.no","batsfjord.no","båtsfjord.no","bahcavuotna.no","báhcavuotna.no","dovre.no","drammen.no","drangedal.no","dyroy.no","dyrøy.no","donna.no","dønna.no","eid.no","eidfjord.no","eidsberg.no","eidskog.no","eidsvoll.no","eigersund.no","elverum.no","enebakk.no","engerdal.no","etne.no","etnedal.no","evenes.no","evenassi.no","evenášši.no","evje-og-hornnes.no","farsund.no","fauske.no","fuossko.no","fuoisku.no","fedje.no","fet.no","finnoy.no","finnøy.no","fitjar.no","fjaler.no","fjell.no","flakstad.no","flatanger.no","flekkefjord.no","flesberg.no","flora.no","fla.no","flå.no","folldal.no","forsand.no","fosnes.no","frei.no","frogn.no","froland.no","frosta.no","frana.no","fræna.no","froya.no","frøya.no","fusa.no","fyresdal.no","forde.no","førde.no","gamvik.no","gangaviika.no","gáŋgaviika.no","gaular.no","gausdal.no","gildeskal.no","gildeskål.no","giske.no","gjemnes.no","gjerdrum.no","gjerstad.no","gjesdal.no","gjovik.no","gjøvik.no","gloppen.no","gol.no","gran.no","grane.no","granvin.no","gratangen.no","grimstad.no","grong.no","kraanghke.no","kråanghke.no","grue.no","gulen.no","hadsel.no","halden.no","halsa.no","hamar.no","hamaroy.no","habmer.no","hábmer.no","hapmir.no","hápmir.no","hammerfest.no","hammarfeasta.no","hámmárfeasta.no","haram.no","hareid.no","harstad.no","hasvik.no","aknoluokta.no","ákŋoluokta.no","hattfjelldal.no","aarborte.no","haugesund.no","hemne.no","hemnes.no","hemsedal.no","heroy.more-og-romsdal.no","herøy.møre-og-romsdal.no","heroy.nordland.no","herøy.nordland.no","hitra.no","hjartdal.no","hjelmeland.no","hobol.no","hobøl.no","hof.no","hol.no","hole.no","holmestrand.no","holtalen.no","holtålen.no","hornindal.no","horten.no","hurdal.no","hurum.no","hvaler.no","hyllestad.no","hagebostad.no","hægebostad.no","hoyanger.no","høyanger.no","hoylandet.no","høylandet.no","ha.no","hå.no","ibestad.no","inderoy.no","inderøy.no","iveland.no","jevnaker.no","jondal.no","jolster.no","jølster.no","karasjok.no","karasjohka.no","kárášjohka.no","karlsoy.no","galsa.no","gálsá.no","karmoy.no","karmøy.no","kautokeino.no","guovdageaidnu.no","klepp.no","klabu.no","klæbu.no","kongsberg.no","kongsvinger.no","kragero.no","kragerø.no","kristiansand.no","kristiansund.no","krodsherad.no","krødsherad.no","kvalsund.no","rahkkeravju.no","ráhkkerávju.no","kvam.no","kvinesdal.no","kvinnherad.no","kviteseid.no","kvitsoy.no","kvitsøy.no","kvafjord.no","kvæfjord.no","giehtavuoatna.no","kvanangen.no","kvænangen.no","navuotna.no","návuotna.no","kafjord.no","kåfjord.no","gaivuotna.no","gáivuotna.no","larvik.no","lavangen.no","lavagis.no","loabat.no","loabát.no","lebesby.no","davvesiida.no","leikanger.no","leirfjord.no","leka.no","leksvik.no","lenvik.no","leangaviika.no","leaŋgaviika.no","lesja.no","levanger.no","lier.no","lierne.no","lillehammer.no","lillesand.no","lindesnes.no","lindas.no","lindås.no","lom.no","loppa.no","lahppi.no","láhppi.no","lund.no","lunner.no","luroy.no","lurøy.no","luster.no","lyngdal.no","lyngen.no","ivgu.no","lardal.no","lerdal.no","lærdal.no","lodingen.no","lødingen.no","lorenskog.no","lørenskog.no","loten.no","løten.no","malvik.no","masoy.no","måsøy.no","muosat.no","muosát.no","mandal.no","marker.no","marnardal.no","masfjorden.no","meland.no","meldal.no","melhus.no","meloy.no","meløy.no","meraker.no","meråker.no","moareke.no","moåreke.no","midsund.no","midtre-gauldal.no","modalen.no","modum.no","molde.no","moskenes.no","moss.no","mosvik.no","malselv.no","målselv.no","malatvuopmi.no","málatvuopmi.no","namdalseid.no","aejrie.no","namsos.no","namsskogan.no","naamesjevuemie.no","nååmesjevuemie.no","laakesvuemie.no","nannestad.no","narvik.no","narviika.no","naustdal.no","nedre-eiker.no","nes.akershus.no","nes.buskerud.no","nesna.no","nesodden.no","nesseby.no","unjarga.no","unjárga.no","nesset.no","nissedal.no","nittedal.no","nord-aurdal.no","nord-fron.no","nord-odal.no","norddal.no","nordkapp.no","davvenjarga.no","davvenjárga.no","nordre-land.no","nordreisa.no","raisa.no","ráisa.no","nore-og-uvdal.no","notodden.no","naroy.no","nærøy.no","notteroy.no","nøtterøy.no","odda.no","oksnes.no","øksnes.no","oppdal.no","oppegard.no","oppegård.no","orkdal.no","orland.no","ørland.no","orskog.no","ørskog.no","orsta.no","ørsta.no","os.hedmark.no","os.hordaland.no","osen.no","osteroy.no","osterøy.no","ostre-toten.no","østre-toten.no","overhalla.no","ovre-eiker.no","øvre-eiker.no","oyer.no","øyer.no","oygarden.no","øygarden.no","oystre-slidre.no","øystre-slidre.no","porsanger.no","porsangu.no","porsáŋgu.no","porsgrunn.no","radoy.no","radøy.no","rakkestad.no","rana.no","ruovat.no","randaberg.no","rauma.no","rendalen.no","rennebu.no","rennesoy.no","rennesøy.no","rindal.no","ringebu.no","ringerike.no","ringsaker.no","rissa.no","risor.no","risør.no","roan.no","rollag.no","rygge.no","ralingen.no","rælingen.no","rodoy.no","rødøy.no","romskog.no","rømskog.no","roros.no","røros.no","rost.no","røst.no","royken.no","røyken.no","royrvik.no","røyrvik.no","rade.no","råde.no","salangen.no","siellak.no","saltdal.no","salat.no","sálát.no","sálat.no","samnanger.no","sande.more-og-romsdal.no","sande.møre-og-romsdal.no","sande.vestfold.no","sandefjord.no","sandnes.no","sandoy.no","sandøy.no","sarpsborg.no","sauda.no","sauherad.no","sel.no","selbu.no","selje.no","seljord.no","sigdal.no","siljan.no","sirdal.no","skaun.no","skedsmo.no","ski.no","skien.no","skiptvet.no","skjervoy.no","skjervøy.no","skierva.no","skiervá.no","skjak.no","skjåk.no","skodje.no","skanland.no","skånland.no","skanit.no","skánit.no","smola.no","smøla.no","snillfjord.no","snasa.no","snåsa.no","snoasa.no","snaase.no","snåase.no","sogndal.no","sokndal.no","sola.no","solund.no","songdalen.no","sortland.no","spydeberg.no","stange.no","stavanger.no","steigen.no","steinkjer.no","stjordal.no","stjørdal.no","stokke.no","stor-elvdal.no","stord.no","stordal.no","storfjord.no","omasvuotna.no","strand.no","stranda.no","stryn.no","sula.no","suldal.no","sund.no","sunndal.no","surnadal.no","sveio.no","svelvik.no","sykkylven.no","sogne.no","søgne.no","somna.no","sømna.no","sondre-land.no","søndre-land.no","sor-aurdal.no","sør-aurdal.no","sor-fron.no","sør-fron.no","sor-odal.no","sør-odal.no","sor-varanger.no","sør-varanger.no","matta-varjjat.no","mátta-várjjat.no","sorfold.no","sørfold.no","sorreisa.no","sørreisa.no","sorum.no","sørum.no","tana.no","deatnu.no","time.no","tingvoll.no","tinn.no","tjeldsund.no","dielddanuorri.no","tjome.no","tjøme.no","tokke.no","tolga.no","torsken.no","tranoy.no","tranøy.no","tromso.no","tromsø.no","tromsa.no","romsa.no","trondheim.no","troandin.no","trysil.no","trana.no","træna.no","trogstad.no","trøgstad.no","tvedestrand.no","tydal.no","tynset.no","tysfjord.no","divtasvuodna.no","divttasvuotna.no","tysnes.no","tysvar.no","tysvær.no","tonsberg.no","tønsberg.no","ullensaker.no","ullensvang.no","ulvik.no","utsira.no","vadso.no","vadsø.no","cahcesuolo.no","čáhcesuolo.no","vaksdal.no","valle.no","vang.no","vanylven.no","vardo.no","vardø.no","varggat.no","várggát.no","vefsn.no","vaapste.no","vega.no","vegarshei.no","vegårshei.no","vennesla.no","verdal.no","verran.no","vestby.no","vestnes.no","vestre-slidre.no","vestre-toten.no","vestvagoy.no","vestvågøy.no","vevelstad.no","vik.no","vikna.no","vindafjord.no","volda.no","voss.no","varoy.no","værøy.no","vagan.no","vågan.no","voagat.no","vagsoy.no","vågsøy.no","vaga.no","vågå.no","valer.ostfold.no","våler.østfold.no","valer.hedmark.no","våler.hedmark.no","*.np","nr","biz.nr","info.nr","gov.nr","edu.nr","org.nr","net.nr","com.nr","nu","nz","ac.nz","co.nz","cri.nz","geek.nz","gen.nz","govt.nz","health.nz","iwi.nz","kiwi.nz","maori.nz","mil.nz","māori.nz","net.nz","org.nz","parliament.nz","school.nz","om","co.om","com.om","edu.om","gov.om","med.om","museum.om","net.om","org.om","pro.om","onion","org","pa","ac.pa","gob.pa","com.pa","org.pa","sld.pa","edu.pa","net.pa","ing.pa","abo.pa","med.pa","nom.pa","pe","edu.pe","gob.pe","nom.pe","mil.pe","org.pe","com.pe","net.pe","pf","com.pf","org.pf","edu.pf","*.pg","ph","com.ph","net.ph","org.ph","gov.ph","edu.ph","ngo.ph","mil.ph","i.ph","pk","com.pk","net.pk","edu.pk","org.pk","fam.pk","biz.pk","web.pk","gov.pk","gob.pk","gok.pk","gon.pk","gop.pk","gos.pk","info.pk","pl","com.pl","net.pl","org.pl","aid.pl","agro.pl","atm.pl","auto.pl","biz.pl","edu.pl","gmina.pl","gsm.pl","info.pl","mail.pl","miasta.pl","media.pl","mil.pl","nieruchomosci.pl","nom.pl","pc.pl","powiat.pl","priv.pl","realestate.pl","rel.pl","sex.pl","shop.pl","sklep.pl","sos.pl","szkola.pl","targi.pl","tm.pl","tourism.pl","travel.pl","turystyka.pl","gov.pl","ap.gov.pl","ic.gov.pl","is.gov.pl","us.gov.pl","kmpsp.gov.pl","kppsp.gov.pl","kwpsp.gov.pl","psp.gov.pl","wskr.gov.pl","kwp.gov.pl","mw.gov.pl","ug.gov.pl","um.gov.pl","umig.gov.pl","ugim.gov.pl","upow.gov.pl","uw.gov.pl","starostwo.gov.pl","pa.gov.pl","po.gov.pl","psse.gov.pl","pup.gov.pl","rzgw.gov.pl","sa.gov.pl","so.gov.pl","sr.gov.pl","wsa.gov.pl","sko.gov.pl","uzs.gov.pl","wiih.gov.pl","winb.gov.pl","pinb.gov.pl","wios.gov.pl","witd.gov.pl","wzmiuw.gov.pl","piw.gov.pl","wiw.gov.pl","griw.gov.pl","wif.gov.pl","oum.gov.pl","sdn.gov.pl","zp.gov.pl","uppo.gov.pl","mup.gov.pl","wuoz.gov.pl","konsulat.gov.pl","oirm.gov.pl","augustow.pl","babia-gora.pl","bedzin.pl","beskidy.pl","bialowieza.pl","bialystok.pl","bielawa.pl","bieszczady.pl","boleslawiec.pl","bydgoszcz.pl","bytom.pl","cieszyn.pl","czeladz.pl","czest.pl","dlugoleka.pl","elblag.pl","elk.pl","glogow.pl","gniezno.pl","gorlice.pl","grajewo.pl","ilawa.pl","jaworzno.pl","jelenia-gora.pl","jgora.pl","kalisz.pl","kazimierz-dolny.pl","karpacz.pl","kartuzy.pl","kaszuby.pl","katowice.pl","kepno.pl","ketrzyn.pl","klodzko.pl","kobierzyce.pl","kolobrzeg.pl","konin.pl","konskowola.pl","kutno.pl","lapy.pl","lebork.pl","legnica.pl","lezajsk.pl","limanowa.pl","lomza.pl","lowicz.pl","lubin.pl","lukow.pl","malbork.pl","malopolska.pl","mazowsze.pl","mazury.pl","mielec.pl","mielno.pl","mragowo.pl","naklo.pl","nowaruda.pl","nysa.pl","olawa.pl","olecko.pl","olkusz.pl","olsztyn.pl","opoczno.pl","opole.pl","ostroda.pl","ostroleka.pl","ostrowiec.pl","ostrowwlkp.pl","pila.pl","pisz.pl","podhale.pl","podlasie.pl","polkowice.pl","pomorze.pl","pomorskie.pl","prochowice.pl","pruszkow.pl","przeworsk.pl","pulawy.pl","radom.pl","rawa-maz.pl","rybnik.pl","rzeszow.pl","sanok.pl","sejny.pl","slask.pl","slupsk.pl","sosnowiec.pl","stalowa-wola.pl","skoczow.pl","starachowice.pl","stargard.pl","suwalki.pl","swidnica.pl","swiebodzin.pl","swinoujscie.pl","szczecin.pl","szczytno.pl","tarnobrzeg.pl","tgory.pl","turek.pl","tychy.pl","ustka.pl","walbrzych.pl","warmia.pl","warszawa.pl","waw.pl","wegrow.pl","wielun.pl","wlocl.pl","wloclawek.pl","wodzislaw.pl","wolomin.pl","wroclaw.pl","zachpomor.pl","zagan.pl","zarow.pl","zgora.pl","zgorzelec.pl","pm","pn","gov.pn","co.pn","org.pn","edu.pn","net.pn","post","pr","com.pr","net.pr","org.pr","gov.pr","edu.pr","isla.pr","pro.pr","biz.pr","info.pr","name.pr","est.pr","prof.pr","ac.pr","pro","aaa.pro","aca.pro","acct.pro","avocat.pro","bar.pro","cpa.pro","eng.pro","jur.pro","law.pro","med.pro","recht.pro","ps","edu.ps","gov.ps","sec.ps","plo.ps","com.ps","org.ps","net.ps","pt","net.pt","gov.pt","org.pt","edu.pt","int.pt","publ.pt","com.pt","nome.pt","pw","co.pw","ne.pw","or.pw","ed.pw","go.pw","belau.pw","py","com.py","coop.py","edu.py","gov.py","mil.py","net.py","org.py","qa","com.qa","edu.qa","gov.qa","mil.qa","name.qa","net.qa","org.qa","sch.qa","re","asso.re","com.re","nom.re","ro","arts.ro","com.ro","firm.ro","info.ro","nom.ro","nt.ro","org.ro","rec.ro","store.ro","tm.ro","www.ro","rs","ac.rs","co.rs","edu.rs","gov.rs","in.rs","org.rs","ru","rw","ac.rw","co.rw","coop.rw","gov.rw","mil.rw","net.rw","org.rw","sa","com.sa","net.sa","org.sa","gov.sa","med.sa","pub.sa","edu.sa","sch.sa","sb","com.sb","edu.sb","gov.sb","net.sb","org.sb","sc","com.sc","gov.sc","net.sc","org.sc","edu.sc","sd","com.sd","net.sd","org.sd","edu.sd","med.sd","tv.sd","gov.sd","info.sd","se","a.se","ac.se","b.se","bd.se","brand.se","c.se","d.se","e.se","f.se","fh.se","fhsk.se","fhv.se","g.se","h.se","i.se","k.se","komforb.se","kommunalforbund.se","komvux.se","l.se","lanbib.se","m.se","n.se","naturbruksgymn.se","o.se","org.se","p.se","parti.se","pp.se","press.se","r.se","s.se","t.se","tm.se","u.se","w.se","x.se","y.se","z.se","sg","com.sg","net.sg","org.sg","gov.sg","edu.sg","per.sg","sh","com.sh","net.sh","gov.sh","org.sh","mil.sh","si","sj","sk","sl","com.sl","net.sl","edu.sl","gov.sl","org.sl","sm","sn","art.sn","com.sn","edu.sn","gouv.sn","org.sn","perso.sn","univ.sn","so","com.so","edu.so","gov.so","me.so","net.so","org.so","sr","ss","biz.ss","com.ss","edu.ss","gov.ss","net.ss","org.ss","st","co.st","com.st","consulado.st","edu.st","embaixada.st","gov.st","mil.st","net.st","org.st","principe.st","saotome.st","store.st","su","sv","com.sv","edu.sv","gob.sv","org.sv","red.sv","sx","gov.sx","sy","edu.sy","gov.sy","net.sy","mil.sy","com.sy","org.sy","sz","co.sz","ac.sz","org.sz","tc","td","tel","tf","tg","th","ac.th","co.th","go.th","in.th","mi.th","net.th","or.th","tj","ac.tj","biz.tj","co.tj","com.tj","edu.tj","go.tj","gov.tj","int.tj","mil.tj","name.tj","net.tj","nic.tj","org.tj","test.tj","web.tj","tk","tl","gov.tl","tm","com.tm","co.tm","org.tm","net.tm","nom.tm","gov.tm","mil.tm","edu.tm","tn","com.tn","ens.tn","fin.tn","gov.tn","ind.tn","intl.tn","nat.tn","net.tn","org.tn","info.tn","perso.tn","tourism.tn","edunet.tn","rnrt.tn","rns.tn","rnu.tn","mincom.tn","agrinet.tn","defense.tn","turen.tn","to","com.to","gov.to","net.to","org.to","edu.to","mil.to","tr","av.tr","bbs.tr","bel.tr","biz.tr","com.tr","dr.tr","edu.tr","gen.tr","gov.tr","info.tr","mil.tr","k12.tr","kep.tr","name.tr","net.tr","org.tr","pol.tr","tel.tr","tsk.tr","tv.tr","web.tr","nc.tr","gov.nc.tr","tt","co.tt","com.tt","org.tt","net.tt","biz.tt","info.tt","pro.tt","int.tt","coop.tt","jobs.tt","mobi.tt","travel.tt","museum.tt","aero.tt","name.tt","gov.tt","edu.tt","tv","tw","edu.tw","gov.tw","mil.tw","com.tw","net.tw","org.tw","idv.tw","game.tw","ebiz.tw","club.tw","網路.tw","組織.tw","商業.tw","tz","ac.tz","co.tz","go.tz","hotel.tz","info.tz","me.tz","mil.tz","mobi.tz","ne.tz","or.tz","sc.tz","tv.tz","ua","com.ua","edu.ua","gov.ua","in.ua","net.ua","org.ua","cherkassy.ua","cherkasy.ua","chernigov.ua","chernihiv.ua","chernivtsi.ua","chernovtsy.ua","ck.ua","cn.ua","cr.ua","crimea.ua","cv.ua","dn.ua","dnepropetrovsk.ua","dnipropetrovsk.ua","dominic.ua","donetsk.ua","dp.ua","if.ua","ivano-frankivsk.ua","kh.ua","kharkiv.ua","kharkov.ua","kherson.ua","khmelnitskiy.ua","khmelnytskyi.ua","kiev.ua","kirovograd.ua","km.ua","kr.ua","krym.ua","ks.ua","kv.ua","kyiv.ua","lg.ua","lt.ua","lugansk.ua","lutsk.ua","lv.ua","lviv.ua","mk.ua","mykolaiv.ua","nikolaev.ua","od.ua","odesa.ua","odessa.ua","pl.ua","poltava.ua","rivne.ua","rovno.ua","rv.ua","sb.ua","sebastopol.ua","sevastopol.ua","sm.ua","sumy.ua","te.ua","ternopil.ua","uz.ua","uzhgorod.ua","vinnica.ua","vinnytsia.ua","vn.ua","volyn.ua","yalta.ua","zaporizhzhe.ua","zaporizhzhia.ua","zhitomir.ua","zhytomyr.ua","zp.ua","zt.ua","ug","co.ug","or.ug","ac.ug","sc.ug","go.ug","ne.ug","com.ug","org.ug","uk","ac.uk","co.uk","gov.uk","ltd.uk","me.uk","net.uk","nhs.uk","org.uk","plc.uk","police.uk","*.sch.uk","us","dni.us","fed.us","isa.us","kids.us","nsn.us","ak.us","al.us","ar.us","as.us","az.us","ca.us","co.us","ct.us","dc.us","de.us","fl.us","ga.us","gu.us","hi.us","ia.us","id.us","il.us","in.us","ks.us","ky.us","la.us","ma.us","md.us","me.us","mi.us","mn.us","mo.us","ms.us","mt.us","nc.us","nd.us","ne.us","nh.us","nj.us","nm.us","nv.us","ny.us","oh.us","ok.us","or.us","pa.us","pr.us","ri.us","sc.us","sd.us","tn.us","tx.us","ut.us","vi.us","vt.us","va.us","wa.us","wi.us","wv.us","wy.us","k12.ak.us","k12.al.us","k12.ar.us","k12.as.us","k12.az.us","k12.ca.us","k12.co.us","k12.ct.us","k12.dc.us","k12.de.us","k12.fl.us","k12.ga.us","k12.gu.us","k12.ia.us","k12.id.us","k12.il.us","k12.in.us","k12.ks.us","k12.ky.us","k12.la.us","k12.ma.us","k12.md.us","k12.me.us","k12.mi.us","k12.mn.us","k12.mo.us","k12.ms.us","k12.mt.us","k12.nc.us","k12.ne.us","k12.nh.us","k12.nj.us","k12.nm.us","k12.nv.us","k12.ny.us","k12.oh.us","k12.ok.us","k12.or.us","k12.pa.us","k12.pr.us","k12.ri.us","k12.sc.us","k12.tn.us","k12.tx.us","k12.ut.us","k12.vi.us","k12.vt.us","k12.va.us","k12.wa.us","k12.wi.us","k12.wy.us","cc.ak.us","cc.al.us","cc.ar.us","cc.as.us","cc.az.us","cc.ca.us","cc.co.us","cc.ct.us","cc.dc.us","cc.de.us","cc.fl.us","cc.ga.us","cc.gu.us","cc.hi.us","cc.ia.us","cc.id.us","cc.il.us","cc.in.us","cc.ks.us","cc.ky.us","cc.la.us","cc.ma.us","cc.md.us","cc.me.us","cc.mi.us","cc.mn.us","cc.mo.us","cc.ms.us","cc.mt.us","cc.nc.us","cc.nd.us","cc.ne.us","cc.nh.us","cc.nj.us","cc.nm.us","cc.nv.us","cc.ny.us","cc.oh.us","cc.ok.us","cc.or.us","cc.pa.us","cc.pr.us","cc.ri.us","cc.sc.us","cc.sd.us","cc.tn.us","cc.tx.us","cc.ut.us","cc.vi.us","cc.vt.us","cc.va.us","cc.wa.us","cc.wi.us","cc.wv.us","cc.wy.us","lib.ak.us","lib.al.us","lib.ar.us","lib.as.us","lib.az.us","lib.ca.us","lib.co.us","lib.ct.us","lib.dc.us","lib.fl.us","lib.ga.us","lib.gu.us","lib.hi.us","lib.ia.us","lib.id.us","lib.il.us","lib.in.us","lib.ks.us","lib.ky.us","lib.la.us","lib.ma.us","lib.md.us","lib.me.us","lib.mi.us","lib.mn.us","lib.mo.us","lib.ms.us","lib.mt.us","lib.nc.us","lib.nd.us","lib.ne.us","lib.nh.us","lib.nj.us","lib.nm.us","lib.nv.us","lib.ny.us","lib.oh.us","lib.ok.us","lib.or.us","lib.pa.us","lib.pr.us","lib.ri.us","lib.sc.us","lib.sd.us","lib.tn.us","lib.tx.us","lib.ut.us","lib.vi.us","lib.vt.us","lib.va.us","lib.wa.us","lib.wi.us","lib.wy.us","pvt.k12.ma.us","chtr.k12.ma.us","paroch.k12.ma.us","ann-arbor.mi.us","cog.mi.us","dst.mi.us","eaton.mi.us","gen.mi.us","mus.mi.us","tec.mi.us","washtenaw.mi.us","uy","com.uy","edu.uy","gub.uy","mil.uy","net.uy","org.uy","uz","co.uz","com.uz","net.uz","org.uz","va","vc","com.vc","net.vc","org.vc","gov.vc","mil.vc","edu.vc","ve","arts.ve","co.ve","com.ve","e12.ve","edu.ve","firm.ve","gob.ve","gov.ve","info.ve","int.ve","mil.ve","net.ve","org.ve","rec.ve","store.ve","tec.ve","web.ve","vg","vi","co.vi","com.vi","k12.vi","net.vi","org.vi","vn","com.vn","net.vn","org.vn","edu.vn","gov.vn","int.vn","ac.vn","biz.vn","info.vn","name.vn","pro.vn","health.vn","vu","com.vu","edu.vu","net.vu","org.vu","wf","ws","com.ws","net.ws","org.ws","gov.ws","edu.ws","yt","امارات","հայ","বাংলা","бг","бел","中国","中國","الجزائر","مصر","ею","ευ","موريتانيا","გე","ελ","香港","公司.香港","教育.香港","政府.香港","個人.香港","網絡.香港","組織.香港","ಭಾರತ","ଭାରତ","ভাৰত","भारतम्","भारोत","ڀارت","ഭാരതം","भारत","بارت","بھارت","భారత్","ભારત","ਭਾਰਤ","ভারত","இந்தியா","ایران","ايران","عراق","الاردن","한국","қаз","ලංකා","இலங்கை","المغرب","мкд","мон","澳門","澳门","مليسيا","عمان","پاکستان","پاكستان","فلسطين","срб","пр.срб","орг.срб","обр.срб","од.срб","упр.срб","ак.срб","рф","قطر","السعودية","السعودیة","السعودیۃ","السعوديه","سودان","新加坡","சிங்கப்பூர்","سورية","سوريا","ไทย","ศึกษา.ไทย","ธุรกิจ.ไทย","รัฐบาล.ไทย","ทหาร.ไทย","เน็ต.ไทย","องค์กร.ไทย","تونس","台灣","台湾","臺灣","укр","اليمن","xxx","*.ye","ac.za","agric.za","alt.za","co.za","edu.za","gov.za","grondar.za","law.za","mil.za","net.za","ngo.za","nic.za","nis.za","nom.za","org.za","school.za","tm.za","web.za","zm","ac.zm","biz.zm","co.zm","com.zm","edu.zm","gov.zm","info.zm","mil.zm","net.zm","org.zm","sch.zm","zw","ac.zw","co.zw","gov.zw","mil.zw","org.zw","aaa","aarp","abarth","abb","abbott","abbvie","abc","able","abogado","abudhabi","academy","accenture","accountant","accountants","aco","actor","adac","ads","adult","aeg","aetna","afamilycompany","afl","africa","agakhan","agency","aig","aigo","airbus","airforce","airtel","akdn","alfaromeo","alibaba","alipay","allfinanz","allstate","ally","alsace","alstom","amazon","americanexpress","americanfamily","amex","amfam","amica","amsterdam","analytics","android","anquan","anz","aol","apartments","app","apple","aquarelle","arab","aramco","archi","army","art","arte","asda","associates","athleta","attorney","auction","audi","audible","audio","auspost","author","auto","autos","avianca","aws","axa","azure","baby","baidu","banamex","bananarepublic","band","bank","bar","barcelona","barclaycard","barclays","barefoot","bargains","baseball","basketball","bauhaus","bayern","bbc","bbt","bbva","bcg","bcn","beats","beauty","beer","bentley","berlin","best","bestbuy","bet","bharti","bible","bid","bike","bing","bingo","bio","black","blackfriday","blockbuster","blog","bloomberg","blue","bms","bmw","bnpparibas","boats","boehringer","bofa","bom","bond","boo","book","booking","bosch","bostik","boston","bot","boutique","box","bradesco","bridgestone","broadway","broker","brother","brussels","budapest","bugatti","build","builders","business","buy","buzz","bzh","cab","cafe","cal","call","calvinklein","cam","camera","camp","cancerresearch","canon","capetown","capital","capitalone","car","caravan","cards","care","career","careers","cars","casa","case","caseih","cash","casino","catering","catholic","cba","cbn","cbre","cbs","ceb","center","ceo","cern","cfa","cfd","chanel","channel","charity","chase","chat","cheap","chintai","christmas","chrome","church","cipriani","circle","cisco","citadel","citi","citic","city","cityeats","claims","cleaning","click","clinic","clinique","clothing","cloud","club","clubmed","coach","codes","coffee","college","cologne","comcast","commbank","community","company","compare","computer","comsec","condos","construction","consulting","contact","contractors","cooking","cookingchannel","cool","corsica","country","coupon","coupons","courses","cpa","credit","creditcard","creditunion","cricket","crown","crs","cruise","cruises","csc","cuisinella","cymru","cyou","dabur","dad","dance","data","date","dating","datsun","day","dclk","dds","deal","dealer","deals","degree","delivery","dell","deloitte","delta","democrat","dental","dentist","desi","design","dev","dhl","diamonds","diet","digital","direct","directory","discount","discover","dish","diy","dnp","docs","doctor","dog","domains","dot","download","drive","dtv","dubai","duck","dunlop","dupont","durban","dvag","dvr","earth","eat","eco","edeka","education","email","emerck","energy","engineer","engineering","enterprises","epson","equipment","ericsson","erni","esq","estate","esurance","etisalat","eurovision","eus","events","exchange","expert","exposed","express","extraspace","fage","fail","fairwinds","faith","family","fan","fans","farm","farmers","fashion","fast","fedex","feedback","ferrari","ferrero","fiat","fidelity","fido","film","final","finance","financial","fire","firestone","firmdale","fish","fishing","fit","fitness","flickr","flights","flir","florist","flowers","fly","foo","food","foodnetwork","football","ford","forex","forsale","forum","foundation","fox","free","fresenius","frl","frogans","frontdoor","frontier","ftr","fujitsu","fujixerox","fun","fund","furniture","futbol","fyi","gal","gallery","gallo","gallup","game","games","gap","garden","gay","gbiz","gdn","gea","gent","genting","george","ggee","gift","gifts","gives","giving","glade","glass","gle","global","globo","gmail","gmbh","gmo","gmx","godaddy","gold","goldpoint","golf","goo","goodyear","goog","google","gop","got","grainger","graphics","gratis","green","gripe","grocery","group","guardian","gucci","guge","guide","guitars","guru","hair","hamburg","hangout","haus","hbo","hdfc","hdfcbank","health","healthcare","help","helsinki","here","hermes","hgtv","hiphop","hisamitsu","hitachi","hiv","hkt","hockey","holdings","holiday","homedepot","homegoods","homes","homesense","honda","horse","hospital","host","hosting","hot","hoteles","hotels","hotmail","house","how","hsbc","hughes","hyatt","hyundai","ibm","icbc","ice","icu","ieee","ifm","ikano","imamat","imdb","immo","immobilien","inc","industries","infiniti","ing","ink","institute","insurance","insure","intel","international","intuit","investments","ipiranga","irish","ismaili","ist","istanbul","itau","itv","iveco","jaguar","java","jcb","jcp","jeep","jetzt","jewelry","jio","jll","jmp","jnj","joburg","jot","joy","jpmorgan","jprs","juegos","juniper","kaufen","kddi","kerryhotels","kerrylogistics","kerryproperties","kfh","kia","kim","kinder","kindle","kitchen","kiwi","koeln","komatsu","kosher","kpmg","kpn","krd","kred","kuokgroup","kyoto","lacaixa","lamborghini","lamer","lancaster","lancia","land","landrover","lanxess","lasalle","lat","latino","latrobe","law","lawyer","lds","lease","leclerc","lefrak","legal","lego","lexus","lgbt","lidl","life","lifeinsurance","lifestyle","lighting","like","lilly","limited","limo","lincoln","linde","link","lipsy","live","living","lixil","llc","llp","loan","loans","locker","locus","loft","lol","london","lotte","lotto","love","lpl","lplfinancial","ltd","ltda","lundbeck","lupin","luxe","luxury","macys","madrid","maif","maison","makeup","man","management","mango","map","market","marketing","markets","marriott","marshalls","maserati","mattel","mba","mckinsey","med","media","meet","melbourne","meme","memorial","men","menu","merckmsd","metlife","miami","microsoft","mini","mint","mit","mitsubishi","mlb","mls","mma","mobile","moda","moe","moi","mom","monash","money","monster","mormon","mortgage","moscow","moto","motorcycles","mov","movie","msd","mtn","mtr","mutual","nab","nadex","nagoya","nationwide","natura","navy","nba","nec","netbank","netflix","network","neustar","new","newholland","news","next","nextdirect","nexus","nfl","ngo","nhk","nico","nike","nikon","ninja","nissan","nissay","nokia","northwesternmutual","norton","now","nowruz","nowtv","nra","nrw","ntt","nyc","obi","observer","off","office","okinawa","olayan","olayangroup","oldnavy","ollo","omega","one","ong","onl","online","onyourside","ooo","open","oracle","orange","organic","origins","osaka","otsuka","ott","ovh","page","panasonic","paris","pars","partners","parts","party","passagens","pay","pccw","pet","pfizer","pharmacy","phd","philips","phone","photo","photography","photos","physio","pics","pictet","pictures","pid","pin","ping","pink","pioneer","pizza","place","play","playstation","plumbing","plus","pnc","pohl","poker","politie","porn","pramerica","praxi","press","prime","prod","productions","prof","progressive","promo","properties","property","protection","pru","prudential","pub","pwc","qpon","quebec","quest","qvc","racing","radio","raid","read","realestate","realtor","realty","recipes","red","redstone","redumbrella","rehab","reise","reisen","reit","reliance","ren","rent","rentals","repair","report","republican","rest","restaurant","review","reviews","rexroth","rich","richardli","ricoh","rightathome","ril","rio","rip","rmit","rocher","rocks","rodeo","rogers","room","rsvp","rugby","ruhr","run","rwe","ryukyu","saarland","safe","safety","sakura","sale","salon","samsclub","samsung","sandvik","sandvikcoromant","sanofi","sap","sarl","sas","save","saxo","sbi","sbs","sca","scb","schaeffler","schmidt","scholarships","school","schule","schwarz","science","scjohnson","scor","scot","search","seat","secure","security","seek","select","sener","services","ses","seven","sew","sex","sexy","sfr","shangrila","sharp","shaw","shell","shia","shiksha","shoes","shop","shopping","shouji","show","showtime","shriram","silk","sina","singles","site","ski","skin","sky","skype","sling","smart","smile","sncf","soccer","social","softbank","software","sohu","solar","solutions","song","sony","soy","spa","space","sport","spot","spreadbetting","srl","stada","staples","star","statebank","statefarm","stc","stcgroup","stockholm","storage","store","stream","studio","study","style","sucks","supplies","supply","support","surf","surgery","suzuki","swatch","swiftcover","swiss","sydney","symantec","systems","tab","taipei","talk","taobao","target","tatamotors","tatar","tattoo","tax","taxi","tci","tdk","team","tech","technology","temasek","tennis","teva","thd","theater","theatre","tiaa","tickets","tienda","tiffany","tips","tires","tirol","tjmaxx","tjx","tkmaxx","tmall","today","tokyo","tools","top","toray","toshiba","total","tours","town","toyota","toys","trade","trading","training","travel","travelchannel","travelers","travelersinsurance","trust","trv","tube","tui","tunes","tushu","tvs","ubank","ubs","unicom","university","uno","uol","ups","vacations","vana","vanguard","vegas","ventures","verisign","versicherung","vet","viajes","video","vig","viking","villas","vin","vip","virgin","visa","vision","viva","vivo","vlaanderen","vodka","volkswagen","volvo","vote","voting","voto","voyage","vuelos","wales","walmart","walter","wang","wanggou","watch","watches","weather","weatherchannel","webcam","weber","website","wed","wedding","weibo","weir","whoswho","wien","wiki","williamhill","win","windows","wine","winners","wme","wolterskluwer","woodside","work","works","world","wow","wtc","wtf","xbox","xerox","xfinity","xihuan","xin","कॉम","セール","佛山","慈善","集团","在线","大众汽车","点看","คอม","八卦","موقع","公益","公司","香格里拉","网站","移动","我爱你","москва","католик","онлайн","сайт","联通","קום","时尚","微博","淡马锡","ファッション","орг","नेट","ストア","アマゾン","삼성","商标","商店","商城","дети","ポイント","新闻","工行","家電","كوم","中文网","中信","娱乐","谷歌","電訊盈科","购物","クラウド","通販","网店","संगठन","餐厅","网络","ком","亚马逊","诺基亚","食品","飞利浦","手表","手机","ارامكو","العليان","اتصالات","بازار","ابوظبي","كاثوليك","همراه","닷컴","政府","شبكة","بيتك","عرب","机构","组织机构","健康","招聘","рус","珠宝","大拿","みんな","グーグル","世界","書籍","网址","닷넷","コム","天主教","游戏","vermögensberater","vermögensberatung","企业","信息","嘉里大酒店","嘉里","广东","政务","xyz","yachts","yahoo","yamaxun","yandex","yodobashi","yoga","yokohama","you","youtube","yun","zappos","zara","zero","zip","zone","zuerich","cc.ua","inf.ua","ltd.ua","adobeaemcloud.com","adobeaemcloud.net","*.dev.adobeaemcloud.com","beep.pl","barsy.ca","*.compute.estate","*.alces.network","altervista.org","alwaysdata.net","cloudfront.net","*.compute.amazonaws.com","*.compute-1.amazonaws.com","*.compute.amazonaws.com.cn","us-east-1.amazonaws.com","cn-north-1.eb.amazonaws.com.cn","cn-northwest-1.eb.amazonaws.com.cn","elasticbeanstalk.com","ap-northeast-1.elasticbeanstalk.com","ap-northeast-2.elasticbeanstalk.com","ap-northeast-3.elasticbeanstalk.com","ap-south-1.elasticbeanstalk.com","ap-southeast-1.elasticbeanstalk.com","ap-southeast-2.elasticbeanstalk.com","ca-central-1.elasticbeanstalk.com","eu-central-1.elasticbeanstalk.com","eu-west-1.elasticbeanstalk.com","eu-west-2.elasticbeanstalk.com","eu-west-3.elasticbeanstalk.com","sa-east-1.elasticbeanstalk.com","us-east-1.elasticbeanstalk.com","us-east-2.elasticbeanstalk.com","us-gov-west-1.elasticbeanstalk.com","us-west-1.elasticbeanstalk.com","us-west-2.elasticbeanstalk.com","*.elb.amazonaws.com","*.elb.amazonaws.com.cn","s3.amazonaws.com","s3-ap-northeast-1.amazonaws.com","s3-ap-northeast-2.amazonaws.com","s3-ap-south-1.amazonaws.com","s3-ap-southeast-1.amazonaws.com","s3-ap-southeast-2.amazonaws.com","s3-ca-central-1.amazonaws.com","s3-eu-central-1.amazonaws.com","s3-eu-west-1.amazonaws.com","s3-eu-west-2.amazonaws.com","s3-eu-west-3.amazonaws.com","s3-external-1.amazonaws.com","s3-fips-us-gov-west-1.amazonaws.com","s3-sa-east-1.amazonaws.com","s3-us-gov-west-1.amazonaws.com","s3-us-east-2.amazonaws.com","s3-us-west-1.amazonaws.com","s3-us-west-2.amazonaws.com","s3.ap-northeast-2.amazonaws.com","s3.ap-south-1.amazonaws.com","s3.cn-north-1.amazonaws.com.cn","s3.ca-central-1.amazonaws.com","s3.eu-central-1.amazonaws.com","s3.eu-west-2.amazonaws.com","s3.eu-west-3.amazonaws.com","s3.us-east-2.amazonaws.com","s3.dualstack.ap-northeast-1.amazonaws.com","s3.dualstack.ap-northeast-2.amazonaws.com","s3.dualstack.ap-south-1.amazonaws.com","s3.dualstack.ap-southeast-1.amazonaws.com","s3.dualstack.ap-southeast-2.amazonaws.com","s3.dualstack.ca-central-1.amazonaws.com","s3.dualstack.eu-central-1.amazonaws.com","s3.dualstack.eu-west-1.amazonaws.com","s3.dualstack.eu-west-2.amazonaws.com","s3.dualstack.eu-west-3.amazonaws.com","s3.dualstack.sa-east-1.amazonaws.com","s3.dualstack.us-east-1.amazonaws.com","s3.dualstack.us-east-2.amazonaws.com","s3-website-us-east-1.amazonaws.com","s3-website-us-west-1.amazonaws.com","s3-website-us-west-2.amazonaws.com","s3-website-ap-northeast-1.amazonaws.com","s3-website-ap-southeast-1.amazonaws.com","s3-website-ap-southeast-2.amazonaws.com","s3-website-eu-west-1.amazonaws.com","s3-website-sa-east-1.amazonaws.com","s3-website.ap-northeast-2.amazonaws.com","s3-website.ap-south-1.amazonaws.com","s3-website.ca-central-1.amazonaws.com","s3-website.eu-central-1.amazonaws.com","s3-website.eu-west-2.amazonaws.com","s3-website.eu-west-3.amazonaws.com","s3-website.us-east-2.amazonaws.com","amsw.nl","t3l3p0rt.net","tele.amune.org","apigee.io","on-aptible.com","user.aseinet.ne.jp","gv.vc","d.gv.vc","user.party.eus","pimienta.org","poivron.org","potager.org","sweetpepper.org","myasustor.com","myfritz.net","*.awdev.ca","*.advisor.ws","b-data.io","backplaneapp.io","balena-devices.com","app.banzaicloud.io","betainabox.com","bnr.la","blackbaudcdn.net","boomla.net","boxfuse.io","square7.ch","bplaced.com","bplaced.de","square7.de","bplaced.net","square7.net","browsersafetymark.io","uk0.bigv.io","dh.bytemark.co.uk","vm.bytemark.co.uk","mycd.eu","carrd.co","crd.co","uwu.ai","ae.org","ar.com","br.com","cn.com","com.de","com.se","de.com","eu.com","gb.com","gb.net","hu.com","hu.net","jp.net","jpn.com","kr.com","mex.com","no.com","qc.com","ru.com","sa.com","se.net","uk.com","uk.net","us.com","uy.com","za.bz","za.com","africa.com","gr.com","in.net","us.org","co.com","c.la","certmgr.org","xenapponazure.com","discourse.group","discourse.team","virtueeldomein.nl","cleverapps.io","*.lcl.dev","*.stg.dev","c66.me","cloud66.ws","cloud66.zone","jdevcloud.com","wpdevcloud.com","cloudaccess.host","freesite.host","cloudaccess.net","cloudcontrolled.com","cloudcontrolapp.com","cloudera.site","trycloudflare.com","workers.dev","wnext.app","co.ca","*.otap.co","co.cz","c.cdn77.org","cdn77-ssl.net","r.cdn77.net","rsc.cdn77.org","ssl.origin.cdn77-secure.org","cloudns.asia","cloudns.biz","cloudns.club","cloudns.cc","cloudns.eu","cloudns.in","cloudns.info","cloudns.org","cloudns.pro","cloudns.pw","cloudns.us","cloudeity.net","cnpy.gdn","co.nl","co.no","webhosting.be","hosting-cluster.nl","ac.ru","edu.ru","gov.ru","int.ru","mil.ru","test.ru","dyn.cosidns.de","dynamisches-dns.de","dnsupdater.de","internet-dns.de","l-o-g-i-n.de","dynamic-dns.info","feste-ip.net","knx-server.net","static-access.net","realm.cz","*.cryptonomic.net","cupcake.is","*.customer-oci.com","*.oci.customer-oci.com","*.ocp.customer-oci.com","*.ocs.customer-oci.com","cyon.link","cyon.site","daplie.me","localhost.daplie.me","dattolocal.com","dattorelay.com","dattoweb.com","mydatto.com","dattolocal.net","mydatto.net","biz.dk","co.dk","firm.dk","reg.dk","store.dk","*.dapps.earth","*.bzz.dapps.earth","builtwithdark.com","edgestack.me","debian.net","dedyn.io","dnshome.de","online.th","shop.th","drayddns.com","dreamhosters.com","mydrobo.com","drud.io","drud.us","duckdns.org","dy.fi","tunk.org","dyndns-at-home.com","dyndns-at-work.com","dyndns-blog.com","dyndns-free.com","dyndns-home.com","dyndns-ip.com","dyndns-mail.com","dyndns-office.com","dyndns-pics.com","dyndns-remote.com","dyndns-server.com","dyndns-web.com","dyndns-wiki.com","dyndns-work.com","dyndns.biz","dyndns.info","dyndns.org","dyndns.tv","at-band-camp.net","ath.cx","barrel-of-knowledge.info","barrell-of-knowledge.info","better-than.tv","blogdns.com","blogdns.net","blogdns.org","blogsite.org","boldlygoingnowhere.org","broke-it.net","buyshouses.net","cechire.com","dnsalias.com","dnsalias.net","dnsalias.org","dnsdojo.com","dnsdojo.net","dnsdojo.org","does-it.net","doesntexist.com","doesntexist.org","dontexist.com","dontexist.net","dontexist.org","doomdns.com","doomdns.org","dvrdns.org","dyn-o-saur.com","dynalias.com","dynalias.net","dynalias.org","dynathome.net","dyndns.ws","endofinternet.net","endofinternet.org","endoftheinternet.org","est-a-la-maison.com","est-a-la-masion.com","est-le-patron.com","est-mon-blogueur.com","for-better.biz","for-more.biz","for-our.info","for-some.biz","for-the.biz","forgot.her.name","forgot.his.name","from-ak.com","from-al.com","from-ar.com","from-az.net","from-ca.com","from-co.net","from-ct.com","from-dc.com","from-de.com","from-fl.com","from-ga.com","from-hi.com","from-ia.com","from-id.com","from-il.com","from-in.com","from-ks.com","from-ky.com","from-la.net","from-ma.com","from-md.com","from-me.org","from-mi.com","from-mn.com","from-mo.com","from-ms.com","from-mt.com","from-nc.com","from-nd.com","from-ne.com","from-nh.com","from-nj.com","from-nm.com","from-nv.com","from-ny.net","from-oh.com","from-ok.com","from-or.com","from-pa.com","from-pr.com","from-ri.com","from-sc.com","from-sd.com","from-tn.com","from-tx.com","from-ut.com","from-va.com","from-vt.com","from-wa.com","from-wi.com","from-wv.com","from-wy.com","ftpaccess.cc","fuettertdasnetz.de","game-host.org","game-server.cc","getmyip.com","gets-it.net","go.dyndns.org","gotdns.com","gotdns.org","groks-the.info","groks-this.info","ham-radio-op.net","here-for-more.info","hobby-site.com","hobby-site.org","home.dyndns.org","homedns.org","homeftp.net","homeftp.org","homeip.net","homelinux.com","homelinux.net","homelinux.org","homeunix.com","homeunix.net","homeunix.org","iamallama.com","in-the-band.net","is-a-anarchist.com","is-a-blogger.com","is-a-bookkeeper.com","is-a-bruinsfan.org","is-a-bulls-fan.com","is-a-candidate.org","is-a-caterer.com","is-a-celticsfan.org","is-a-chef.com","is-a-chef.net","is-a-chef.org","is-a-conservative.com","is-a-cpa.com","is-a-cubicle-slave.com","is-a-democrat.com","is-a-designer.com","is-a-doctor.com","is-a-financialadvisor.com","is-a-geek.com","is-a-geek.net","is-a-geek.org","is-a-green.com","is-a-guru.com","is-a-hard-worker.com","is-a-hunter.com","is-a-knight.org","is-a-landscaper.com","is-a-lawyer.com","is-a-liberal.com","is-a-libertarian.com","is-a-linux-user.org","is-a-llama.com","is-a-musician.com","is-a-nascarfan.com","is-a-nurse.com","is-a-painter.com","is-a-patsfan.org","is-a-personaltrainer.com","is-a-photographer.com","is-a-player.com","is-a-republican.com","is-a-rockstar.com","is-a-socialist.com","is-a-soxfan.org","is-a-student.com","is-a-teacher.com","is-a-techie.com","is-a-therapist.com","is-an-accountant.com","is-an-actor.com","is-an-actress.com","is-an-anarchist.com","is-an-artist.com","is-an-engineer.com","is-an-entertainer.com","is-by.us","is-certified.com","is-found.org","is-gone.com","is-into-anime.com","is-into-cars.com","is-into-cartoons.com","is-into-games.com","is-leet.com","is-lost.org","is-not-certified.com","is-saved.org","is-slick.com","is-uberleet.com","is-very-bad.org","is-very-evil.org","is-very-good.org","is-very-nice.org","is-very-sweet.org","is-with-theband.com","isa-geek.com","isa-geek.net","isa-geek.org","isa-hockeynut.com","issmarterthanyou.com","isteingeek.de","istmein.de","kicks-ass.net","kicks-ass.org","knowsitall.info","land-4-sale.us","lebtimnetz.de","leitungsen.de","likes-pie.com","likescandy.com","merseine.nu","mine.nu","misconfused.org","mypets.ws","myphotos.cc","neat-url.com","office-on-the.net","on-the-web.tv","podzone.net","podzone.org","readmyblog.org","saves-the-whales.com","scrapper-site.net","scrapping.cc","selfip.biz","selfip.com","selfip.info","selfip.net","selfip.org","sells-for-less.com","sells-for-u.com","sells-it.net","sellsyourhome.org","servebbs.com","servebbs.net","servebbs.org","serveftp.net","serveftp.org","servegame.org","shacknet.nu","simple-url.com","space-to-rent.com","stuff-4-sale.org","stuff-4-sale.us","teaches-yoga.com","thruhere.net","traeumtgerade.de","webhop.biz","webhop.info","webhop.net","webhop.org","worse-than.tv","writesthisblog.com","ddnss.de","dyn.ddnss.de","dyndns.ddnss.de","dyndns1.de","dyn-ip24.de","home-webserver.de","dyn.home-webserver.de","myhome-server.de","ddnss.org","definima.net","definima.io","bci.dnstrace.pro","ddnsfree.com","ddnsgeek.com","giize.com","gleeze.com","kozow.com","loseyourip.com","ooguy.com","theworkpc.com","casacam.net","dynu.net","accesscam.org","camdvr.org","freeddns.org","mywire.org","webredirect.org","myddns.rocks","blogsite.xyz","dynv6.net","e4.cz","en-root.fr","mytuleap.com","onred.one","staging.onred.one","enonic.io","customer.enonic.io","eu.org","al.eu.org","asso.eu.org","at.eu.org","au.eu.org","be.eu.org","bg.eu.org","ca.eu.org","cd.eu.org","ch.eu.org","cn.eu.org","cy.eu.org","cz.eu.org","de.eu.org","dk.eu.org","edu.eu.org","ee.eu.org","es.eu.org","fi.eu.org","fr.eu.org","gr.eu.org","hr.eu.org","hu.eu.org","ie.eu.org","il.eu.org","in.eu.org","int.eu.org","is.eu.org","it.eu.org","jp.eu.org","kr.eu.org","lt.eu.org","lu.eu.org","lv.eu.org","mc.eu.org","me.eu.org","mk.eu.org","mt.eu.org","my.eu.org","net.eu.org","ng.eu.org","nl.eu.org","no.eu.org","nz.eu.org","paris.eu.org","pl.eu.org","pt.eu.org","q-a.eu.org","ro.eu.org","ru.eu.org","se.eu.org","si.eu.org","sk.eu.org","tr.eu.org","uk.eu.org","us.eu.org","eu-1.evennode.com","eu-2.evennode.com","eu-3.evennode.com","eu-4.evennode.com","us-1.evennode.com","us-2.evennode.com","us-3.evennode.com","us-4.evennode.com","twmail.cc","twmail.net","twmail.org","mymailer.com.tw","url.tw","apps.fbsbx.com","ru.net","adygeya.ru","bashkiria.ru","bir.ru","cbg.ru","com.ru","dagestan.ru","grozny.ru","kalmykia.ru","kustanai.ru","marine.ru","mordovia.ru","msk.ru","mytis.ru","nalchik.ru","nov.ru","pyatigorsk.ru","spb.ru","vladikavkaz.ru","vladimir.ru","abkhazia.su","adygeya.su","aktyubinsk.su","arkhangelsk.su","armenia.su","ashgabad.su","azerbaijan.su","balashov.su","bashkiria.su","bryansk.su","bukhara.su","chimkent.su","dagestan.su","east-kazakhstan.su","exnet.su","georgia.su","grozny.su","ivanovo.su","jambyl.su","kalmykia.su","kaluga.su","karacol.su","karaganda.su","karelia.su","khakassia.su","krasnodar.su","kurgan.su","kustanai.su","lenug.su","mangyshlak.su","mordovia.su","msk.su","murmansk.su","nalchik.su","navoi.su","north-kazakhstan.su","nov.su","obninsk.su","penza.su","pokrovsk.su","sochi.su","spb.su","tashkent.su","termez.su","togliatti.su","troitsk.su","tselinograd.su","tula.su","tuva.su","vladikavkaz.su","vladimir.su","vologda.su","channelsdvr.net","u.channelsdvr.net","fastly-terrarium.com","fastlylb.net","map.fastlylb.net","freetls.fastly.net","map.fastly.net","a.prod.fastly.net","global.prod.fastly.net","a.ssl.fastly.net","b.ssl.fastly.net","global.ssl.fastly.net","fastpanel.direct","fastvps-server.com","fhapp.xyz","fedorainfracloud.org","fedorapeople.org","cloud.fedoraproject.org","app.os.fedoraproject.org","app.os.stg.fedoraproject.org","mydobiss.com","filegear.me","filegear-au.me","filegear-de.me","filegear-gb.me","filegear-ie.me","filegear-jp.me","filegear-sg.me","firebaseapp.com","flynnhub.com","flynnhosting.net","0e.vc","freebox-os.com","freeboxos.com","fbx-os.fr","fbxos.fr","freebox-os.fr","freeboxos.fr","freedesktop.org","*.futurecms.at","*.ex.futurecms.at","*.in.futurecms.at","futurehosting.at","futuremailing.at","*.ex.ortsinfo.at","*.kunden.ortsinfo.at","*.statics.cloud","service.gov.uk","gehirn.ne.jp","usercontent.jp","gentapps.com","lab.ms","github.io","githubusercontent.com","gitlab.io","glitch.me","lolipop.io","cloudapps.digital","london.cloudapps.digital","homeoffice.gov.uk","ro.im","shop.ro","goip.de","run.app","a.run.app","web.app","*.0emm.com","appspot.com","*.r.appspot.com","blogspot.ae","blogspot.al","blogspot.am","blogspot.ba","blogspot.be","blogspot.bg","blogspot.bj","blogspot.ca","blogspot.cf","blogspot.ch","blogspot.cl","blogspot.co.at","blogspot.co.id","blogspot.co.il","blogspot.co.ke","blogspot.co.nz","blogspot.co.uk","blogspot.co.za","blogspot.com","blogspot.com.ar","blogspot.com.au","blogspot.com.br","blogspot.com.by","blogspot.com.co","blogspot.com.cy","blogspot.com.ee","blogspot.com.eg","blogspot.com.es","blogspot.com.mt","blogspot.com.ng","blogspot.com.tr","blogspot.com.uy","blogspot.cv","blogspot.cz","blogspot.de","blogspot.dk","blogspot.fi","blogspot.fr","blogspot.gr","blogspot.hk","blogspot.hr","blogspot.hu","blogspot.ie","blogspot.in","blogspot.is","blogspot.it","blogspot.jp","blogspot.kr","blogspot.li","blogspot.lt","blogspot.lu","blogspot.md","blogspot.mk","blogspot.mr","blogspot.mx","blogspot.my","blogspot.nl","blogspot.no","blogspot.pe","blogspot.pt","blogspot.qa","blogspot.re","blogspot.ro","blogspot.rs","blogspot.ru","blogspot.se","blogspot.sg","blogspot.si","blogspot.sk","blogspot.sn","blogspot.td","blogspot.tw","blogspot.ug","blogspot.vn","cloudfunctions.net","cloud.goog","codespot.com","googleapis.com","googlecode.com","pagespeedmobilizer.com","publishproxy.com","withgoogle.com","withyoutube.com","awsmppl.com","fin.ci","free.hr","caa.li","ua.rs","conf.se","hs.zone","hs.run","hashbang.sh","hasura.app","hasura-app.io","hepforge.org","herokuapp.com","herokussl.com","myravendb.com","ravendb.community","ravendb.me","development.run","ravendb.run","bpl.biz","orx.biz","ng.city","biz.gl","ng.ink","col.ng","firm.ng","gen.ng","ltd.ng","ngo.ng","ng.school","sch.so","häkkinen.fi","*.moonscale.io","moonscale.net","iki.fi","dyn-berlin.de","in-berlin.de","in-brb.de","in-butter.de","in-dsl.de","in-dsl.net","in-dsl.org","in-vpn.de","in-vpn.net","in-vpn.org","biz.at","info.at","info.cx","ac.leg.br","al.leg.br","am.leg.br","ap.leg.br","ba.leg.br","ce.leg.br","df.leg.br","es.leg.br","go.leg.br","ma.leg.br","mg.leg.br","ms.leg.br","mt.leg.br","pa.leg.br","pb.leg.br","pe.leg.br","pi.leg.br","pr.leg.br","rj.leg.br","rn.leg.br","ro.leg.br","rr.leg.br","rs.leg.br","sc.leg.br","se.leg.br","sp.leg.br","to.leg.br","pixolino.com","ipifony.net","mein-iserv.de","test-iserv.de","iserv.dev","iobb.net","myjino.ru","*.hosting.myjino.ru","*.landing.myjino.ru","*.spectrum.myjino.ru","*.vps.myjino.ru","*.triton.zone","*.cns.joyent.com","js.org","kaas.gg","khplay.nl","keymachine.de","kinghost.net","uni5.net","knightpoint.systems","oya.to","co.krd","edu.krd","git-repos.de","lcube-server.de","svn-repos.de","leadpages.co","lpages.co","lpusercontent.com","lelux.site","co.business","co.education","co.events","co.financial","co.network","co.place","co.technology","app.lmpm.com","linkitools.space","linkyard.cloud","linkyard-cloud.ch","members.linode.com","nodebalancer.linode.com","we.bs","loginline.app","loginline.dev","loginline.io","loginline.services","loginline.site","krasnik.pl","leczna.pl","lubartow.pl","lublin.pl","poniatowa.pl","swidnik.pl","uklugs.org","glug.org.uk","lug.org.uk","lugs.org.uk","barsy.bg","barsy.co.uk","barsyonline.co.uk","barsycenter.com","barsyonline.com","barsy.club","barsy.de","barsy.eu","barsy.in","barsy.info","barsy.io","barsy.me","barsy.menu","barsy.mobi","barsy.net","barsy.online","barsy.org","barsy.pro","barsy.pub","barsy.shop","barsy.site","barsy.support","barsy.uk","*.magentosite.cloud","mayfirst.info","mayfirst.org","hb.cldmail.ru","miniserver.com","memset.net","cloud.metacentrum.cz","custom.metacentrum.cz","flt.cloud.muni.cz","usr.cloud.muni.cz","meteorapp.com","eu.meteorapp.com","co.pl","azurecontainer.io","azurewebsites.net","azure-mobile.net","cloudapp.net","mozilla-iot.org","bmoattachments.org","net.ru","org.ru","pp.ru","ui.nabu.casa","pony.club","of.fashion","on.fashion","of.football","in.london","of.london","for.men","and.mom","for.mom","for.one","for.sale","of.work","to.work","nctu.me","bitballoon.com","netlify.com","4u.com","ngrok.io","nh-serv.co.uk","nfshost.com","dnsking.ch","mypi.co","n4t.co","001www.com","ddnslive.com","myiphost.com","forumz.info","16-b.it","32-b.it","64-b.it","soundcast.me","tcp4.me","dnsup.net","hicam.net","now-dns.net","ownip.net","vpndns.net","dynserv.org","now-dns.org","x443.pw","now-dns.top","ntdll.top","freeddns.us","crafting.xyz","zapto.xyz","nsupdate.info","nerdpol.ovh","blogsyte.com","brasilia.me","cable-modem.org","ciscofreak.com","collegefan.org","couchpotatofries.org","damnserver.com","ddns.me","ditchyourip.com","dnsfor.me","dnsiskinky.com","dvrcam.info","dynns.com","eating-organic.net","fantasyleague.cc","geekgalaxy.com","golffan.us","health-carereform.com","homesecuritymac.com","homesecuritypc.com","hopto.me","ilovecollege.info","loginto.me","mlbfan.org","mmafan.biz","myactivedirectory.com","mydissent.net","myeffect.net","mymediapc.net","mypsx.net","mysecuritycamera.com","mysecuritycamera.net","mysecuritycamera.org","net-freaks.com","nflfan.org","nhlfan.net","no-ip.ca","no-ip.co.uk","no-ip.net","noip.us","onthewifi.com","pgafan.net","point2this.com","pointto.us","privatizehealthinsurance.net","quicksytes.com","read-books.org","securitytactics.com","serveexchange.com","servehumour.com","servep2p.com","servesarcasm.com","stufftoread.com","ufcfan.org","unusualperson.com","workisboring.com","3utilities.com","bounceme.net","ddns.net","ddnsking.com","gotdns.ch","hopto.org","myftp.biz","myftp.org","myvnc.com","no-ip.biz","no-ip.info","no-ip.org","noip.me","redirectme.net","servebeer.com","serveblog.net","servecounterstrike.com","serveftp.com","servegame.com","servehalflife.com","servehttp.com","serveirc.com","serveminecraft.net","servemp3.com","servepics.com","servequake.com","sytes.net","webhop.me","zapto.org","stage.nodeart.io","nodum.co","nodum.io","pcloud.host","nyc.mn","nom.ae","nom.af","nom.ai","nom.al","nym.by","nom.bz","nym.bz","nom.cl","nym.ec","nom.gd","nom.ge","nom.gl","nym.gr","nom.gt","nym.gy","nym.hk","nom.hn","nym.ie","nom.im","nom.ke","nym.kz","nym.la","nym.lc","nom.li","nym.li","nym.lt","nym.lu","nom.lv","nym.me","nom.mk","nym.mn","nym.mx","nom.nu","nym.nz","nym.pe","nym.pt","nom.pw","nom.qa","nym.ro","nom.rs","nom.si","nym.sk","nom.st","nym.su","nym.sx","nom.tj","nym.tw","nom.ug","nom.uy","nom.vc","nom.vg","static.observableusercontent.com","cya.gg","cloudycluster.net","nid.io","opencraft.hosting","operaunite.com","skygearapp.com","outsystemscloud.com","ownprovider.com","own.pm","ox.rs","oy.lc","pgfog.com","pagefrontapp.com","art.pl","gliwice.pl","krakow.pl","poznan.pl","wroc.pl","zakopane.pl","pantheonsite.io","gotpantheon.com","mypep.link","perspecta.cloud","on-web.fr","*.platform.sh","*.platformsh.site","dyn53.io","co.bn","xen.prgmr.com","priv.at","prvcy.page","*.dweb.link","protonet.io","chirurgiens-dentistes-en-france.fr","byen.site","pubtls.org","qualifioapp.com","qbuser.com","instantcloud.cn","ras.ru","qa2.com","qcx.io","*.sys.qcx.io","dev-myqnapcloud.com","alpha-myqnapcloud.com","myqnapcloud.com","*.quipelements.com","vapor.cloud","vaporcloud.io","rackmaze.com","rackmaze.net","*.on-k3s.io","*.on-rancher.cloud","*.on-rio.io","readthedocs.io","rhcloud.com","app.render.com","onrender.com","repl.co","repl.run","resindevice.io","devices.resinstaging.io","hzc.io","wellbeingzone.eu","ptplus.fit","wellbeingzone.co.uk","git-pages.rit.edu","sandcats.io","logoip.de","logoip.com","schokokeks.net","gov.scot","scrysec.com","firewall-gateway.com","firewall-gateway.de","my-gateway.de","my-router.de","spdns.de","spdns.eu","firewall-gateway.net","my-firewall.org","myfirewall.org","spdns.org","senseering.net","biz.ua","co.ua","pp.ua","shiftedit.io","myshopblocks.com","shopitsite.com","mo-siemens.io","1kapp.com","appchizi.com","applinzi.com","sinaapp.com","vipsinaapp.com","siteleaf.net","bounty-full.com","alpha.bounty-full.com","beta.bounty-full.com","stackhero-network.com","static.land","dev.static.land","sites.static.land","apps.lair.io","*.stolos.io","spacekit.io","customer.speedpartner.de","api.stdlib.com","storj.farm","utwente.io","soc.srcf.net","user.srcf.net","temp-dns.com","applicationcloud.io","scapp.io","*.s5y.io","*.sensiosite.cloud","syncloud.it","diskstation.me","dscloud.biz","dscloud.me","dscloud.mobi","dsmynas.com","dsmynas.net","dsmynas.org","familyds.com","familyds.net","familyds.org","i234.me","myds.me","synology.me","vpnplus.to","direct.quickconnect.to","taifun-dns.de","gda.pl","gdansk.pl","gdynia.pl","med.pl","sopot.pl","edugit.org","telebit.app","telebit.io","*.telebit.xyz","gwiddle.co.uk","thingdustdata.com","cust.dev.thingdust.io","cust.disrec.thingdust.io","cust.prod.thingdust.io","cust.testing.thingdust.io","arvo.network","azimuth.network","bloxcms.com","townnews-staging.com","12hp.at","2ix.at","4lima.at","lima-city.at","12hp.ch","2ix.ch","4lima.ch","lima-city.ch","trafficplex.cloud","de.cool","12hp.de","2ix.de","4lima.de","lima-city.de","1337.pictures","clan.rip","lima-city.rocks","webspace.rocks","lima.zone","*.transurl.be","*.transurl.eu","*.transurl.nl","tuxfamily.org","dd-dns.de","diskstation.eu","diskstation.org","dray-dns.de","draydns.de","dyn-vpn.de","dynvpn.de","mein-vigor.de","my-vigor.de","my-wan.de","syno-ds.de","synology-diskstation.de","synology-ds.de","uber.space","*.uberspace.de","hk.com","hk.org","ltd.hk","inc.hk","virtualuser.de","virtual-user.de","urown.cloud","dnsupdate.info","lib.de.us","2038.io","router.management","v-info.info","voorloper.cloud","v.ua","wafflecell.com","*.webhare.dev","wedeploy.io","wedeploy.me","wedeploy.sh","remotewd.com","wmflabs.org","myforum.community","community-pro.de","diskussionsbereich.de","community-pro.net","meinforum.net","half.host","xnbay.com","u2.xnbay.com","u2-local.xnbay.com","cistron.nl","demon.nl","xs4all.space","yandexcloud.net","storage.yandexcloud.net","website.yandexcloud.net","official.academy","yolasite.com","ybo.faith","yombo.me","homelink.one","ybo.party","ybo.review","ybo.science","ybo.trade","nohost.me","noho.st","za.net","za.org","now.sh","bss.design","basicserver.io","virtualserver.io","enterprisecloud.nu"]')},6244:(e,t,o)=>{"use strict";var a=o(3689),n={};n.rules=o(2156).map((function(e){return{rule:e,suffix:e.replace(/^(\*\.|\!)/,""),punySuffix:-1,wildcard:"*"===e.charAt(0),exception:"!"===e.charAt(0)}})),n.endsWith=function(e,t){return-1!==e.indexOf(t,e.length-t.length)},n.findRule=function(e){var t=a.toASCII(e);return n.rules.reduce((function(e,o){return-1===o.punySuffix&&(o.punySuffix=a.toASCII(o.suffix)),n.endsWith(t,"."+o.punySuffix)||t===o.punySuffix?o:e}),null)},t.errorCodes={DOMAIN_TOO_SHORT:"Domain name too short.",DOMAIN_TOO_LONG:"Domain name too long. It should be no more than 255 chars.",LABEL_STARTS_WITH_DASH:"Domain name label can not start with a dash.",LABEL_ENDS_WITH_DASH:"Domain name label can not end with a dash.",LABEL_TOO_LONG:"Domain name label should be at most 63 chars long.",LABEL_TOO_SHORT:"Domain name label should be at least 1 character long.",LABEL_INVALID_CHARS:"Domain name label can only contain alphanumeric characters or dashes."},n.validate=function(e){var t=a.toASCII(e);if(t.length<1)return"DOMAIN_TOO_SHORT";if(t.length>255)return"DOMAIN_TOO_LONG";for(var o,n=t.split("."),i=0;i<n.length;++i){if(!(o=n[i]).length)return"LABEL_TOO_SHORT";if(o.length>63)return"LABEL_TOO_LONG";if("-"===o.charAt(0))return"LABEL_STARTS_WITH_DASH";if("-"===o.charAt(o.length-1))return"LABEL_ENDS_WITH_DASH";if(!/^[a-z0-9\-]+$/.test(o))return"LABEL_INVALID_CHARS"}},t.parse=function(e){if("string"!=typeof e)throw new TypeError("Domain name must be a string.");var o=e.slice(0).toLowerCase();"."===o.charAt(o.length-1)&&(o=o.slice(0,o.length-1));var i=n.validate(o);if(i)return{input:e,error:{message:t.errorCodes[i],code:i}};var r={input:e,tld:null,sld:null,domain:null,subdomain:null,listed:!1},s=o.split(".");if("local"===s[s.length-1])return r;var u=function(){return/xn--/.test(o)?(r.domain&&(r.domain=a.toASCII(r.domain)),r.subdomain&&(r.subdomain=a.toASCII(r.subdomain)),r):r},c=n.findRule(o);if(!c)return s.length<2?r:(r.tld=s.pop(),r.sld=s.pop(),r.domain=[r.sld,r.tld].join("."),s.length&&(r.subdomain=s.pop()),u());r.listed=!0;var l=c.suffix.split("."),p=s.slice(0,s.length-l.length);return c.exception&&p.push(l.shift()),r.tld=l.join("."),p.length?(c.wildcard&&(l.unshift(p.pop()),r.tld=l.join(".")),p.length?(r.sld=p.pop(),r.domain=[r.sld,r.tld].join("."),p.length&&(r.subdomain=p.join(".")),u()):u()):u()},t.get=function(e){return e&&t.parse(e).domain||null},t.isValid=function(e){var o=t.parse(e);return Boolean(o.domain&&o.listed)}},3689:(e,t,o)=>{"use strict";o.r(t),o.d(t,{ucs2decode:()=>h,ucs2encode:()=>d,decode:()=>v,encode:()=>b,toASCII:()=>y,toUnicode:()=>k,default:()=>j});const a=2147483647,n=36,i=/^xn--/,r=/[^\0-\x7E]/,s=/[\x2E\u3002\uFF0E\uFF61]/g,u={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},c=Math.floor,l=String.fromCharCode;function p(e){throw new RangeError(u[e])}function m(e,t){const o=e.split("@");let a="";o.length>1&&(a=o[0]+"@",e=o[1]);const n=function(e,t){const o=[];let a=e.length;for(;a--;)o[a]=t(e[a]);return o}((e=e.replace(s,".")).split("."),t).join(".");return a+n}function h(e){const t=[];let o=0;const a=e.length;for(;o<a;){const n=e.charCodeAt(o++);if(n>=55296&&n<=56319&&o<a){const a=e.charCodeAt(o++);56320==(64512&a)?t.push(((1023&n)<<10)+(1023&a)+65536):(t.push(n),o--)}else t.push(n)}return t}const d=e=>String.fromCodePoint(...e),f=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},g=function(e,t,o){let a=0;for(e=o?c(e/700):e>>1,e+=c(e/t);e>455;a+=n)e=c(e/35);return c(a+36*e/(e+38))},v=function(e){const t=[],o=e.length;let i=0,r=128,s=72,u=e.lastIndexOf("-");u<0&&(u=0);for(let o=0;o<u;++o)e.charCodeAt(o)>=128&&p("not-basic"),t.push(e.charCodeAt(o));for(let m=u>0?u+1:0;m<o;){let u=i;for(let t=1,r=n;;r+=n){m>=o&&p("invalid-input");const u=(l=e.charCodeAt(m++))-48<10?l-22:l-65<26?l-65:l-97<26?l-97:n;(u>=n||u>c((a-i)/t))&&p("overflow"),i+=u*t;const h=r<=s?1:r>=s+26?26:r-s;if(u<h)break;const d=n-h;t>c(a/d)&&p("overflow"),t*=d}const h=t.length+1;s=g(i-u,h,0==u),c(i/h)>a-r&&p("overflow"),r+=c(i/h),i%=h,t.splice(i++,0,r)}var l;return String.fromCodePoint(...t)},b=function(e){const t=[];let o=(e=h(e)).length,i=128,r=0,s=72;for(const o of e)o<128&&t.push(l(o));let u=t.length,m=u;for(u&&t.push("-");m<o;){let o=a;for(const t of e)t>=i&&t<o&&(o=t);const h=m+1;o-i>c((a-r)/h)&&p("overflow"),r+=(o-i)*h,i=o;for(const o of e)if(o<i&&++r>a&&p("overflow"),o==i){let e=r;for(let o=n;;o+=n){const a=o<=s?1:o>=s+26?26:o-s;if(e<a)break;const i=e-a,r=n-a;t.push(l(f(a+i%r,0))),e=c(i/r)}t.push(l(f(e,0))),s=g(r,h,m==u),r=0,++m}++r,++i}return t.join("")},k=function(e){return m(e,(function(e){return i.test(e)?v(e.slice(4).toLowerCase()):e}))},y=function(e){return m(e,(function(e){return r.test(e)?"xn--"+b(e):e}))},j={version:"2.1.0",ucs2:{decode:h,encode:d},decode:v,encode:b,toASCII:y,toUnicode:k}},2587:e=>{"use strict";function t(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,o,a,n){o=o||"&",a=a||"=";var i={};if("string"!=typeof e||0===e.length)return i;var r=/\+/g;e=e.split(o);var s=1e3;n&&"number"==typeof n.maxKeys&&(s=n.maxKeys);var u=e.length;s>0&&u>s&&(u=s);for(var c=0;c<u;++c){var l,p,m,h,d=e[c].replace(r,"%20"),f=d.indexOf(a);f>=0?(l=d.substr(0,f),p=d.substr(f+1)):(l=d,p=""),m=decodeURIComponent(l),h=decodeURIComponent(p),t(i,m)?Array.isArray(i[m])?i[m].push(h):i[m]=[i[m],h]:i[m]=h}return i}},2361:e=>{"use strict";var t=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,o,a,n){return o=o||"&",a=a||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map((function(n){var i=encodeURIComponent(t(n))+a;return Array.isArray(e[n])?e[n].map((function(e){return i+encodeURIComponent(t(e))})).join(o):i+encodeURIComponent(t(e[n]))})).join(o):n?encodeURIComponent(t(n))+a+encodeURIComponent(t(e)):""}},7673:(e,t,o)=>{"use strict";t.decode=t.parse=o(2587),t.encode=t.stringify=o(2361)},8555:e=>{"use strict";e.exports={stdout:!1,stderr:!1}},7857:(e,t,o)=>{"use strict";const a=o(3689),n=o(8575).Qc,i=o(9539),r=o(752),s=o(2224).y,u=o(5761).m,c=o(8971).U,l=o(456),{fromCallback:p}=o(7041),m=/^[\x21\x23-\x2B\x2D-\x3A\x3C-\x5B\x5D-\x7E]+$/,h=/[\x00-\x1F]/,d=["\n","\r","\0"],f=/[\x20-\x3A\x3C-\x7E]+/,g=/[\x09\x20-\x2F\x3B-\x40\x5B-\x60\x7B-\x7E]/,v={jan:0,feb:1,mar:2,apr:3,may:4,jun:5,jul:6,aug:7,sep:8,oct:9,nov:10,dec:11},b=2147483647e3,k='Invalid sameSiteContext option for getCookies(); expected one of "strict", "lax", or "none"';function y(e){const t=String(e).toLowerCase();return"none"===t||"lax"===t||"strict"===t?t:null}const j=Object.freeze({SILENT:"silent",STRICT:"strict",DISABLED:"unsafe-disabled"});var w=/(?:^(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}$)|(?:^(?:(?:[a-f\d]{1,4}:){7}(?:[a-f\d]{1,4}|:)|(?:[a-f\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|:[a-f\d]{1,4}|:)|(?:[a-f\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,2}|:)|(?:[a-f\d]{1,4}:){4}(?:(?::[a-f\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,3}|:)|(?:[a-f\d]{1,4}:){3}(?:(?::[a-f\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,4}|:)|(?:[a-f\d]{1,4}:){2}(?:(?::[a-f\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,5}|:)|(?:[a-f\d]{1,4}:){1}(?:(?::[a-f\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,6}|:)|(?::(?:(?::[a-f\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,7}|:)))$)/;function x(e,t,o,a){let n=0;for(;n<e.length;){const t=e.charCodeAt(n);if(t<=47||t>=58)break;n++}return n<t||n>o?null:a||n==e.length?parseInt(e.substr(0,n),10):null}function C(e){const t=e.split(":"),o=[0,0,0];if(3!==t.length)return null;for(let e=0;e<3;e++){const a=2==e,n=x(t[e],1,2,a);if(null===n)return null;o[e]=n}return o}function z(e){e=String(e).substr(0,3).toLowerCase();const t=v[e];return t>=0?t:null}function S(e){if(!e)return;const t=e.split(g);if(!t)return;let o=null,a=null,n=null,i=null,r=null,s=null;for(let e=0;e<t.length;e++){const u=t[e].trim();if(!u.length)continue;let c;null===n&&(c=C(u),c)?(o=c[0],a=c[1],n=c[2]):null!==i||(c=x(u,1,2,!0),null===c)?null!==r||(c=z(u),null===c)?null===s&&(c=x(u,2,4,!0),null!==c&&(s=c,s>=70&&s<=99?s+=1900:s>=0&&s<=69&&(s+=2e3))):r=c:i=c}return null===i||null===r||null===s||null===n||i<1||i>31||s<1601||o>23||a>59||n>59?void 0:new Date(Date.UTC(s,r,i,o,a,n))}function _(e){return e.toUTCString()}function O(e){return null==e?null:(e=e.trim().replace(/^\./,""),a&&/[^\u0001-\u007f]/.test(e)&&(e=a.toASCII(e)),e.toLowerCase())}function E(e,t,o){if(null==e||null==t)return null;if(!1!==o&&(e=O(e),t=O(t)),e==t)return!0;const a=e.indexOf(t);return!(a<=0)&&(e.length===t.length+a&&("."===e.substr(a-1,1)&&!w.test(e)))}function A(e){if(!e||"/"!==e.substr(0,1))return"/";if("/"===e)return e;const t=e.lastIndexOf("/");return 0===t?"/":e.slice(0,t)}function T(e,t){let o,a,n=(e=function(e){for(let t=0;t<d.length;t++){const o=e.indexOf(d[t]);-1!==o&&(e=e.substr(0,o))}return e}(e)).indexOf("=");if(t)0===n&&(n=(e=e.substr(1)).indexOf("="));else if(n<=0)return;if(n<=0?(o="",a=e.trim()):(o=e.substr(0,n).trim(),a=e.substr(n+1).trim()),h.test(o)||h.test(a))return;const i=new N;return i.key=o,i.value=a,i}function P(e,t){t&&"object"==typeof t||(t={});const o=(e=e.trim()).indexOf(";"),a=T(-1===o?e:e.substr(0,o),!!t.loose);if(!a)return;if(-1===o)return a;const n=e.slice(o+1).trim();if(0===n.length)return a;const i=n.split(";");for(;i.length;){const e=i.shift().trim();if(0===e.length)continue;const t=e.indexOf("=");let o,n;switch(-1===t?(o=e,n=null):(o=e.substr(0,t),n=e.substr(t+1)),o=o.trim().toLowerCase(),n&&(n=n.trim()),o){case"expires":if(n){const e=S(n);e&&(a.expires=e)}break;case"max-age":if(n&&/^-?[0-9]+$/.test(n)){const e=parseInt(n,10);a.setMaxAge(e)}break;case"domain":if(n){const e=n.trim().replace(/^\./,"");e&&(a.domain=e.toLowerCase())}break;case"path":a.path=n&&"/"===n[0]?n:null;break;case"secure":a.secure=!0;break;case"httponly":a.httpOnly=!0;break;case"samesite":switch(n?n.toLowerCase():""){case"strict":a.sameSite="strict";break;case"lax":a.sameSite="lax"}break;default:a.extensions=a.extensions||[],a.extensions.push(e)}}return a}function q(e){let t;try{t=JSON.parse(e)}catch(e){return e}return t}function M(e){if(!e)return null;let t;if("string"==typeof e){if(t=q(e),t instanceof Error)return null}else t=e;const o=new N;for(let e=0;e<N.serializableProperties.length;e++){const a=N.serializableProperties[e];void 0!==t[a]&&t[a]!==U[a]&&("expires"===a||"creation"===a||"lastAccessed"===a?null===t[a]?o[a]=null:o[a]="Infinity"==t[a]?"Infinity":new Date(t[a]):o[a]=t[a])}return o}function L(e,t){let o=0;const a=e.path?e.path.length:0;if(o=(t.path?t.path.length:0)-a,0!==o)return o;return o=(e.creation?e.creation.getTime():b)-(t.creation?t.creation.getTime():b),0!==o||(o=e.creationIndex-t.creationIndex),o}function R(e){if(e instanceof Object)return e;try{e=decodeURI(e)}catch(e){}return n(e)}const U={key:"",value:"",expires:"Infinity",maxAge:null,domain:null,path:null,secure:!1,httpOnly:!1,extensions:null,hostOnly:null,pathIsDefault:null,creation:null,lastAccessed:null,sameSite:"none"};class N{constructor(e={}){i.inspect.custom&&(this[i.inspect.custom]=this.inspect),Object.assign(this,U,e),this.creation=this.creation||new Date,Object.defineProperty(this,"creationIndex",{configurable:!1,enumerable:!1,writable:!0,value:++N.cookiesCreated})}inspect(){const e=Date.now(),t=null!=this.hostOnly?this.hostOnly:"?",o=this.creation?e-this.creation.getTime()+"ms":"?",a=this.lastAccessed?e-this.lastAccessed.getTime()+"ms":"?";return`Cookie="${this.toString()}; hostOnly=${t}; aAge=${a}; cAge=${o}"`}toJSON(){const e={};for(const t of N.serializableProperties)this[t]!==U[t]&&("expires"===t||"creation"===t||"lastAccessed"===t?null===this[t]?e[t]=null:e[t]="Infinity"==this[t]?"Infinity":this[t].toISOString():"maxAge"===t?null!==this[t]&&(e[t]=this[t]==1/0||this[t]==-1/0?this[t].toString():this[t]):this[t]!==U[t]&&(e[t]=this[t]));return e}clone(){return M(this.toJSON())}validate(){if(!m.test(this.value))return!1;if(!(this.expires==1/0||this.expires instanceof Date||S(this.expires)))return!1;if(null!=this.maxAge&&this.maxAge<=0)return!1;if(null!=this.path&&!f.test(this.path))return!1;const e=this.cdomain();if(e){if(e.match(/\.$/))return!1;if(null==r.getPublicSuffix(e))return!1}return!0}setExpires(e){e instanceof Date?this.expires=e:this.expires=S(e)||"Infinity"}setMaxAge(e){this.maxAge=e===1/0||e===-1/0?e.toString():e}cookieString(){let e=this.value;return null==e&&(e=""),""===this.key?e:`${this.key}=${e}`}toString(){let e=this.cookieString();if(this.expires!=1/0&&(this.expires instanceof Date?e+=`; Expires=${_(this.expires)}`:e+=`; Expires=${this.expires}`),null!=this.maxAge&&this.maxAge!=1/0&&(e+=`; Max-Age=${this.maxAge}`),this.domain&&!this.hostOnly&&(e+=`; Domain=${this.domain}`),this.path&&(e+=`; Path=${this.path}`),this.secure&&(e+="; Secure"),this.httpOnly&&(e+="; HttpOnly"),this.sameSite&&"none"!==this.sameSite){const t=N.sameSiteCanonical[this.sameSite.toLowerCase()];e+=`; SameSite=${t||this.sameSite}`}return this.extensions&&this.extensions.forEach((t=>{e+=`; ${t}`})),e}TTL(e){if(null!=this.maxAge)return this.maxAge<=0?0:1e3*this.maxAge;let t=this.expires;return t!=1/0?(t instanceof Date||(t=S(t)||1/0),t==1/0?1/0:t.getTime()-(e||Date.now())):1/0}expiryTime(e){if(null!=this.maxAge){const t=e||this.creation||new Date,o=this.maxAge<=0?-1/0:1e3*this.maxAge;return t.getTime()+o}return this.expires==1/0?1/0:this.expires.getTime()}expiryDate(e){const t=this.expiryTime(e);return t==1/0?new Date(b):t==-1/0?new Date(0):new Date(t)}isPersistent(){return null!=this.maxAge||this.expires!=1/0}canonicalizedDomain(){return null==this.domain?null:O(this.domain)}cdomain(){return this.canonicalizedDomain()}}N.cookiesCreated=0,N.parse=P,N.fromJSON=M,N.serializableProperties=Object.keys(U),N.sameSiteLevel={strict:3,lax:2,none:1},N.sameSiteCanonical={strict:"Strict",lax:"Lax"};class I{constructor(e,t={rejectPublicSuffixes:!0}){"boolean"==typeof t&&(t={rejectPublicSuffixes:t}),this.rejectPublicSuffixes=t.rejectPublicSuffixes,this.enableLooseMode=!!t.looseMode,this.allowSpecialUseDomain=!!t.allowSpecialUseDomain,this.store=e||new u,this.prefixSecurity=function(e){if(null!=e){const t=e.toLowerCase();switch(t){case j.STRICT:case j.SILENT:case j.DISABLED:return t}}return j.SILENT}(t.prefixSecurity),this._cloneSync=F("clone"),this._importCookiesSync=F("_importCookies"),this.getCookiesSync=F("getCookies"),this.getCookieStringSync=F("getCookieString"),this.getSetCookieStringsSync=F("getSetCookieStrings"),this.removeAllCookiesSync=F("removeAllCookies"),this.setCookieSync=F("setCookie"),this.serializeSync=F("serialize")}setCookie(e,t,o,a){let n;const i=R(t);"function"==typeof o&&(a=o,o={});const s=O(i.hostname),u=o.loose||this.enableLooseMode;let c=null;if(o.sameSiteContext&&(c=y(o.sameSiteContext),!c))return a(new Error(k));if("string"==typeof e||e instanceof String){if(!(e=N.parse(e,{loose:u})))return n=new Error("Cookie failed to parse"),a(o.ignoreError?null:n)}else if(!(e instanceof N))return n=new Error("First argument to setCookie must be a Cookie object or string"),a(o.ignoreError?null:n);const l=o.now||new Date;if(this.rejectPublicSuffixes&&e.domain){if(null==r.getPublicSuffix(e.cdomain()))return n=new Error("Cookie has domain set to a public suffix"),a(o.ignoreError?null:n)}if(e.domain){if(!E(s,e.cdomain(),!1))return n=new Error(`Cookie not in this host's domain. Cookie:${e.cdomain()} Request:${s}`),a(o.ignoreError?null:n);null==e.hostOnly&&(e.hostOnly=!1)}else e.hostOnly=!0,e.domain=s;if(e.path&&"/"===e.path[0]||(e.path=A(i.pathname),e.pathIsDefault=!0),!1===o.http&&e.httpOnly)return n=new Error("Cookie is HttpOnly and this isn't an HTTP API"),a(o.ignoreError?null:n);if("none"!==e.sameSite&&c&&"none"===c)return n=new Error("Cookie is SameSite but this is a cross-origin request"),a(o.ignoreError?null:n);const p=this.prefixSecurity===j.SILENT;if(!(this.prefixSecurity===j.DISABLED)){let t,n=!1;if(!function(e){return!e.key.startsWith("__Secure-")||e.secure}(e)?(n=!0,t="Cookie has __Secure prefix but Secure attribute is not set"):function(e){return!e.key.startsWith("__Host-")||e.secure&&e.hostOnly&&null!=e.path&&"/"===e.path}(e)||(n=!0,t="Cookie has __Host prefix but either Secure or HostOnly attribute is not set or Path is not '/'"),n)return a(o.ignoreError||p?null:new Error(t))}const m=this.store;m.updateCookie||(m.updateCookie=function(e,t,o){this.putCookie(t,o)}),m.findCookie(e.domain,e.path,e.key,(function(t,n){if(t)return a(t);const i=function(t){if(t)return a(t);a(null,e)};if(n){if(!1===o.http&&n.httpOnly)return t=new Error("old Cookie is HttpOnly and this isn't an HTTP API"),a(o.ignoreError?null:t);e.creation=n.creation,e.creationIndex=n.creationIndex,e.lastAccessed=l,m.updateCookie(n,e,i)}else e.creation=e.lastAccessed=l,m.putCookie(e,i)}))}getCookies(e,t,o){const a=R(e);"function"==typeof t&&(o=t,t={});const n=O(a.hostname),i=a.pathname||"/";let r=t.secure;null!=r||!a.protocol||"https:"!=a.protocol&&"wss:"!=a.protocol||(r=!0);let s=0;if(t.sameSiteContext){const e=y(t.sameSiteContext);if(s=N.sameSiteLevel[e],!s)return o(new Error(k))}let u=t.http;null==u&&(u=!0);const l=t.now||Date.now(),p=!1!==t.expire,m=!!t.allPaths,h=this.store;function d(e){if(e.hostOnly){if(e.domain!=n)return!1}else if(!E(n,e.domain,!1))return!1;if(!m&&!c(i,e.path))return!1;if(e.secure&&!r)return!1;if(e.httpOnly&&!u)return!1;if(s){if(N.sameSiteLevel[e.sameSite||"none"]>s)return!1}return!(p&&e.expiryTime()<=l)||(h.removeCookie(e.domain,e.path,e.key,(()=>{})),!1)}h.findCookies(n,m?null:i,this.allowSpecialUseDomain,((e,a)=>{if(e)return o(e);a=a.filter(d),!1!==t.sort&&(a=a.sort(L));const n=new Date;for(const e of a)e.lastAccessed=n;o(null,a)}))}getCookieString(...e){const t=e.pop();e.push((function(e,o){e?t(e):t(null,o.sort(L).map((e=>e.cookieString())).join("; "))})),this.getCookies.apply(this,e)}getSetCookieStrings(...e){const t=e.pop();e.push((function(e,o){e?t(e):t(null,o.map((e=>e.toString())))})),this.getCookies.apply(this,e)}serialize(e){let t=this.store.constructor.name;"Object"===t&&(t=null);const o={version:`tough-cookie@${l}`,storeType:t,rejectPublicSuffixes:!!this.rejectPublicSuffixes,cookies:[]};if(!this.store.getAllCookies||"function"!=typeof this.store.getAllCookies)return e(new Error("store does not support getAllCookies and cannot be serialized"));this.store.getAllCookies(((t,a)=>t?e(t):(o.cookies=a.map((e=>(delete(e=e instanceof N?e.toJSON():e).creationIndex,e))),e(null,o))))}toJSON(){return this.serializeSync()}_importCookies(e,t){let o=e.cookies;if(!o||!Array.isArray(o))return t(new Error("serialized jar has no cookies array"));o=o.slice();const a=e=>{if(e)return t(e);if(!o.length)return t(e,this);let n;try{n=M(o.shift())}catch(e){return t(e)}if(null===n)return a(null);this.store.putCookie(n,a)};a()}clone(e,t){1===arguments.length&&(t=e,e=null),this.serialize(((o,a)=>{if(o)return t(o);I.deserialize(a,e,t)}))}cloneSync(e){if(0===arguments.length)return this._cloneSync();if(!e.synchronous)throw new Error("CookieJar clone destination store is not synchronous; use async API instead.");return this._cloneSync(e)}removeAllCookies(e){const t=this.store;if("function"==typeof t.removeAllCookies&&t.removeAllCookies!==s.prototype.removeAllCookies)return t.removeAllCookies(e);t.getAllCookies(((o,a)=>{if(o)return e(o);if(0===a.length)return e(null);let n=0;const i=[];function r(t){if(t&&i.push(t),n++,n===a.length)return e(i.length?i[0]:null)}a.forEach((e=>{t.removeCookie(e.domain,e.path,e.key,r)}))}))}static deserialize(e,t,o){let a;if(3!==arguments.length&&(o=t,t=null),"string"==typeof e){if(a=q(e),a instanceof Error)return o(a)}else a=e;const n=new I(t,a.rejectPublicSuffixes);n._importCookies(a,(e=>{if(e)return o(e);o(null,n)}))}static deserializeSync(e,t){const o="string"==typeof e?JSON.parse(e):e,a=new I(t,o.rejectPublicSuffixes);if(!a.store.synchronous)throw new Error("CookieJar store is not synchronous; use async API instead.");return a._importCookiesSync(o),a}}function F(e){return function(...t){if(!this.store.synchronous)throw new Error("CookieJar store is not synchronous; use async API instead.");let o,a;if(this[e](...t,((e,t)=>{o=e,a=t})),o)throw o;return a}}I.fromJSON=I.deserializeSync,["_importCookies","clone","getCookies","getCookieString","getSetCookieStrings","removeAllCookies","serialize","setCookie"].forEach((e=>{I.prototype[e]=p(I.prototype[e])})),I.deserialize=p(I.deserialize),t.version=l,t.CookieJar=I,t.Cookie=N,t.Store=s,t.MemoryCookieStore=u,t.parseDate=S,t.formatDate=_,t.parse=P,t.fromJSON=M,t.domainMatch=E,t.defaultPath=A,t.pathMatch=c,t.getPublicSuffix=r.getPublicSuffix,t.cookieCompare=L,t.permuteDomain=o(7324).permuteDomain,t.permutePath=function(e){if("/"===e)return["/"];const t=[e];for(;e.length>1;){const o=e.lastIndexOf("/");if(0===o)break;e=e.substr(0,o),t.push(e)}return t.push("/"),t},t.canonicalDomain=O,t.PrefixSecurityEnum=j},5761:(e,t,o)=>{"use strict";const{fromCallback:a}=o(7041),n=o(2224).y,i=o(7324).permuteDomain,r=o(8971).U,s=o(9539);class u extends n{constructor(){super(),this.synchronous=!0,this.idx={},s.inspect.custom&&(this[s.inspect.custom]=this.inspect)}inspect(){return`{ idx: ${s.inspect(this.idx,!1,2)} }`}findCookie(e,t,o,a){return this.idx[e]&&this.idx[e][t]?a(null,this.idx[e][t][o]||null):a(null,void 0)}findCookies(e,t,o,a){const n=[];if("function"==typeof o&&(a=o,o=!1),!e)return a(null,[]);let s;s=t?function(e){Object.keys(e).forEach((o=>{if(r(t,o)){const t=e[o];for(const e in t)n.push(t[e])}}))}:function(e){for(const t in e){const o=e[t];for(const e in o)n.push(o[e])}};const u=i(e,o)||[e],c=this.idx;u.forEach((e=>{const t=c[e];t&&s(t)})),a(null,n)}putCookie(e,t){this.idx[e.domain]||(this.idx[e.domain]={}),this.idx[e.domain][e.path]||(this.idx[e.domain][e.path]={}),this.idx[e.domain][e.path][e.key]=e,t(null)}updateCookie(e,t,o){this.putCookie(t,o)}removeCookie(e,t,o,a){this.idx[e]&&this.idx[e][t]&&this.idx[e][t][o]&&delete this.idx[e][t][o],a(null)}removeCookies(e,t,o){return this.idx[e]&&(t?delete this.idx[e][t]:delete this.idx[e]),o(null)}removeAllCookies(e){return this.idx={},e(null)}getAllCookies(e){const t=[],o=this.idx;Object.keys(o).forEach((e=>{Object.keys(o[e]).forEach((a=>{Object.keys(o[e][a]).forEach((n=>{null!==n&&t.push(o[e][a][n])}))}))})),t.sort(((e,t)=>(e.creationIndex||0)-(t.creationIndex||0))),e(null,t)}}["findCookie","findCookies","putCookie","updateCookie","removeCookie","removeCookies","removeAllCookies","getAllCookies"].forEach((e=>{u[e]=a(u.prototype[e])})),t.m=u},8971:(e,t)=>{"use strict";t.U=function(e,t){if(t===e)return!0;if(0===e.indexOf(t)){if("/"===t.substr(-1))return!0;if("/"===e.substr(t.length,1))return!0}return!1}},7324:(e,t,o)=>{"use strict";const a=o(752),n=["local"];t.permuteDomain=function(e,t){let o=null;if(t){const t=e.split(".");o=n.includes(t[t.length-1])?`${t[t.length-2]}.${t[t.length-1]}`:a.getPublicSuffix(e)}else o=a.getPublicSuffix(e);if(!o)return null;if(o==e)return[e];const i=e.slice(0,-(o.length+1)).split(".").reverse();let r=o;const s=[r];for(;i.length;)r=`${i.shift()}.${r}`,s.push(r);return s}},752:(e,t,o)=>{"use strict";const a=o(6244);t.getPublicSuffix=function(e){return a.get(e)}},2224:(e,t)=>{"use strict";t.y=class{constructor(){this.synchronous=!1}findCookie(e,t,o,a){throw new Error("findCookie is not implemented")}findCookies(e,t,o,a){throw new Error("findCookies is not implemented")}putCookie(e,t){throw new Error("putCookie is not implemented")}updateCookie(e,t,o){throw new Error("updateCookie is not implemented")}removeCookie(e,t,o,a){throw new Error("removeCookie is not implemented")}removeCookies(e,t,o){throw new Error("removeCookies is not implemented")}removeAllCookies(e){throw new Error("removeAllCookies is not implemented")}getAllCookies(e){throw new Error("getAllCookies is not implemented (therefore jar cannot be serialized)")}}},456:e=>{e.exports="4.0.0"},7041:(e,t)=>{"use strict";t.fromCallback=function(e){return Object.defineProperty((function(){if("function"!=typeof arguments[arguments.length-1])return new Promise(((t,o)=>{arguments[arguments.length]=(e,a)=>{if(e)return o(e);t(a)},arguments.length++,e.apply(this,arguments)}));e.apply(this,arguments)}),"name",{value:e.name})},t.fromPromise=function(e){return Object.defineProperty((function(){const t=arguments[arguments.length-1];if("function"!=typeof t)return e.apply(this,arguments);e.apply(this,arguments).then((e=>t(null,e)),t)}),"name",{value:e.name})}},672:function(e,t,o){"use strict";var a=this&&this.__assign||function(){return(a=Object.assign||function(e){for(var t,o=1,a=arguments.length;o<a;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},n=this&&this.__awaiter||function(e,t,o,a){return new(o||(o=Promise))((function(n,i){function r(e){try{u(a.next(e))}catch(e){i(e)}}function s(e){try{u(a.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}u((a=a.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var o,a,n,i,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;r;)try{if(o=1,a&&(n=2&i[0]?a.return:i[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,i[1])).done)return n;switch(a=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!(n=r.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){r.label=i[1];break}if(6===i[0]&&r.label<n[1]){r.label=n[1],n=i;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(i);break}n[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.ContextManager=void 0;var r=o(5928),s=o(9778),u=function(){function e(e,t){this.serverUrl=e,this.requestClient=t,this.defaultComputeContexts=["CAS Formats service compute context","Data Mining compute context","Import 9 service compute context","SAS Job Execution compute context","SAS Model Manager compute context","SAS Studio compute context","SAS Visual Forecasting compute context"],this.defaultLauncherContexts=["CAS Formats service launcher context","Data Mining launcher context","Import 9 service launcher context","Job Flow Execution launcher context","SAS Job Execution launcher context","SAS Model Manager launcher context","SAS Studio launcher context","SAS Visual Forecasting launcher context"],e&&r.isUrl(e)}return Object.defineProperty(e.prototype,"getDefaultComputeContexts",{get:function(){return this.defaultComputeContexts},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"getDefaultLauncherContexts",{get:function(){return this.defaultLauncherContexts},enumerable:!1,configurable:!0}),e.prototype.getComputeContexts=function(e){return n(this,void 0,void 0,(function(){var t;return i(this,(function(o){switch(o.label){case 0:return[4,this.requestClient.get(this.serverUrl+"/compute/contexts?limit=10000",e).catch((function(e){throw s.prefixMessage(e,"Error while getting compute contexts. ")}))];case 1:return t=o.sent().result,[2,(t&&t.items?t.items:[]).map((function(e){return{createdBy:e.createdBy,id:e.id,name:e.name,version:e.version,attributes:{}}}))]}}))}))},e.prototype.getLauncherContexts=function(e){return n(this,void 0,void 0,(function(){var t;return i(this,(function(o){switch(o.label){case 0:return[4,this.requestClient.get(this.serverUrl+"/launcher/contexts?limit=10000",e).catch((function(e){throw s.prefixMessage(e,"Error while getting launcher contexts. ")}))];case 1:return t=o.sent().result,[2,(t&&t.items?t.items:[]).map((function(e){return{createdBy:e.createdBy,id:e.id,name:e.name,version:e.version,attributes:{}}}))]}}))}))},e.prototype.createComputeContext=function(e,t,o,r,u,c){return n(this,void 0,void 0,(function(){var n,l,p,m,h;return i(this,(function(i){switch(i.label){case 0:return this.validateContextName(e),this.isDefaultContext(e,this.defaultComputeContexts,"Compute context '"+e+"' already exists."),[4,this.getComputeContexts(u)];case 1:if(i.sent().find((function(t){return t.name===e})))throw new Error("Compute context '"+e+"' already exists.");return t?this.defaultLauncherContexts.includes(t)?[3,4]:[4,this.getLauncherContexts(u)]:[3,4];case 2:return i.sent().find((function(e){return e.name===t}))?[3,4]:(n="The launcher context for "+t,"direct",[4,this.createLauncherContext(t,n,"direct",u).catch((function(e){throw new Error("Error while creating launcher context. "+e)}))]);case 3:if(!(l=i.sent())||!l.name)throw new Error("Error while creating launcher context.");t=l.name,i.label=4;case 4:return p={"Content-Type":"application/json"},u&&(p.Authorization="Bearer "+u),m={reuseServerProcesses:!0},o&&(m=a(a({},m),{runServerAs:o})),h={name:e,launchContext:{contextName:t||""},attributes:m},c&&c.length?h.authorizedUsers=c:h.authorizeAllAuthenticatedUsers=!0,r&&(h.environment={autoExecLines:r}),[4,this.requestClient.post(this.serverUrl+"/compute/contexts",h,u).catch((function(e){throw s.prefixMessage(e,"Error while creating compute context. ")}))];case 5:return[2,i.sent().result]}}))}))},e.prototype.createLauncherContext=function(e,t,o,a){return void 0===o&&(o="direct"),n(this,void 0,void 0,(function(){var n,r;return i(this,(function(i){switch(i.label){case 0:if(!e)throw new Error("Context name is required.");return this.isDefaultContext(e,this.defaultLauncherContexts,"Launcher context '"+e+"' already exists."),[4,this.getLauncherContexts(a)];case 1:if(i.sent().find((function(t){return t.name===e})))throw new Error("Launcher context '"+e+"' already exists.");return n={"Content-Type":"application/json"},a&&(n.Authorization="Bearer "+a),r={name:e,description:t,launchType:o},[4,this.requestClient.post(this.serverUrl+"/launcher/contexts",r,a).catch((function(e){throw s.prefixMessage(e,"Error while creating launcher context. ")}))];case 2:return[2,i.sent().result]}}))}))},e.prototype.editComputeContext=function(e,t,o){return n(this,void 0,void 0,(function(){var n,r,s,u;return i(this,(function(i){switch(i.label){case 0:return this.validateContextName(e),this.isDefaultContext(e,this.defaultComputeContexts,"Editing default SAS compute contexts is not allowed.",!0),[4,this.getComputeContextByName(e,o)];case 1:return(n=i.sent())?[3,3]:[4,this.getComputeContextById(t.id,o)];case 2:n=i.sent(),i.label=3;case 3:return[4,this.requestClient.get(this.serverUrl+"/compute/contexts/"+n.id,o).catch((function(t){if(t&&404===t.status)throw new Error("The context '"+e+"' was not found on this server.");throw t}))];case 4:return r=i.sent(),s=r.result,u=r.etag,[4,this.requestClient.put("/compute/contexts/"+s.id,a(a(a({},s),t),{attributes:a(a({},s.attributes),t.attributes)}),o,{"If-Match":u})];case 5:return[2,i.sent()]}}))}))},e.prototype.getComputeContextByName=function(e,t){return n(this,void 0,void 0,(function(){var o;return i(this,(function(a){switch(a.label){case 0:return[4,this.requestClient.get(this.serverUrl+'/compute/contexts?filter=eq(name, "'+e+'")',t).catch((function(e){throw s.prefixMessage(e,"Error while getting compute context by name. ")}))];case 1:if(!(o=a.sent().result)||!o.items||!o.items.length)throw new Error("The context '"+e+"' was not found at '"+this.serverUrl+"'.");return[2,o.items[0]]}}))}))},e.prototype.getComputeContextById=function(e,t){return n(this,void 0,void 0,(function(){return i(this,(function(o){switch(o.label){case 0:return[4,this.requestClient.get(this.serverUrl+"/compute/contexts/"+e,t).catch((function(e){throw s.prefixMessage(e,"Error while getting compute context by id. ")}))];case 1:return[2,o.sent().result]}}))}))},e.prototype.getExecutableContexts=function(e,t){return n(this,void 0,void 0,(function(){var o,a,n,r,u,c,l,p,m,h;return i(this,(function(i){switch(i.label){case 0:return[4,this.requestClient.get(this.serverUrl+"/compute/contexts?limit=10000",t).catch((function(e){throw s.prefixMessage(e,"Error while fetching compute contexts.")}))];case 1:o=i.sent().result,a=o.items||[],n=[],r=a.map((function(o){var a=["%put &=sysuserid;"];return function(){return e("test-"+o.name,a,o.name,t,null,!1,!0,!0).catch((function(e){return e}))}})),u=[],c=0,l=r,i.label=2;case 2:return c<l.length?(p=l[c],h=(m=u).push,[4,p()]):[3,5];case 3:h.apply(m,[i.sent()]),i.label=4;case 4:return c++,[3,2];case 5:return u.forEach((function(e,t){if(e&&e.log)try{var o=e.log,i="",r=o.split("\n").find((function(e){return e.startsWith("SYSUSERID=")}));r&&(i=r.replace("SYSUSERID=",""),n.push({createdBy:a[t].createdBy,id:a[t].id,name:a[t].name,version:a[t].version,attributes:{sysUserId:i}}))}catch(e){throw e}})),[2,n]}}))}))},e.prototype.deleteComputeContext=function(e,t){return n(this,void 0,void 0,(function(){var o,a;return i(this,(function(n){switch(n.label){case 0:return this.validateContextName(e),this.isDefaultContext(e,this.defaultComputeContexts,"Deleting default SAS compute contexts is not allowed.",!0),o={"Content-Type":"application/json"},t&&(o.Authorization="Bearer "+t),[4,this.getComputeContextByName(e,t)];case 1:return a=n.sent(),[4,this.requestClient.delete(this.serverUrl+"/compute/contexts/"+a.id,t)];case 2:return[2,n.sent()]}}))}))},e.prototype.validateContextName=function(e){if(!e)throw new Error("Context name is required.")},e.prototype.isDefaultContext=function(e,t,o,a){if(void 0===t&&(t=this.defaultComputeContexts),void 0===o&&(o=""),void 0===a&&(a=!1),t.includes(e))throw new Error(o+(a?"\nDefault contexts:"+t.map((function(e,t){return"\n"+(t+1)+". "+e})):""))},e}();t.ContextManager=u},7010:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileUploader=void 0;var a=o(5928),n=o(1395),i=o(3900),r=function(){function e(e,t,o){this.sasjsConfig=e,this.jobsPath=t,this.requestClient=o,this.sasjsConfig.serverUrl&&a.isUrl(this.sasjsConfig.serverUrl)}return e.prototype.uploadFile=function(e,t,o){if((null==t?void 0:t.length)<1)return Promise.reject(new n.ErrorResponse("At least one file must be provided."));if(!e||""===e)return Promise.reject(new n.ErrorResponse("sasJob must be provided."));var a="";for(var r in o)o.hasOwnProperty(r)&&(a+="&"+r+"="+o[r]);for(var s=this.sasjsConfig.appLoc?this.sasjsConfig.appLoc.replace(/\/?$/,"/")+e.replace(/^\//,""):e,u=this.jobsPath+"/?_program="+s+a,c=new FormData,l=0,p=t;l<p.length;l++){var m=p[l];c.append("file",m.file,m.fileName)}var h=this.requestClient.getCsrfToken("file");h&&c.append("_csrf",h.value),this.sasjsConfig.debug&&c.append("_debug","131"),this.sasjsConfig.serverType===i.ServerType.SasViya&&this.sasjsConfig.contextName&&c.append("_contextname",this.sasjsConfig.contextName);return this.requestClient.post(u,c,void 0,"application/json",{"cache-control":"no-cache",Accept:"*/*","Content-Type":"text/plain"}).then((function(e){return"string"==typeof e.result?JSON.parse(e.result):e.result})).catch((function(e){return e instanceof n.LoginRequiredError?Promise.reject(new n.ErrorResponse("You must be logged in to upload a file.",e)):Promise.reject(new n.ErrorResponse("File upload request failed.",e))}))},e}();t.FileUploader=r},8306:function(e,t,o){"use strict";var a=this&&this.__awaiter||function(e,t,o,a){return new(o||(o=Promise))((function(n,i){function r(e){try{u(a.next(e))}catch(e){i(e)}}function s(e){try{u(a.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}u((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var o,a,n,i,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;r;)try{if(o=1,a&&(n=2&i[0]?a.return:i[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,i[1])).done)return n;switch(a=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!(n=r.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){r.label=i[1];break}if(6===i[0]&&r.label<n[1]){r.label=n[1],n=i;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(i);break}n[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},i=this&&this.__spreadArray||function(e,t){for(var o=0,a=t.length,n=e.length;o<a;o++,n++)e[n]=t[o];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.SAS9ApiClient=void 0;var r=o(7757),s=o(6230),u=o(795),c=o(5928),l=function(){function e(e,t){this.serverUrl=e,this.jobsPath=t,e&&c.isUrl(e),this.requestClient=new u.Sas9RequestClient(e,!1)}return e.prototype.getConfig=function(){return{serverUrl:this.serverUrl}},e.prototype.setConfig=function(e){e&&(this.serverUrl=e)},e.prototype.executeScript=function(e,t,o){return a(this,void 0,void 0,(function(){var a,r,s,u,c,l,m;return n(this,(function(n){switch(n.label){case 0:return[4,this.requestClient.login(t,o,this.jobsPath)];case 1:return n.sent(),a=["data _null_;","file _webout;","put 'Executed sasjs run';","run;"],r=p(i(i([],e),a).join("\n")),s="/User Folders/"+t+"/My Folder/sasjs/runner",u="multipart/form-data; boundary="+r.getBoundary(),c=r.getLengthSync(),l={"cache-control":"no-cache",Accept:"*/*","Content-Type":u,"Content-Length":c,Connection:"keep-alive"},m=this.jobsPath+"/?_program="+s+"&_debug=log",[4,this.requestClient.post(m,r,void 0,u,l)];case 2:return[2,n.sent().result]}}))}))},e}();t.SAS9ApiClient=l;var p=function(e){var t=new s,o="sasjs-execute-sas9-"+r.generateTimestamp("")+".sas";return t.append(o,e,{filename:o,contentType:"text/plain"}),t}},9821:function(e,t,o){"use strict";var a=this&&this.__assign||function(){return(a=Object.assign||function(e){for(var t,o=1,a=arguments.length;o<a;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},n=this&&this.__awaiter||function(e,t,o,a){return new(o||(o=Promise))((function(n,i){function r(e){try{u(a.next(e))}catch(e){i(e)}}function s(e){try{u(a.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}u((a=a.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var o,a,n,i,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;r;)try{if(o=1,a&&(n=2&i[0]?a.return:i[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,i[1])).done)return n;switch(a=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!(n=r.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){r.label=i[1];break}if(6===i[0]&&r.label<n[1]){r.label=n[1],n=i;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(i);break}n[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.SASViyaApiClient=void 0;var r=o(5928),s=o(6230),u=o(1395),c=o(714),l=o(6903),p=o(672),m=o(7757),h=o(8817),d=o(9097),f=o(9778),g=o(3893),v=function(){function e(e,t,o,a){this.serverUrl=e,this.rootFolderName=t,this.contextName=o,this.requestClient=a,this._debug=!1,this.sessionManager=new l.SessionManager(this.serverUrl,this.contextName,this.requestClient),this.contextManager=new p.ContextManager(this.serverUrl,this.requestClient),this.folderMap=new Map,e&&r.isUrl(e)}return Object.defineProperty(e.prototype,"debug",{get:function(){return this._debug},set:function(e){this._debug=e,this.sessionManager&&(this.sessionManager.debug=e)},enumerable:!1,configurable:!0}),e.prototype.getJobsInFolder=function(e){return n(this,void 0,void 0,(function(){var t;return i(this,(function(o){switch(o.label){case 0:return t=r.isRelativePath(e)?this.rootFolderName+"/"+e:e,this.folderMap.get(t)?[2,this.folderMap.get(t)]:[4,this.populateFolderMap(t)];case 1:return o.sent(),[2,this.folderMap.get(t)]}}))}))},e.prototype.getConfig=function(){return{serverUrl:this.serverUrl,rootFolderName:this.rootFolderName}},e.prototype.setConfig=function(e,t){e&&(this.serverUrl=e),t&&(this.rootFolderName=t)},e.prototype.getComputeContexts=function(e){return n(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return[4,this.contextManager.getComputeContexts(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.getDefaultComputeContexts=function(){return this.contextManager.getDefaultComputeContexts},e.prototype.getLauncherContexts=function(e){return n(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return[4,this.contextManager.getLauncherContexts(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.getExecutableContexts=function(e){return n(this,void 0,void 0,(function(){var t;return i(this,(function(o){switch(o.label){case 0:return t=this.executeScript.bind(this),[4,this.contextManager.getExecutableContexts(t,e)];case 1:return[2,o.sent()]}}))}))},e.prototype.createSession=function(e,t){return n(this,void 0,void 0,(function(){var o,a,n;return i(this,(function(i){switch(i.label){case 0:return o={"Content-Type":"application/json"},t&&(o.Authorization="Bearer "+t),[4,this.requestClient.get("/compute/contexts?limit=10000",t)];case 1:if(a=i.sent().result,!(n=a.items&&a.items.length?a.items.find((function(t){return t.name===e})):null))throw new Error("Execution context "+e+" not found.");return{method:"POST",headers:{Authorization:"Bearer "+t,"Content-Type":"application/json"}},[4,this.requestClient.post("/compute/contexts/"+n.id+"/sessions",{},t)];case 2:return[2,i.sent().result]}}))}))},e.prototype.createComputeContext=function(e,t,o,a,r,s){return n(this,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return[4,this.contextManager.createComputeContext(e,t,o,a,r,s)];case 1:return[2,n.sent()]}}))}))},e.prototype.createLauncherContext=function(e,t,o,a){return void 0===o&&(o="direct"),n(this,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return[4,this.contextManager.createLauncherContext(e,t,o,a)];case 1:return[2,n.sent()]}}))}))},e.prototype.editComputeContext=function(e,t,o){return n(this,void 0,void 0,(function(){return i(this,(function(a){switch(a.label){case 0:return[4,this.contextManager.editComputeContext(e,t,o)];case 1:return[2,a.sent()]}}))}))},e.prototype.deleteComputeContext=function(e,t){return n(this,void 0,void 0,(function(){return i(this,(function(o){switch(o.label){case 0:return[4,this.contextManager.deleteComputeContext(e,t)];case 1:return[2,o.sent()]}}))}))},e.prototype.executeScript=function(e,t,o,s,l,p,d,g,v,b,k){var y,j;return void 0===l&&(l=null),void 0===p&&(p=!1),void 0===d&&(d=!1),void 0===g&&(g=!0),void 0===b&&(b=!1),n(this,void 0,void 0,(function(){var w,x,C,z,S,_,O,E,A,T,P,q,M,L,R,U,N,I,F,D,B,J,V,H=this;return i(this,(function(G){switch(G.label){case 0:return G.trys.push([0,15,,16]),w={"Content-Type":"application/json"},s&&(w.Authorization="Bearer "+s),x=void 0,[4,this.sessionManager.getSession(s).catch((function(e){throw f.prefixMessage(e,"Error while getting session. ")}))];case 1:return C=G.sent(),x=C.id,b?[4,this.sessionManager.getVariable(x,"SYSJOBID",s).catch((function(e){throw f.prefixMessage(e,"Error while getting session variable. ")}))]:[3,3];case 2:(z=G.sent().result)&&z.value&&(S=this.rootFolderName?e.split(this.rootFolderName).join("").replace(/^\//,""):e,new h.Logger(p?h.LogLevel.Debug:h.LogLevel.Info).info("Triggered '"+S+"' with PID "+z.value+" at "+m.timestampToYYYYMMDDHHMMSS())),G.label=3;case 3:return _={_contextName:o,_OMITJSONLISTING:!0,_OMITJSONLOG:!0,_OMITSESSIONRESULTS:!0,_OMITTEXTLISTING:!0,_OMITTEXTLOG:!0},p&&(_._OMITTEXTLOG=!1,_._OMITSESSIONRESULTS=!1,_._DEBUG=131),O=void 0,r.isRelativePath(e)?O="exec-"+(e.includes("/")?e.split("/")[1]:e):(E=e.split("/"),O=E.pop()),A={SYS_JES_JOB_URI:"",_program:r.isRelativePath(e)?this.rootFolderName+"/"+e:e},k&&(A=a(a({},A),k)),T=[],l?JSON.stringify(l).includes(";")?[4,this.uploadTables(l,s).catch((function(e){throw f.prefixMessage(e,"Error while uploading tables. ")}))]:[3,5]:[3,6];case 4:return T=G.sent(),A._webin_file_count=T.length,T.forEach((function(e,t){A["_webin_fileuri"+(t+1)]="/files/files/"+e.file.id,A["_webin_name"+(t+1)]=e.tableName})),[3,6];case 5:A=a(a({},A),c.formatDataForRequest(l)),G.label=6;case 6:return P={name:O,description:"Powered by SASjs",code:t,variables:A,arguments:_},[4,this.requestClient.post("/compute/sessions/"+x+"/jobs",P,s).catch((function(e){throw f.prefixMessage(e,"Error while posting job. ")}))];case 7:return q=G.sent(),M=q.result,L=q.etag,g?(p&&(console.log("Job has been submitted for '"+O+"'."),console.log("You can monitor the job progress at '"+this.serverUrl+M.links.find((function(e){return"state"===e.rel})).href+"'.")),[4,this.pollJobState(M,L,s,v).catch((function(e){return n(H,void 0,void 0,(function(){var t,o,a,n,u,c;return i(this,(function(i){switch(i.label){case 0:return t=null===(u=null==e?void 0:e.response)||void 0===u?void 0:u.data,o=/err=[0-9]*,/.exec(t),"5113","5113"!==(null===(c=null==o?void 0:o[0])||void 0===c?void 0:c.slice(4,-1))?[3,2]:(a=M.links.find((function(e){return"up"===e.rel})).href+"/log",1e6,n=e,[4,r.fetchLogByChunks(this.requestClient,s,a,1e6)]);case 1:n.log=i.sent(),i.label=2;case 2:throw f.prefixMessage(e,"Error while polling job status. ")}}))}))}))]):[2,C];case 8:return R=G.sent(),[4,this.requestClient.get("/compute/sessions/"+x+"/jobs/"+M.id,s).catch((function(e){throw f.prefixMessage(e,"Error while getting job. ")}))];case 9:return U=G.sent().result,N=void 0,I="",F=U.links.find((function(e){return"log"===e.rel})),p&&F?(D=F.href+"/content",B=null!==(j=null===(y=U.logStatistics)||void 0===y?void 0:y.lineCount)&&void 0!==j?j:1e6,[4,r.fetchLogByChunks(this.requestClient,s,D,B)]):[3,11];case 10:I=G.sent(),G.label=11;case 11:return"failed"===R||"error"===R?[2,Promise.reject(new u.ComputeJobExecutionError(U,I))]:(J=void 0,d?(J="/compute/sessions/"+x+"/filerefs/_webout/content")?[4,this.requestClient.get(J,s,"text/plain").catch((function(e){return n(H,void 0,void 0,(function(){var t,o,a,n;return i(this,(function(i){switch(i.label){case 0:return e instanceof u.NotFoundError&&F?(t=F.href+"/content",o=null!==(n=null===(a=U.logStatistics)||void 0===a?void 0:a.lineCount)&&void 0!==n?n:1e6,[4,r.fetchLogByChunks(this.requestClient,s,t,o)]):[3,2];case 1:return I=i.sent(),[2,Promise.reject({status:500,log:I})];case 2:return[2,{result:JSON.stringify(e)}]}}))}))}))]:[3,13]:[2,{job:U,log:I}]);case 12:N=G.sent(),G.label=13;case 13:return[4,this.sessionManager.clearSession(x,s).catch((function(e){throw f.prefixMessage(e,"Error while clearing session. ")}))];case 14:return G.sent(),[2,{result:null==N?void 0:N.result,log:I}];case 15:if((V=G.sent())&&404===V.status)return[2,this.executeScript(e,t,o,s,l,p,!1,!0)];throw f.prefixMessage(V,"Error while executing script. ");case 16:return[2]}}))}))},e.prototype.getFolder=function(e,t){return n(this,void 0,void 0,(function(){return i(this,(function(o){switch(o.label){case 0:return[4,this.requestClient.get("/folders/folders/@item?path="+e,t).then((function(e){return e.result}))];case 1:return[2,o.sent()]}}))}))},e.prototype.createFile=function(e,t,o,a,r){var u,c;return n(this,void 0,void 0,(function(){var n,l;return i(this,(function(i){switch(i.label){case 0:if(!o&&!a)throw new Error("Path or URI of the parent folder is required.");return a||!o?[3,2]:[4,this.getFolderUri(o,r)];case 1:a=i.sent(),i.label=2;case 2:return n={Accept:"application/vnd.sas.file+json","Content-Disposition":'filename="'+e+'";'},(l=new s).append("file",t,e),null!==(c=g.getType((null===(u=e.match(/\.[0-9a-z]+$/i))||void 0===u?void 0:u[0])||""))&&void 0!==c?c:"text/plain",[4,this.requestClient.post("/files/files?parentFolderUri="+a+"&typeDefName=file#rawUpload",l,r,"multipart/form-data; boundary="+l._boundary,n)];case 3:return[2,i.sent().result]}}))}))},e.prototype.createFolder=function(e,t,o,a,r){return n(this,void 0,void 0,(function(){var n,s,u,c,l;return i(this,(function(i){switch(i.label){case 0:if(!t&&!o)throw new Error("Path or URI of the parent folder is required.");return o||!t?[3,6]:[4,this.getFolderUri(t,a)];case 1:if(o=i.sent())return[3,3];if(console.log("Parent folder at path '"+t+"' is not present."),n=t.substring(0,t.lastIndexOf("/")),s=""+t.split("/").pop(),""===n)throw new Error("Root folder has to be present on the server.");return console.log("Creating parent folder:\n'"+s+"' in '"+n+"'"),[4,this.createFolder(s,n,void 0,a)];case 2:return u=i.sent(),console.log("Parent folder '"+s+"' has been successfully created."),o="/folders/folders/"+u.id,[3,6];case 3:return r&&a?(c=t+"/"+e,[4,this.getFolderUri(c,a)]):[3,6];case 4:return i.sent()?[4,this.deleteFolder(t+"/"+e,a)]:[3,6];case 5:i.sent(),i.label=6;case 6:return[4,this.requestClient.post("/folders/folders?parentFolderUri="+o,{name:e,type:"folder"},a)];case 7:return l=i.sent().result,[4,this.populateFolderMap(t+"/"+e,a)];case 8:return i.sent(),[2,l]}}))}))},e.prototype.createJobDefinition=function(e,t,o,a,r){return n(this,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:if(!o&&!a)throw new Error("Path to or URI of the parent folder is required.");return a||!o?[3,2]:[4,this.getFolderUri(o,r)];case 1:a=n.sent(),n.label=2;case 2:return[4,this.requestClient.post(this.serverUrl+"/jobDefinitions/definitions?parentFolderUri="+a,{name:e,parameters:[{name:"_addjesbeginendmacros",type:"CHARACTER",defaultValue:"false"}],type:"Compute",code:t},r)];case 3:return[2,n.sent()]}}))}))},e.prototype.getAuthCode=function(e){return n(this,void 0,void 0,(function(){var t,o=this;return i(this,(function(a){switch(a.label){case 0:return t=this.serverUrl+"/SASLogon/oauth/authorize?client_id="+e+"&response_type=code",[4,this.requestClient.get(t,void 0,"text/plain").then((function(e){return e.result})).then((function(e){return n(o,void 0,void 0,(function(){var t,o,a,n;return i(this,(function(i){switch(i.label){case 0:return t="",d.isAuthorizeFormRequired(e)?[4,this.requestClient.authorize(e)]:[3,2];case 1:return o=i.sent(),a=o.split("<body>")[1].split("</body>")[0],(n=document.createElement("div")).innerHTML=a,[2,t=n.querySelector(".infobox h4").innerText];case 2:return a=e.split("<body>")[1].split("</body>")[0],(n=document.createElement("div")).innerHTML=a,n&&(t=n.querySelector(".infobox h4").innerText),[2,t]}}))}))})).catch((function(){return null}))];case 1:return[2,a.sent()]}}))}))},e.prototype.getAccessToken=function(e,t,o){return n(this,void 0,void 0,(function(){var a,n,r,u;return i(this,(function(i){switch(i.label){case 0:return a=this.serverUrl+"/SASLogon/oauth/token",n="undefined"==typeof Buffer?btoa(e+":"+t):Buffer.from(e+":"+t).toString("base64"),r={Authorization:"Basic "+n},(u="undefined"==typeof FormData?new s:new FormData).append("grant_type","authorization_code"),u.append("code",o),[4,this.requestClient.post(a,u,void 0,"multipart/form-data; boundary="+u._boundary,r).then((function(e){return e.result}))];case 1:return[2,i.sent()]}}))}))},e.prototype.refreshTokens=function(e,t,o){return n(this,void 0,void 0,(function(){var a,n,r,u;return i(this,(function(i){switch(i.label){case 0:return a=this.serverUrl+"/SASLogon/oauth/token",n="undefined"==typeof Buffer?btoa(e+":"+t):Buffer.from(e+":"+t).toString("base64"),r={Authorization:"Basic "+n},"undefined"==typeof FormData?((u=new s).append("grant_type","refresh_token"),u.append("refresh_token",o)):((u=new FormData).append("grant_type","refresh_token"),u.append("refresh_token",o)),[4,this.requestClient.post(a,u,void 0,"multipart/form-data; boundary="+u._boundary,r).then((function(e){return e.result}))];case 1:return[2,i.sent()]}}))}))},e.prototype.deleteClient=function(e,t){return n(this,void 0,void 0,(function(){var o,a;return i(this,(function(n){switch(n.label){case 0:return o=this.serverUrl+"/oauth/clients/"+e,a={},t&&(a.Authorization="Bearer "+t),[4,this.requestClient.delete(o,t)];case 1:return[2,n.sent().result]}}))}))},e.prototype.executeComputeJob=function(e,t,o,a,s,u,c,l,p,m){return void 0===u&&(u=!0),void 0===c&&(c=!1),void 0===p&&(p=!1),n(this,void 0,void 0,(function(){var n,h,d,g,v,b,k,y,j,w,x;return i(this,(function(i){switch(i.label){case 0:if(r.isRelativePath(e)&&!this.rootFolderName)throw new Error("Relative paths cannot be used without specifying a root folder name");return n=e.split("/"),h=n.pop(),d=n.join("/"),g=r.isRelativePath(e)?this.rootFolderName+"/"+d:d,[4,this.populateFolderMap(g,s).catch((function(e){throw f.prefixMessage(e,"Error while populating folder map. ")}))];case 1:if(i.sent(),!(v=this.folderMap.get(g)))throw new Error("The folder '"+g+"' was not found on '"+this.serverUrl+"'");if(b={"Content-Type":"application/json"},s&&(b.Authorization="Bearer "+s),!(k=null==v?void 0:v.find((function(e){return e.name===h}))))throw new Error("Job was not found.");if(y=null==k?void 0:k.code)return[3,3];if(!(j=null==k?void 0:k.links.find((function(e){return"getResource"===e.rel}))))throw new Error("URI of job definition was not found.");return[4,this.requestClient.get(""+this.serverUrl+j.href,s).catch((function(e){throw f.prefixMessage(e,"Error while getting job definition. ")}))];case 2:w=i.sent().result,y=w.code,k.code=y,i.label=3;case 3:return y||(y=""),x=y.replace(/\r\n/g,"\n").split("\n"),[4,this.executeScript(e,x,t,s,a,o,c,u,l,p,m)];case 4:return[2,i.sent()]}}))}))},e.prototype.executeJob=function(e,t,o,a,s){var c,l,p;return n(this,void 0,void 0,(function(){var n,m,h,d,g,v,b,k,y,j,w,x,C,z,S,_,O,E,A,T;return i(this,(function(i){switch(i.label){case 0:if(r.isRelativePath(e)&&!this.rootFolderName)throw new Error("Relative paths cannot be used without specifying a root folder name.");return n=e.split("/"),m=n.pop(),h=n.join("/"),d=r.isRelativePath(e)?this.rootFolderName+"/"+h:h,[4,this.populateFolderMap(d,s)];case 1:if(i.sent(),!(g=this.folderMap.get(d)))throw new Error("The folder '"+d+"' was not found on '"+this.serverUrl+"'.");return v=null==g?void 0:g.find((function(e){return e.name===m})),b=[],a&&Object.keys(a).length?[4,this.uploadTables(a,s)]:[3,3];case 2:b=i.sent(),i.label=3;case 3:if(!v)throw new Error("Job was not found.");return k=null===(c=null==v?void 0:v.links.find((function(e){return"getResource"===e.rel})))||void 0===c?void 0:c.href,[4,this.requestClient.get(""+this.serverUrl+k,s)];case 4:return y=i.sent().result,j={_contextName:t,_program:d+"/"+m,_webin_file_count:b.length,_OMITJSONLISTING:!0,_OMITJSONLOG:!0,_OMITSESSIONRESULTS:!0,_OMITTEXTLISTING:!0,_OMITTEXTLOG:!0},o&&(j._OMITTEXTLOG="false",j._OMITSESSIONRESULTS="false",j._DEBUG=131),b.forEach((function(e,t){j["_webin_fileuri"+(t+1)]="/files/files/"+e.file.id,j["_webin_name"+(t+1)]=e.tableName})),w={name:"exec-"+m,description:"Powered by SASjs",jobDefinition:y,arguments:j},[4,this.requestClient.post(this.serverUrl+"/jobExecution/jobs?_action=wait",w,s)];case 5:return x=i.sent(),C=x.result,z=x.etag,[4,this.pollJobState(C,z,s).catch((function(e){throw f.prefixMessage(e,"Error while polling job status. ")}))];case 6:return S=i.sent(),[4,this.requestClient.get(this.serverUrl+"/jobExecution/jobs/"+C.id,s)];case 7:return _=i.sent().result,A=_.results["_webout.json"],T=_.links.find((function(e){return"log"===e.rel})),A?[4,this.requestClient.get(""+this.serverUrl+A+"/content",s,"text/plain")]:[3,9];case 8:O=i.sent(),i.label=9;case 9:return o&&T?[4,this.requestClient.get(""+this.serverUrl+T.href+"/content",s).then((function(e){return e.result.items.map((function(e){return e.line})).join("\n")}))]:[3,11];case 10:E=i.sent(),i.label=11;case 11:if("failed"===S)throw new u.JobExecutionError(null===(l=_.error)||void 0===l?void 0:l.errorCode,null===(p=_.error)||void 0===p?void 0:p.message,E);return[2,{result:null==O?void 0:O.result,log:E}]}}))}))},e.prototype.populateFolderMap=function(e,t){return n(this,void 0,void 0,(function(){var o,a,n,s,u;return i(this,(function(i){switch(i.label){case 0:return o=r.isRelativePath(e)?this.rootFolderName+"/"+e:e,this.folderMap.get(o)?[2]:(a="/folders/folders/@item?path="+o,[4,this.requestClient.get(""+a,t).catch((function(e){throw f.prefixMessage(e,"Error while getting folder. ")}))]);case 1:if(!(n=i.sent().result))throw new Error("The path "+o+" does not exist on "+this.serverUrl);return[4,this.requestClient.get("/folders/folders/"+n.id+"/members?limit="+n.memberCount,t).catch((function(e){throw f.prefixMessage(e,"Error while getting members. ")}))];case 2:return s=i.sent().result,u=s.items,this.folderMap.set(o,u),[2]}}))}))},e.prototype.pollJobState=function(e,t,o,a){return n(this,void 0,void 0,(function(){var r,s,u,c,l,p,m,h,d,g,v=this;return i(this,(function(b){switch(b.label){case 0:return r=300,s=1e3,u=5,a&&(r=a.POLL_INTERVAL||r,s=a.MAX_POLL_COUNT||s),c="",l=0,p=0,m={"Content-Type":"application/json","If-None-Match":t},o&&(m.Authorization="Bearer "+o),(h=e.links.find((function(e){return"state"===e.rel})))||Promise.reject("Job state link was not found."),[4,this.requestClient.get(""+this.serverUrl+h.href+"?_action=wait&wait=300",o,"text/plain",{},this.debug).catch((function(e){return console.error("Error fetching job state from "+v.serverUrl+h.href+". Starting poll, assuming job to be running.",e),{result:"unavailable"}}))];case 1:return d=b.sent().result,"completed"===(g=d.trim())?[2,Promise.resolve(g)]:[2,new Promise((function(e,t){return n(v,void 0,void 0,(function(){var t,a,m=this;return i(this,(function(d){return t="",a=setInterval((function(){return n(m,void 0,void 0,(function(){var n,r=this;return i(this,(function(i){switch(i.label){case 0:return"running"!==c&&""!==c&&"pending"!==c&&"unavailable"!==c?[3,3]:h?[4,this.requestClient.get(""+this.serverUrl+h.href+"?_action=wait&wait=300",o,"text/plain",{},this.debug).catch((function(e){if(p++,l>=s||p>=u)throw f.prefixMessage(e,"Error while getting job state after interval. ");return console.error("Error fetching job state from "+r.serverUrl+h.href+". Resuming poll, assuming job to be running.",e),{result:"unavailable"}}))]:[3,2];case 1:n=i.sent().result,"unavailable"!=(c=n.trim())&&p>0&&(p=0),this.debug&&t!==c&&(console.log("Polling job status..."),console.log("Current job state: "+c),t=c),++l>=s&&e(c),i.label=2;case 2:return[3,4];case 3:clearInterval(a),e(c),i.label=4;case 4:return[2]}}))}))}),r),[2]}))}))}))]}}))}))},e.prototype.uploadTables=function(e,t){return n(this,void 0,void 0,(function(){var o,a,n,s,u,c,l,p;return i(this,(function(i){switch(i.label){case 0:for(s in o=[],a={"Content-Type":"application/json"},t&&(a.Authorization="Bearer "+t),n=[],e)n.push(s);u=0,i.label=1;case 1:if(!(u<n.length))return[3,4];if(c=n[u],"ERROR: LARGE STRING LENGTH"===(l=r.convertToCSV(e[c])))throw new Error("The max length of a string value in SASjs is 32765 characters.");return[4,this.requestClient.uploadFile(this.serverUrl+"/files/files#rawUpload",l,t).catch((function(e){throw f.prefixMessage(e,"Error while uploading file. ")}))];case 2:p=i.sent(),o.push({tableName:c,file:p.result}),i.label=3;case 3:return u++,[3,1];case 4:return[2,o]}}))}))},e.prototype.getFolderDetails=function(e,t){return n(this,void 0,void 0,(function(){var o,a;return i(this,(function(n){switch(n.label){case 0:return o=r.isUri(e)?e:"/folders/folders/@item?path="+e,[4,this.requestClient.get(""+this.serverUrl+o,t).catch((function(){return{result:null}}))];case 1:return(a=n.sent().result)?[2,a]:[2,void 0]}}))}))},e.prototype.getFolderUri=function(e,t){return n(this,void 0,void 0,(function(){var o;return i(this,(function(a){switch(a.label){case 0:return[4,this.getFolderDetails(e,t)];case 1:return(o=a.sent())?[2,"/folders/folders/"+o.id]:[2,void 0]}}))}))},e.prototype.getRecycleBinUri=function(e){return n(this,void 0,void 0,(function(){var t;return i(this,(function(o){switch(o.label){case 0:return"/folders/folders/@myRecycleBin",[4,this.requestClient.get(this.serverUrl+"/folders/folders/@myRecycleBin",e).catch((function(){return{result:null}}))];case 1:return(t=o.sent().result)?[2,"/folders/folders/"+t.id]:[2,void 0]}}))}))},e.prototype.getComputeContextByName=function(e,t){return n(this,void 0,void 0,(function(){return i(this,(function(o){switch(o.label){case 0:return[4,this.contextManager.getComputeContextByName(e,t)];case 1:return[2,o.sent()]}}))}))},e.prototype.getComputeContextById=function(e,t){return n(this,void 0,void 0,(function(){return i(this,(function(o){switch(o.label){case 0:return[4,this.contextManager.getComputeContextById(e,t)];case 1:return[2,o.sent()]}}))}))},e.prototype.listFolder=function(e,t,o){return void 0===o&&(o=20),n(this,void 0,void 0,(function(){var a,n,s;return i(this,(function(i){switch(i.label){case 0:return r.isUri(e)?(n=e,[3,3]):[3,1];case 1:return[4,this.getFolderUri(e,t)];case 2:n=i.sent(),i.label=3;case 3:return a=n,{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}},[4,this.requestClient.get(""+this.serverUrl+a+"/members?limit="+o,t)];case 4:return(s=i.sent().result)&&s.items?[2,s.items.map((function(e){return e.name}))]:[2,[]]}}))}))},e.prototype.moveFolder=function(e,t,o,a){return n(this,void 0,void 0,(function(){var n,r,s,u,c,l;return i(this,(function(i){switch(i.label){case 0:return n=e.split("/").pop(),[4,this.getFolderDetails(t,a)];case 1:return i.sent()?o=n:((r=t.split("/")).splice(r.length-1,1),t=r.join("/")),[4,this.getFolderUri(e,a)];case 2:return s=i.sent(),[4,this.getFolderUri(t,a)];case 3:return u=i.sent(),c=null==s?void 0:s.split("/").pop(),[4,this.requestClient.patch(""+this.serverUrl+s,{id:c,name:o,parentFolderUri:u},a).catch((function(t){if(t.code&&"ENOTFOUND"===t.code)throw{body:{message:"Folder '"+e.split("/").pop()+"' was not found."}};throw t}))];case 4:return(l=i.sent().result)?[2,l]:[2,void 0]}}))}))},e.prototype.deleteFolder=function(e,t){return n(this,void 0,void 0,(function(){var o,a,n,r,s;return i(this,(function(i){switch(i.label){case 0:return[4,this.getRecycleBinUri(t)];case 1:return o=i.sent(),a=e.split("/").pop()||"",n=new Date,r=n.toLocaleDateString()+" "+n.toLocaleTimeString(),s=a+" "+r,[4,this.moveFolder(e,o,s,t)];case 2:return[2,i.sent()]}}))}))},e}();t.SASViyaApiClient=v},5956:function(e,t,o){"use strict";var a=this&&this.__assign||function(){return(a=Object.assign||function(e){for(var t,o=1,a=arguments.length;o<a;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},n=this&&this.__awaiter||function(e,t,o,a){return new(o||(o=Promise))((function(n,i){function r(e){try{u(a.next(e))}catch(e){i(e)}}function s(e){try{u(a.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}u((a=a.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var o,a,n,i,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;r;)try{if(o=1,a&&(n=2&i[0]?a.return:i[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,i[1])).done)return n;switch(a=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!(n=r.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){r.label=i[1];break}if(6===i[0]&&r.label<n[1]){r.label=n[1],n=i;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(i);break}n[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},r=this&&this.__spreadArray||function(e,t){for(var o=0,a=t.length,n=e.length;o<a;o++,n++)e[n]=t[o];return e};Object.defineProperty(t,"__esModule",{value:!0});var s=o(5928),u=o(1230),c=o(9821),l=o(8306),p=o(7010),m=o(1527),h=o(3900),d=o(4588),f=o(8217),g=o(1395),v={serverUrl:"",pathSAS9:"/SASStoredProcess/do",pathSASViya:"/SASJobExecution",appLoc:"/Public/seedapp",serverType:h.ServerType.SasViya,debug:!1,contextName:"SAS Job Execution compute context",useComputeApi:null,allowInsecureRequests:!1},b=function(){function e(e){var t=this;this.sasjsConfig=new u.SASjsConfig,this.jobsPath="",this.sasViyaApiClient=null,this.sas9ApiClient=null,this.fileUploader=null,this.authManager=null,this.requestClient=null,this.webJobExecutor=null,this.computeJobExecutor=null,this.jesJobExecutor=null,this.sas9JobExecutor=null,this.resendWaitingRequests=function(){return n(t,void 0,void 0,(function(){var e,t,o;return i(this,(function(a){switch(a.label){case 0:return[4,null===(e=this.webJobExecutor)||void 0===e?void 0:e.resendWaitingRequests()];case 1:return a.sent(),[4,null===(t=this.computeJobExecutor)||void 0===t?void 0:t.resendWaitingRequests()];case 2:return a.sent(),[4,null===(o=this.jesJobExecutor)||void 0===o?void 0:o.resendWaitingRequests()];case 3:return a.sent(),[2]}}))}))},this.sasjsConfig=a(a({},v),e),this.setupConfiguration()}return e.prototype.getCsrfToken=function(e){var t;return void 0===e&&(e="general"),null===(t=this.requestClient)||void 0===t?void 0:t.getCsrfToken(e)},e.prototype.executeScriptSAS9=function(e,t,o){var a;return n(this,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return this.isMethodSupported("executeScriptSAS9",h.ServerType.Sas9),[4,null===(a=this.sas9ApiClient)||void 0===a?void 0:a.executeScript(e,t,o)];case 1:return[2,n.sent()]}}))}))},e.prototype.getComputeContexts=function(e){return n(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return this.isMethodSupported("getComputeContexts",h.ServerType.SasViya),[4,this.sasViyaApiClient.getComputeContexts(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.getLauncherContexts=function(e){return n(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return this.isMethodSupported("getLauncherContexts",h.ServerType.SasViya),[4,this.sasViyaApiClient.getLauncherContexts(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.getDefaultComputeContexts=function(){return this.isMethodSupported("getDefaultComputeContexts",h.ServerType.SasViya),this.sasViyaApiClient.getDefaultComputeContexts()},e.prototype.getExecutableContexts=function(e){return n(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return this.isMethodSupported("getExecutableContexts",h.ServerType.SasViya),[4,this.sasViyaApiClient.getExecutableContexts(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.createComputeContext=function(e,t,o,a,r,s){return n(this,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return this.isMethodSupported("createComputeContext",h.ServerType.SasViya),[4,this.sasViyaApiClient.createComputeContext(e,t,o,a,r,s)];case 1:return[2,n.sent()]}}))}))},e.prototype.createLauncherContext=function(e,t,o,a){return n(this,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return this.isMethodSupported("createLauncherContext",h.ServerType.SasViya),[4,this.sasViyaApiClient.createLauncherContext(e,t,o,a)];case 1:return[2,n.sent()]}}))}))},e.prototype.editComputeContext=function(e,t,o){return n(this,void 0,void 0,(function(){return i(this,(function(a){switch(a.label){case 0:return this.isMethodSupported("editComputeContext",h.ServerType.SasViya),[4,this.sasViyaApiClient.editComputeContext(e,t,o)];case 1:return[2,a.sent()]}}))}))},e.prototype.deleteComputeContext=function(e,t){return n(this,void 0,void 0,(function(){return i(this,(function(o){switch(o.label){case 0:return this.isMethodSupported("deleteComputeContext",h.ServerType.SasViya),[4,this.sasViyaApiClient.deleteComputeContext(e,t)];case 1:return[2,o.sent()]}}))}))},e.prototype.getComputeContextByName=function(e,t){return n(this,void 0,void 0,(function(){return i(this,(function(o){switch(o.label){case 0:return this.isMethodSupported("getComputeContextByName",h.ServerType.SasViya),[4,this.sasViyaApiClient.getComputeContextByName(e,t)];case 1:return[2,o.sent()]}}))}))},e.prototype.getComputeContextById=function(e,t){return n(this,void 0,void 0,(function(){return i(this,(function(o){switch(o.label){case 0:return this.isMethodSupported("getComputeContextById",h.ServerType.SasViya),[4,this.sasViyaApiClient.getComputeContextById(e,t)];case 1:return[2,o.sent()]}}))}))},e.prototype.createSession=function(e,t){return n(this,void 0,void 0,(function(){return i(this,(function(o){switch(o.label){case 0:return this.isMethodSupported("createSession",h.ServerType.SasViya),[4,this.sasViyaApiClient.createSession(e,t)];case 1:return[2,o.sent()]}}))}))},e.prototype.executeScriptSASViya=function(e,t,o,a,r){return n(this,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:if(this.isMethodSupported("executeScriptSASViya",h.ServerType.SasViya),!o)throw new Error("Context name is undefined. Please set a `contextName` in your SASjs or override config.");return[4,this.sasViyaApiClient.executeScript(e,t,o,a,null,r||this.sasjsConfig.debug)];case 1:return[2,n.sent()]}}))}))},e.prototype.createFolder=function(e,t,o,a,r,s){return n(this,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return r?[4,r.createFolder(e,t,o,a)]:[3,2];case 1:return[2,n.sent()];case 2:return[4,this.sasViyaApiClient.createFolder(e,t,o,a,s)];case 3:return[2,n.sent()]}}))}))},e.prototype.createFile=function(e,t,o,a,r,s){return n(this,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return s?[4,s.createFile(e,t,o,a,r)]:[3,2];case 1:return[2,n.sent()];case 2:return[4,this.sasViyaApiClient.createFile(e,t,o,a,r)];case 3:return[2,n.sent()]}}))}))},e.prototype.getFolder=function(e,t){return n(this,void 0,void 0,(function(){return i(this,(function(o){switch(o.label){case 0:return this.isMethodSupported("getFolder",h.ServerType.SasViya),[4,this.sasViyaApiClient.getFolder(e,t)];case 1:return[2,o.sent()]}}))}))},e.prototype.deleteFolder=function(e,t){var o;return n(this,void 0,void 0,(function(){return i(this,(function(a){switch(a.label){case 0:return this.isMethodSupported("deleteFolder",h.ServerType.SasViya),[4,null===(o=this.sasViyaApiClient)||void 0===o?void 0:o.deleteFolder(e,t)];case 1:return[2,a.sent()]}}))}))},e.prototype.listFolder=function(e,t,o){var a;return n(this,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return this.isMethodSupported("listFolder",h.ServerType.SasViya),[4,null===(a=this.sasViyaApiClient)||void 0===a?void 0:a.listFolder(e,t,o)];case 1:return[2,n.sent()]}}))}))},e.prototype.moveFolder=function(e,t,o,a){var r;return n(this,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return this.isMethodSupported("moveFolder",h.ServerType.SasViya),[4,null===(r=this.sasViyaApiClient)||void 0===r?void 0:r.moveFolder(e,t,o,a)];case 1:return[2,n.sent()]}}))}))},e.prototype.createJobDefinition=function(e,t,o,a,r,s){return n(this,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return this.isMethodSupported("createJobDefinition",h.ServerType.SasViya),s?[4,s.createJobDefinition(e,t,o,a,r)]:[3,2];case 1:return[2,n.sent()];case 2:return[4,this.sasViyaApiClient.createJobDefinition(e,t,o,a,r)];case 3:return[2,n.sent()]}}))}))},e.prototype.getAuthCode=function(e){return n(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return this.isMethodSupported("getAuthCode",h.ServerType.SasViya),[4,this.sasViyaApiClient.getAuthCode(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.getAccessToken=function(e,t,o){return n(this,void 0,void 0,(function(){return i(this,(function(a){switch(a.label){case 0:return this.isMethodSupported("getAccessToken",h.ServerType.SasViya),[4,this.sasViyaApiClient.getAccessToken(e,t,o)];case 1:return[2,a.sent()]}}))}))},e.prototype.refreshTokens=function(e,t,o){return n(this,void 0,void 0,(function(){return i(this,(function(a){switch(a.label){case 0:return this.isMethodSupported("refreshTokens",h.ServerType.SasViya),[4,this.sasViyaApiClient.refreshTokens(e,t,o)];case 1:return[2,a.sent()]}}))}))},e.prototype.deleteClient=function(e,t){return n(this,void 0,void 0,(function(){return i(this,(function(o){switch(o.label){case 0:return this.isMethodSupported("deleteClient",h.ServerType.SasViya),[4,this.sasViyaApiClient.deleteClient(e,t)];case 1:return[2,o.sent()]}}))}))},e.prototype.getSasjsConfig=function(){return this.sasjsConfig},e.prototype.getUserName=function(){return this.authManager.userName},e.prototype.setSASjsConfig=function(e){return n(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return this.sasjsConfig=a(a({},this.sasjsConfig),e),[4,this.setupConfiguration()];case 1:return t.sent(),[2]}}))}))},e.prototype.setDebugState=function(e){this.sasjsConfig.debug=e,this.sasViyaApiClient&&(this.sasViyaApiClient.debug=e)},e.prototype.checkSession=function(){return n(this,void 0,void 0,(function(){return i(this,(function(e){return[2,this.authManager.checkSession()]}))}))},e.prototype.logIn=function(e,t){return n(this,void 0,void 0,(function(){return i(this,(function(o){return[2,this.authManager.logIn(e,t)]}))}))},e.prototype.logOut=function(){return this.authManager.logOut()},e.prototype.uploadFile=function(e,t,o){return(this.fileUploader||new p.FileUploader(this.sasjsConfig,this.jobsPath,this.requestClient)).uploadFile(e,t,o)},e.prototype.request=function(e,t,o,r,s,u){return void 0===o&&(o={}),void 0===u&&(u=[]),n(this,void 0,void 0,(function(){var n;return i(this,(function(i){switch(i.label){case 0:return o=a(a({},this.sasjsConfig),o),(n=this.validateInput(t)).status?o.serverType===h.ServerType.Sas9||void 0===o.useComputeApi||null===o.useComputeApi?[3,5]:o.useComputeApi?[4,this.computeJobExecutor.execute(e,t,o,r,s)]:[3,2]:[3,10];case 1:return[2,i.sent()];case 2:return[4,this.jesJobExecutor.execute(e,t,o,r,s,u)];case 3:return[2,i.sent()];case 4:return[3,9];case 5:return o.serverType===h.ServerType.Sas9&&o.username&&o.password?[4,this.sas9JobExecutor.execute(e,t,o)]:[3,7];case 6:return[2,i.sent()];case 7:return[4,this.webJobExecutor.execute(e,t,o,r,s,u)];case 8:return[2,i.sent()];case 9:return[3,11];case 10:return[2,Promise.reject(new g.ErrorResponse(n.msg))];case 11:return[2]}}))}))},e.prototype.validateInput=function(e){if(null===e)return{status:!0,msg:""};for(var t in e){if(!t.match(/^[a-zA-Z_]/))return{status:!1,msg:"First letter of table should be alphabet or underscore."};if(!t.match(/^[a-zA-Z_][a-zA-Z0-9_]*$/))return{status:!1,msg:"Table name should be alphanumeric."};if(t.length>32)return{status:!1,msg:"Maximum length for table name could be 32 characters."};if("Array"!==this.getType(e[t]))return{status:!1,msg:"Parameter data contains invalid table structure."};for(var o=0;o<e[t].length;o++)if("object"!==this.getType(e[t][o]))return{status:!1,msg:"Table "+t+" contains invalid structure."}}return{status:!0,msg:""}},e.prototype.getType=function(e){return Array.isArray(e)?"Array":typeof e},e.prototype.deployServicePack=function(e,t,o,a,r){return void 0===r&&(r=!1),n(this,void 0,void 0,(function(){var n,s,u;return i(this,(function(i){switch(i.label){case 0:return this.isMethodSupported("deployServicePack",h.ServerType.SasViya),n=null,o||t?(o||(o=this.sasjsConfig.serverUrl),t||(t=this.sasjsConfig.appLoc),this.sasjsConfig.serverType===h.ServerType.SasViya?(n=new c.SASViyaApiClient(o,t,this.sasjsConfig.contextName,this.requestClient)).debug=this.sasjsConfig.debug:this.sasjsConfig.serverType===h.ServerType.Sas9&&(n=new l.SAS9ApiClient(o,this.jobsPath))):(s=null,this.sasjsConfig.serverType===h.ServerType.SasViya?s=this.sasViyaApiClient.getConfig():this.sasjsConfig.serverType===h.ServerType.Sas9&&(s=this.sas9ApiClient.getConfig()),o=s.serverUrl,t=s.rootFolderName),e.members[0].members&&e.members[0].members.sort((function(e){return"folder"===e.type?-1:1})),u=e.members,[4,this.createFoldersAndServices(t,u,a,n,r)];case 1:return i.sent(),[2]}}))}))},e.prototype.startComputeJob=function(e,t,o,r,s,u,c,l){var p;return void 0===o&&(o={}),void 0===c&&(c=!1),n(this,void 0,void 0,(function(){return i(this,(function(n){if(o=a(a({},this.sasjsConfig),o),this.isMethodSupported("startComputeJob",h.ServerType.SasViya),!o.contextName)throw new Error("Context name is undefined. Please set a `contextName` in your SASjs or override config.");return[2,null===(p=this.sasViyaApiClient)||void 0===p?void 0:p.executeComputeJob(e,o.contextName,o.debug,t,r,!!s,!1,u,c,l)]}))}))},e.prototype.fetchLogFileContent=function(e,t){return n(this,void 0,void 0,(function(){return i(this,(function(o){switch(o.label){case 0:return[4,this.requestClient.get(e,t).then((function(e){if(!e)return Promise.reject(new g.ErrorResponse("Error while fetching log. Response was not provided."));try{return JSON.stringify(e.result)}catch(e){return Promise.reject(new g.ErrorResponse("Error while fetching log. The result is not valid.",e))}}))];case 1:return[2,o.sent()]}}))}))},e.prototype.getSasRequests=function(){return r(r(r([],this.webJobExecutor.getRequests()),this.computeJobExecutor.getRequests()),this.jesJobExecutor.getRequests()).sort(s.compareTimestamps)},e.prototype.clearSasRequests=function(){this.webJobExecutor.clearRequests(),this.computeJobExecutor.clearRequests(),this.jesJobExecutor.clearRequests()},e.prototype.setupConfiguration=function(){if(void 0===this.sasjsConfig.serverUrl||""===this.sasjsConfig.serverUrl)if("undefined"!=typeof location){var e=location.protocol+"//"+location.hostname;location.port&&(e=e+":"+location.port),this.sasjsConfig.serverUrl=e}else this.sasjsConfig.serverUrl="";"/"===this.sasjsConfig.serverUrl.slice(-1)&&(this.sasjsConfig.serverUrl=this.sasjsConfig.serverUrl.slice(0,-1)),this.requestClient=new d.RequestClient(this.sasjsConfig.serverUrl,this.sasjsConfig.allowInsecureRequests),this.jobsPath=this.sasjsConfig.serverType===h.ServerType.SasViya?this.sasjsConfig.pathSASViya:this.sasjsConfig.pathSAS9,this.authManager=new m.AuthManager(this.sasjsConfig.serverUrl,this.sasjsConfig.serverType,this.requestClient,this.resendWaitingRequests),this.sasjsConfig.serverType===h.ServerType.SasViya&&(this.sasViyaApiClient?this.sasViyaApiClient.setConfig(this.sasjsConfig.serverUrl,this.sasjsConfig.appLoc):this.sasViyaApiClient=new c.SASViyaApiClient(this.sasjsConfig.serverUrl,this.sasjsConfig.appLoc,this.sasjsConfig.contextName,this.requestClient),this.sasViyaApiClient.debug=this.sasjsConfig.debug),this.sasjsConfig.serverType===h.ServerType.Sas9&&(this.sas9ApiClient?this.sas9ApiClient.setConfig(this.sasjsConfig.serverUrl):this.sas9ApiClient=new l.SAS9ApiClient(this.sasjsConfig.serverUrl,this.jobsPath)),this.fileUploader=new p.FileUploader(this.sasjsConfig,this.jobsPath,this.requestClient),this.webJobExecutor=new f.WebJobExecutor(this.sasjsConfig.serverUrl,this.sasjsConfig.serverType,this.jobsPath,this.requestClient,this.sasViyaApiClient),this.sas9JobExecutor=new f.Sas9JobExecutor(this.sasjsConfig.serverUrl,this.sasjsConfig.serverType,this.jobsPath),this.computeJobExecutor=new f.ComputeJobExecutor(this.sasjsConfig.serverUrl,this.sasViyaApiClient),this.jesJobExecutor=new f.JesJobExecutor(this.sasjsConfig.serverUrl,this.sasViyaApiClient)},e.prototype.createFoldersAndServices=function(e,t,o,a,r){return n(this,void 0,void 0,(function(){var u=this;return i(this,(function(c){switch(c.label){case 0:return[4,s.asyncForEach(t,(function(t){return n(u,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:switch(t.type){case"folder":return[3,1];case"file":return[3,3];case"service":return[3,5]}return[3,7];case 1:return[4,this.createFolder(t.name,e,void 0,o,a,r)];case 2:return n.sent(),[3,8];case 3:return[4,this.createFile(t.name,t.code,e,void 0,o,a)];case 4:return n.sent(),[3,8];case 5:return[4,this.createJobDefinition(t.name,t.code,e,void 0,o,a)];case 6:return n.sent(),[3,8];case 7:throw new Error("Unidentified member '"+t.name+"' provided.");case 8:return"folder"===t.type&&t.members&&t.members.length?[4,this.createFoldersAndServices(e+"/"+t.name,t.members,o,a,r)]:[3,10];case 9:n.sent(),n.label=10;case 10:return[2]}}))}))}))];case 1:return c.sent(),[2]}}))}))},e.prototype.isMethodSupported=function(e,t){if(this.sasjsConfig.serverType!==t)throw new Error("Method '"+e+"' is only supported on "+(t===h.ServerType.Sas9?"SAS9":"SAS Viya")+" servers.")},e}();t.default=b},6903:function(e,t,o){"use strict";var a=this&&this.__awaiter||function(e,t,o,a){return new(o||(o=Promise))((function(n,i){function r(e){try{u(a.next(e))}catch(e){i(e)}}function s(e){try{u(a.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}u((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var o,a,n,i,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;r;)try{if(o=1,a&&(n=2&i[0]?a.return:i[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,i[1])).done)return n;switch(a=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!(n=r.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){r.label=i[1];break}if(6===i[0]&&r.label<n[1]){r.label=n[1],n=i;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(i);break}n[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.SessionManager=void 0;var i=o(5928),r=o(9778),s=0,u=304,c="Not Modified",l=function(){function e(e,t,o){this.serverUrl=e,this.contextName=t,this.requestClient=o,this.sessions=[],this.currentContext=null,this._debug=!1,this.printedSessionState={printed:!1,state:""},e&&i.isUrl(e)}return Object.defineProperty(e.prototype,"debug",{get:function(){return this._debug},set:function(e){this._debug=e},enumerable:!1,configurable:!0}),e.prototype.getSession=function(e){return a(this,void 0,void 0,(function(){var t,o;return n(this,(function(a){switch(a.label){case 0:return[4,this.createSessions(e)];case 1:return a.sent(),[4,this.createAndWaitForSession(e)];case 2:return a.sent(),t=this.sessions.pop(),o=((new Date).getTime()-new Date(t.creationTimeStamp).getTime())/1e3,!t.attributes||o>=t.attributes.sessionInactiveTimeout?[4,this.createSessions(e)]:[3,4];case 3:return a.sent(),[2,this.sessions.pop()];case 4:return[2,t]}}))}))},e.prototype.clearSession=function(e,t){return a(this,void 0,void 0,(function(){var o=this;return n(this,(function(a){switch(a.label){case 0:return[4,this.requestClient.delete("/compute/sessions/"+e,t).then((function(){o.sessions=o.sessions.filter((function(t){return t.id!==e}))})).catch((function(e){throw r.prefixMessage(e,"Error while deleting session. ")}))];case 1:return[2,a.sent()]}}))}))},e.prototype.createSessions=function(e){return a(this,void 0,void 0,(function(){var t=this;return n(this,(function(o){switch(o.label){case 0:return this.sessions.length?[3,4]:this.currentContext?[3,2]:[4,this.setCurrentContext(e).catch((function(e){throw e}))];case 1:o.sent(),o.label=2;case 2:return[4,i.asyncForEach(new Array(1),(function(){return a(t,void 0,void 0,(function(){var t;return n(this,(function(o){switch(o.label){case 0:return[4,this.createAndWaitForSession(e).catch((function(e){throw e}))];case 1:return t=o.sent(),this.sessions.push(t),[2]}}))}))})).catch((function(e){throw e}))];case 3:o.sent(),o.label=4;case 4:return[2]}}))}))},e.prototype.createAndWaitForSession=function(e){return a(this,void 0,void 0,(function(){var t,o,a;return n(this,(function(n){switch(n.label){case 0:return[4,this.requestClient.post(this.serverUrl+"/compute/contexts/"+this.currentContext.id+"/sessions",{},e).catch((function(e){throw e}))];case 1:return t=n.sent(),o=t.result,a=t.etag,[4,this.waitForSession(o,a,e)];case 2:return n.sent(),this.sessions.push(o),[2,o]}}))}))},e.prototype.setCurrentContext=function(e){return a(this,void 0,void 0,(function(){var t,o,a,i=this;return n(this,(function(n){switch(n.label){case 0:return this.currentContext?[3,2]:[4,this.requestClient.get(this.serverUrl+"/compute/contexts?limit=10000",e).catch((function(e){throw e}))];case 1:if(t=n.sent().result,o=t&&t.items&&t.items.length?t.items:[],!(a=o.find((function(e){return e.name===i.contextName}))))throw new Error("The context '"+this.contextName+"' was not found on the server "+this.serverUrl+".");this.currentContext=a,Promise.resolve(),n.label=2;case 2:return[2]}}))}))},e.prototype.getHeaders=function(e){var t={"Content-Type":"application/json"};return e&&(t.Authorization="Bearer "+e),t},e.prototype.waitForSession=function(e,t,o){return a(this,void 0,void 0,(function(){var i,r,u=this;return n(this,(function(l){return i=e.state,r=e.links.find((function(e){return"state"===e.rel})),[2,new Promise((function(l,p){return a(u,void 0,void 0,(function(){var a;return n(this,(function(n){switch(n.label){case 0:return"pending"!==i&&"running"!==i&&""!==i?[3,3]:r?(this.debug&&!this.printedSessionState.printed&&(console.log("Polling session status..."),this.printedSessionState.printed=!0),[4,this.getSessionState(""+this.serverUrl+r.href+"?wait=30",t,o).catch((function(e){throw e}))]):[3,2];case 1:a=n.sent(),i=a.trim(),this.debug&&this.printedSessionState.state!==i&&(console.log("Current session state is '"+i+"'"),this.printedSessionState.state=i,this.printedSessionState.printed=!1),i===c&&s<3&&(s++,l(this.waitForSession(e,t,o))),l(i),n.label=2;case 2:return[3,4];case 3:l(i),n.label=4;case 4:return[2]}}))}))}))]}))}))},e.prototype.getSessionState=function(e,t,o){return a(this,void 0,void 0,(function(){return n(this,(function(a){switch(a.label){case 0:return[4,this.requestClient.get(e,o,"text/plain",{"If-None-Match":t}).then((function(e){return e.result})).catch((function(e){if(e.status===u)return c;throw e}))];case 1:return[2,a.sent()]}}))}))},e.prototype.getVariable=function(e,t,o){return a(this,void 0,void 0,(function(){return n(this,(function(a){switch(a.label){case 0:return[4,this.requestClient.get(this.serverUrl+"/compute/sessions/"+e+"/variables/"+t,o).catch((function(e){throw r.prefixMessage(e,"Error while fetching session variable '"+t+"'.")}))];case 1:return[2,a.sent()]}}))}))},e}();t.SessionManager=l},2851:function(e,t,o){"use strict";var a=this&&this.__awaiter||function(e,t,o,a){return new(o||(o=Promise))((function(n,i){function r(e){try{u(a.next(e))}catch(e){i(e)}}function s(e){try{u(a.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}u((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var o,a,n,i,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;r;)try{if(o=1,a&&(n=2&i[0]?a.return:i[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,i[1])).done)return n;switch(a=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!(n=r.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){r.label=i[1];break}if(6===i[0]&&r.label<n[1]){r.label=n[1],n=i;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(i);break}n[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.AuthManager=void 0;var i=o(3900),r=o(5928),s=function(){function e(e,t,o,a){var n=this;this.serverUrl=e,this.serverType=t,this.requestClient=o,this.loginCallback=a,this.userName="",this.setLoginUrl=function(e){var t=e[1].replace(/\?.*/,"");if("/"===t[0]){t=t.substr(1);var o=n.serverUrl?n.serverUrl+"/"+t:""+t,a=o;n.loginUrl=n.serverType===i.ServerType.SasViya?o:a.replace(".do","")}},this.loginUrl="/SASLogon/login",this.logoutUrl=this.serverType===i.ServerType.Sas9?"/SASLogon/logout?":"/SASLogon/logout.do?"}return e.prototype.logIn=function(e,t){return a(this,void 0,void 0,(function(){var o,a,r,s,l,p,m,h,d;return n(this,(function(n){switch(n.label){case 0:return o={_service:"default",username:e,password:t},this.userName=o.username,[4,this.checkSession()];case 1:return a=n.sent(),r=a.isLoggedIn,s=a.loginForm,r?[4,this.loginCallback()]:[3,3];case 2:return n.sent(),[2,{isLoggedIn:r,userName:this.userName}];case 3:return[4,this.sendLoginRequest(s,o)];case 4:return l=n.sent(),(p=c(l))?[3,9]:u(l)?[4,this.getLoginForm(l)]:[3,7];case 5:return m=n.sent(),[4,this.sendLoginRequest(m,o)];case 6:l=n.sent(),n.label=7;case 7:return[4,this.checkSession()];case 8:h=n.sent(),p=h.isLoggedIn,n.label=9;case 9:return p?this.serverType!==i.ServerType.Sas9?[3,11]:(d=this.serverUrl+"/SASStoredProcess/j_spring_cas_security_check",[4,this.requestClient.get("/SASLogon/login?service="+d,void 0)]):[3,12];case 10:n.sent(),n.label=11;case 11:this.loginCallback(),n.label=12;case 12:return[2,{isLoggedIn:!!p,userName:this.userName}]}}))}))},e.prototype.sendLoginRequest=function(e,t){return a(this,void 0,void 0,(function(){var o,a;return n(this,(function(n){switch(n.label){case 0:for(o in e)t[o]=e[o];return a=r.serialize(t),[4,this.requestClient.post(this.loginUrl,a,void 0,"text/plain",{"Content-Type":"application/x-www-form-urlencoded",Accept:"*/*"})];case 1:return[2,n.sent().result]}}))}))},e.prototype.checkSession=function(){return a(this,void 0,void 0,(function(){var e,t,o,a,i;return n(this,(function(n){switch(n.label){case 0:return e="SASVIYA"===this.serverType?this.serverUrl+"/identities":this.serverUrl+"/SASStoredProcess",[4,this.requestClient.get(e,void 0,"text/plain").catch((function(e){return{result:"authErr"}}))];case 1:return t=n.sent().result,a=null,(o="authErr"!==t)?[3,4]:(this.logOut(),[4,this.requestClient.get(this.loginUrl.replace(".do",""),void 0,"text/plain")]);case 2:return i=n.sent().result,[4,this.getLoginForm(i)];case 3:a=n.sent(),n.label=4;case 4:return[2,Promise.resolve({isLoggedIn:o,userName:this.userName,loginForm:a})]}}))}))},e.prototype.getLoginForm=function(e){var t=/<form.+action="(.*Logon[^"]*).*>/.exec(e),o={};if(t&&t.length){this.setLoginUrl(t);var a=e.match(/<input.*"hidden"[^>]*>/g);a&&a.forEach((function(e){var t=e.match(/name="([^"]*)"\svalue="([^"]*)/);t&&t.length&&(o[t[1]]=t[2])}))}return Object.keys(o).length?o:null},e.prototype.logOut=function(){return this.requestClient.clearCsrfTokens(),this.requestClient.get(this.logoutUrl,void 0).then((function(){return!0}))},e}();t.AuthManager=s;var u=function(e){return/An error occurred while the system was verifying your credentials. Please enter your credentials again./gm.test(e)},c=function(e){return/You have signed in/gm.test(e)}},1527:function(e,t,o){"use strict";var a=this&&this.__createBinding||(Object.create?function(e,t,o,a){void 0===a&&(a=o),Object.defineProperty(e,a,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,a){void 0===a&&(a=o),e[a]=t[o]}),n=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||a(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0}),n(o(2851),t),n(o(9097),t),n(o(9166),t)},9097:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isAuthorizeFormRequired=void 0;t.isAuthorizeFormRequired=function(e){return/<form.+action="(.*Logon\/oauth\/authorize[^"]*).*>/gm.test(e)}},9166:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isLogInRequired=void 0;t.isLogInRequired=function(e){return/<form.+action="(.*Logon[^"]*).*>/gm.test(e)}},4037:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateFileUploadForm=void 0;var a=o(2402);t.generateFileUploadForm=function(e,t){for(var o in t){var n=o,i=a.convertToCSV(t[o]);if("ERROR: LARGE STRING LENGTH"===i)throw new Error("The max length of a string value in SASjs is 32765 characters.");var r=new Blob([i],{type:"application/csv"});e.append(n,r,n+".csv")}return e}},2170:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateTableUploadForm=void 0;var a=o(2402),n=o(4799);t.generateTableUploadForm=function(e,t){var o=[],i={},r=0;for(var s in t){r++,o.push(s);var u=a.convertToCSV(t[s]);if("ERROR: LARGE STRING LENGTH"===u)throw new Error("The max length of a string value in SASjs is 32765 characters.");if(u.length>16e3)n.splitChunks(u).map((function(t){e.append("sasjs"+r+"data",t)}));else i["sasjs"+r+"data"]=u}return i.sasjs_tables=o.join(" "),{formData:e,requestParams:i}}},3607:function(e,t,o){"use strict";var a=this&&this.__createBinding||(Object.create?function(e,t,o,a){void 0===a&&(a=o),Object.defineProperty(e,a,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,a){void 0===a&&(a=o),e[a]=t[o]}),n=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||a(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0});var i=o(5956);n(o(1230),t),n(o(1395),t),n(o(9821),t),n(o(8306),t),t.default=i.default},1570:function(e,t,o){"use strict";var a,n=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function o(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}),i=this&&this.__awaiter||function(e,t,o,a){return new(o||(o=Promise))((function(n,i){function r(e){try{u(a.next(e))}catch(e){i(e)}}function s(e){try{u(a.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}u((a=a.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var o,a,n,i,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;r;)try{if(o=1,a&&(n=2&i[0]?a.return:i[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,i[1])).done)return n;switch(a=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!(n=r.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){r.label=i[1];break}if(6===i[0]&&r.label<n[1]){r.label=n[1],n=i;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(i);break}n[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.ComputeJobExecutor=void 0;var s=o(3900),u=o(1395),c=function(e){function t(t,o){var a=e.call(this,t,s.ServerType.SasViya)||this;return a.sasViyaApiClient=o,a}return n(t,e),t.prototype.execute=function(e,t,o,a,n){return i(this,void 0,void 0,(function(){var s,c=this;return r(this,(function(l){return s=a||function(){return Promise.resolve()},!0,!0,[2,new Promise((function(l,p){var m;null===(m=c.sasViyaApiClient)||void 0===m||m.executeComputeJob(e,o.contextName,o.debug,t,n,true,true).then((function(t){c.appendRequest(t,e,o.debug),l(t.result)})).catch((function(n){return i(c,void 0,void 0,(function(){var i=this;return r(this,(function(r){switch(r.label){case 0:return n instanceof u.ComputeJobExecutionError&&(this.appendRequest(n,e,o.debug),p(new u.ErrorResponse(null==n?void 0:n.message,n))),n instanceof u.LoginRequiredError?[4,s()]:[3,2];case 1:return r.sent(),this.appendWaitingRequest((function(){return i.execute(e,t,o,a).then((function(e){l(e)}),(function(e){p(e)}))})),[3,3];case 2:p(new u.ErrorResponse(null==n?void 0:n.message,n)),r.label=3;case 3:return[2]}}))}))}))}))]}))}))},t}(o(6118).BaseJobExecutor);t.ComputeJobExecutor=c},4446:function(e,t,o){"use strict";var a,n=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function o(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}),i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,o=1,a=arguments.length;o<a;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},r=this&&this.__awaiter||function(e,t,o,a){return new(o||(o=Promise))((function(n,i){function r(e){try{u(a.next(e))}catch(e){i(e)}}function s(e){try{u(a.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}u((a=a.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var o,a,n,i,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;r;)try{if(o=1,a&&(n=2&i[0]?a.return:i[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,i[1])).done)return n;switch(a=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!(n=r.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){r.label=i[1];break}if(6===i[0]&&r.label<n[1]){r.label=n[1],n=i;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(i);break}n[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.JesJobExecutor=void 0;var u=o(3900),c=o(1395),l=function(e){function t(t,o){var a=e.call(this,t,u.ServerType.SasViya)||this;return a.sasViyaApiClient=o,a}return n(t,e),t.prototype.execute=function(e,t,o,a,n,u){return void 0===u&&(u=[]),r(this,void 0,void 0,(function(){var l,p=this;return s(this,(function(m){return l=a||function(){return Promise.resolve()},[2,new Promise((function(m,h){var d;null===(d=p.sasViyaApiClient)||void 0===d||d.executeJob(e,o.contextName,o.debug,t,n).then((function(t){p.appendRequest(t,e,o.debug);var a={};if(u&&u.length>0){var n=u.reduce((function(e,o){return e[o]=t[o],e}),{});a=i({result:t.result},n)}else a=t.result;m(a)})).catch((function(i){return r(p,void 0,void 0,(function(){var r=this;return s(this,(function(s){switch(s.label){case 0:return i instanceof c.JobExecutionError&&(this.appendRequest(i,e,o.debug),h(new c.ErrorResponse(null==i?void 0:i.message,i))),i instanceof c.LoginRequiredError?[4,l()]:[3,2];case 1:return s.sent(),this.appendWaitingRequest((function(){return r.execute(e,t,o,a,n,u).then((function(e){m(e)}),(function(e){h(e)}))})),[3,3];case 2:h(new c.ErrorResponse(null==i?void 0:i.message,i)),s.label=3;case 3:return[2]}}))}))}))}))]}))}))},t}(o(6118).BaseJobExecutor);t.JesJobExecutor=l},6118:function(e,t,o){"use strict";var a=this&&this.__awaiter||function(e,t,o,a){return new(o||(o=Promise))((function(n,i){function r(e){try{u(a.next(e))}catch(e){i(e)}}function s(e){try{u(a.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}u((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var o,a,n,i,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;r;)try{if(o=1,a&&(n=2&i[0]?a.return:i[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,i[1])).done)return n;switch(a=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!(n=r.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){r.label=i[1];break}if(6===i[0]&&r.label<n[1]){r.label=n[1],n=i;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(i);break}n[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.BaseJobExecutor=void 0;var i=o(5928),r=function(){function e(e,t){var o=this;this.serverUrl=e,this.serverType=t,this.waitingRequests=[],this.requests=[],this.resendWaitingRequests=function(){return a(o,void 0,void 0,(function(){var e=this;return n(this,(function(t){switch(t.label){case 0:return[4,i.asyncForEach(this.waitingRequests,(function(t){return a(e,void 0,void 0,(function(){return n(this,(function(e){switch(e.label){case 0:return[4,t()];case 1:return e.sent(),[2]}}))}))}))];case 1:return t.sent(),this.waitingRequests=[],[2]}}))}))},this.getRequests=function(){return o.requests},this.clearRequests=function(){o.requests=[]}}return e.prototype.appendWaitingRequest=function(e){this.waitingRequests.push(e)},e.prototype.appendRequest=function(e,t,o){var a="",n="",r=null;o&&((null==e?void 0:e.log)?(a=i.parseSourceCode(e.log),n=i.parseGeneratedCode(e.log),r=(null==e?void 0:e.result)?e.result.WORK:e.log):(null==e?void 0:e.result)&&(a=i.parseSourceCode(e.result),n=i.parseGeneratedCode(e.result),r=e.result.WORK));var s="string"==typeof(null==e?void 0:e.result)?null==e?void 0:e.result:JSON.stringify(null==e?void 0:e.result,null,2);this.requests.push({logFile:(null==e?void 0:e.log)||s||e,serviceLink:t,timestamp:new Date,sourceCode:a,generatedCode:n,SASWORK:r}),this.requests.length>20&&this.requests.splice(0,1)},e}();t.BaseJobExecutor=r},2693:function(e,t,o){"use strict";var a,n=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function o(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}),i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,o=1,a=arguments.length;o<a;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},r=this&&this.__awaiter||function(e,t,o,a){return new(o||(o=Promise))((function(n,i){function r(e){try{u(a.next(e))}catch(e){i(e)}}function s(e){try{u(a.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}u((a=a.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var o,a,n,i,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;r;)try{if(o=1,a&&(n=2&i[0]?a.return:i[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,i[1])).done)return n;switch(a=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!(n=r.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){r.label=i[1];break}if(6===i[0]&&r.label<n[1]){r.label=n[1],n=i;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(i);break}n[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.Sas9JobExecutor=void 0;var u=o(6230),c=o(1395),l=o(5928),p=o(6118),m=o(795),h=function(e){function t(t,o,a){var n=e.call(this,t,o)||this;return n.jobsPath=a,n.requestClient=new m.Sas9RequestClient(t,!1),n}return n(t,e),t.prototype.execute=function(e,t,o){return r(this,void 0,void 0,(function(){var a,n,r,p,m,h;return s(this,(function(s){switch(s.label){case 0:if(a=l.isRelativePath(e)&&o.appLoc?o.appLoc.replace(/\/?$/,"/")+e.replace(/^\//,""):e,n=""+o.serverUrl+this.jobsPath+"?_program="+a,n+=o.username&&o.password?"&_username="+o.username+"&_password="+o.password:"",r=i({},this.getRequestParams(o)),p=new u,t)try{p=d(p,t)}catch(e){return[2,Promise.reject(new c.ErrorResponse(null==e?void 0:e.message,e))]}for(m in r)r.hasOwnProperty(m)&&p.append(m,r[m]);return[4,this.requestClient.login(o.username,o.password,this.jobsPath)];case 1:return s.sent(),h=t&&Object.keys(t).length?"multipart/form-data; boundary="+p._boundary:"text/plain",[4,this.requestClient.post(n,p,void 0,h,{Accept:"*/*",Connection:"Keep-Alive"})];case 2:return[2,s.sent()]}}))}))},t.prototype.getRequestParams=function(e){var t={};return e.debug&&(t._debug=131),t},t}(p.BaseJobExecutor);t.Sas9JobExecutor=h;var d=function(e,t){for(var o in t){var a=o,n=l.convertToCSV(t[o]);if("ERROR: LARGE STRING LENGTH"===n)throw new Error("The max length of a string value in SASjs is 32765 characters.");e.append(a,n,{filename:a+".csv",contentType:"application/csv"})}return e}},6084:function(e,t,o){"use strict";var a,n=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function o(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}),i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,o=1,a=arguments.length;o<a;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},r=this&&this.__awaiter||function(e,t,o,a){return new(o||(o=Promise))((function(n,i){function r(e){try{u(a.next(e))}catch(e){i(e)}}function s(e){try{u(a.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}u((a=a.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var o,a,n,i,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;r;)try{if(o=1,a&&(n=2&i[0]?a.return:i[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,i[1])).done)return n;switch(a=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!(n=r.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){r.label=i[1];break}if(6===i[0]&&r.label<n[1]){r.label=n[1],n=i;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(i);break}n[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.WebJobExecutor=void 0;var u=o(3900),c=o(1395),l=o(4037),p=o(2170),m=o(5928),h=function(e){function t(t,o,a,n,i){var u=e.call(this,t,o)||this;return u.jobsPath=a,u.requestClient=n,u.sasViyaApiClient=i,u.parseSasViyaDebugResponse=function(e){return r(u,void 0,void 0,(function(){var t,o;return s(this,(function(a){if(t=e.split('<iframe style="width: 99%; height: 500px" src="')[1],!(o=t?t.split('"></iframe>')[0]:null))throw new Error("Unable to find webout file URL.");return[2,this.requestClient.get(this.serverUrl+o,void 0).then((function(e){return e.result}))]}))}))},u}return n(t,e),t.prototype.execute=function(e,t,o,a){return r(this,void 0,void 0,(function(){var n,h,d,f,g,v,b,k,y,j,w,x,C=this;return s(this,(function(z){switch(z.label){case 0:return n=a||function(){return Promise.resolve()},h=m.isRelativePath(e)&&o.appLoc?o.appLoc.replace(/\/?$/,"/")+e.replace(/^\//,""):e,d=""+o.serverUrl+this.jobsPath+"/?_program="+h,o.serverType!==u.ServerType.SasViya?[3,4]:o.serverType!==u.ServerType.SasViya?[3,2]:[4,this.getJobUri(e)];case 1:return g=z.sent(),[3,3];case 2:g="",z.label=3;case 3:d+=(f=g).length>0?"&_job="+f:"",d+=o.contextName?"&_contextname="+o.contextName:"",z.label=4;case 4:if(v=i({},this.getRequestParams(o)),b=new FormData,t)if(k=JSON.stringify(t),o.serverType===u.ServerType.Sas9||k.length>5e5||k.includes(";"))try{b=l.generateFileUploadForm(b,t)}catch(e){return[2,Promise.reject(new c.ErrorResponse(null==e?void 0:e.message,e))]}else try{y=p.generateTableUploadForm(b,t),j=y.formData,w=y.requestParams,b=j,v=i(i({},v),w)}catch(e){return[2,Promise.reject(new c.ErrorResponse(null==e?void 0:e.message,e))]}for(x in v)v.hasOwnProperty(x)&&b.append(x,v[x]);return[2,new Promise((function(i,l){C.requestClient.post(d,b,void 0).then((function(t){return r(C,void 0,void 0,(function(){var a;return s(this,(function(n){switch(n.label){case 0:return this.serverType===u.ServerType.SasViya&&o.debug?[4,this.parseSasViyaDebugResponse(t.result)]:[3,2];case 1:a=n.sent(),this.appendRequest(t,e,o.debug),i(a),n.label=2;case 2:return this.appendRequest(t,e,o.debug),i(t.result),[2]}}))}))})).catch((function(u){return r(C,void 0,void 0,(function(){var r=this;return s(this,(function(s){switch(s.label){case 0:return u instanceof c.JobExecutionError&&(this.appendRequest(u,e,o.debug),l(new c.ErrorResponse(null==u?void 0:u.message,u))),u instanceof c.LoginRequiredError?[4,n()]:[3,2];case 1:return s.sent(),this.appendWaitingRequest((function(){return r.execute(e,t,o,a).then((function(e){i(e)}),(function(e){l(e)}))})),[3,3];case 2:l(new c.ErrorResponse(null==u?void 0:u.message,u)),s.label=3;case 3:return[2]}}))}))}))}))]}}))}))},t.prototype.getJobUri=function(e){return r(this,void 0,void 0,(function(){var t,o,a,n,i,r;return s(this,(function(s){switch(s.label){case 0:if(!this.sasViyaApiClient)return[2,""];if(t="",m.isRelativePath(e)?(n=e.split("/"),o=n.length>1?n[0]:"",a=n.length>1?n[1]:""):(n=e.split("/"),a=n.pop()||"",o=n.join("/")),!a)throw new Error("Job name is empty, null or undefined.");return[4,this.sasViyaApiClient.getJobsInFolder(o)];case 1:return(i=s.sent())&&(r=i.find((function(e){return e.name===a&&"jobDefinition"===e.contentType})))&&(t=r.uri),[2,t]}}))}))},t.prototype.getRequestParams=function(e){var t={};return e.debug&&(t._omittextlog="false",t._omitsessionresults="false",t._debug=131),t},t.prototype.parseSAS9ErrorResponse=function(e){var t=e.split("\n"),o=[],a=-1;t.map((function(e,t){e.toLowerCase().includes("error")&&!e.toLowerCase().includes("this request completed with errors.")&&-1===a&&(a=t)}));for(var n=a-10;n<=a+10;n++)o.push(t[n]);return o.join(", ")},t}(o(6118).BaseJobExecutor);t.WebJobExecutor=h},8217:function(e,t,o){"use strict";var a=this&&this.__createBinding||(Object.create?function(e,t,o,a){void 0===a&&(a=o),Object.defineProperty(e,a,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,a){void 0===a&&(a=o),e[a]=t[o]}),n=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||a(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0}),n(o(1570),t),n(o(4446),t),n(o(6118),t),n(o(2693),t),n(o(6084),t)},4588:function(e,t,o){"use strict";var a=this&&this.__assign||function(){return(a=Object.assign||function(e){for(var t,o=1,a=arguments.length;o<a;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},n=this&&this.__awaiter||function(e,t,o,a){return new(o||(o=Promise))((function(n,i){function r(e){try{u(a.next(e))}catch(e){i(e)}}function s(e){try{u(a.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}u((a=a.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var o,a,n,i,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;r;)try{if(o=1,a&&(n=2&i[0]?a.return:i[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,i[1])).done)return n;switch(a=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!(n=r.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){r.label=i[1];break}if(6===i[0]&&r.label<n[1]){r.label=n[1],n=i;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(i);break}n[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.throwIfError=t.RequestClient=void 0;var r=o(9669),s=o(1527),u=o(1395),c=o(2813),l=o(9778),p=o(9526),m=function(){function e(e,t){var a=this;void 0===t&&(t=!1),this.baseUrl=e,this.csrfToken={headerName:"",value:""},this.authorize=function(e){return n(a,void 0,void 0,(function(){var t,o,a,n,r,s,u,c,l,p,m,h;return i(this,(function(i){switch(i.label){case 0:for(null,o={},a=e.split("<body>")[1].split("</body>")[0],(n=document.createElement("div")).innerHTML=a,r=n.querySelector("#application_authorization"),t=r?this.baseUrl+r.getAttribute("action"):null,s=null==r?void 0:r.querySelectorAll("input"),u=0,c=s;u<c.length;u++)"user_oauth_approval"===(l=c[u]).name&&(l.value="true"),o[l.name]=l.value;for(h in(p=Object.keys(o).find((function(e){return null==e?void 0:e.toLowerCase().includes("csrf")})))&&(this.csrfToken.value=o[p],this.csrfToken.headerName=this.csrfToken.headerName||"x-csrf-token"),m=new FormData,o)o.hasOwnProperty(h)&&m.append(h,o[h]);if(!t)throw new Error("Auth Form URL is null or undefined.");return[4,this.httpClient.post(t,m,{responseType:"text",headers:{Accept:"*/*","Content-Type":"text/plain"}}).then((function(e){return e.data})).catch((function(e){console.log(e)}))];case 1:return[2,i.sent()]}}))}))},this.getHeaders=function(e,t){var o={};return"application/x-www-form-urlencoded"!==t&&(o["Content-Type"]=t),o.Accept="application/json"===t?"application/json":"*/*",e&&(o.Authorization="Bearer "+e),a.csrfToken.headerName&&a.csrfToken.value&&(o[a.csrfToken.headerName]=a.csrfToken.value),o},this.parseAndSetFileUploadCsrfToken=function(e){var t=a.parseCsrfToken(e);t&&(a.fileUploadCsrfToken=t)},this.parseAndSetCsrfToken=function(e){var t=a.parseCsrfToken(e);t&&(a.csrfToken=t)},this.parseCsrfToken=function(e){var t,o=null===(t=e.headers["x-csrf-header"])||void 0===t?void 0:t.toLowerCase();if(o)return{headerName:o,value:e.headers[o]||""}},this.handleError=function(e,t,o){return void 0===o&&(o=!1),n(a,void 0,void 0,(function(){var a,n;return i(this,(function(i){switch(i.label){case 0:return a=e.response,e instanceof u.AuthorizeError?[4,this.httpClient.get(e.confirmUrl,{responseType:"text",headers:{"Content-Type":"text/plain",Accept:"*/*"}}).catch((function(e){throw l.prefixMessage(e,"Error while getting error confirmUrl. ")}))]:[3,5];case 1:return n=i.sent(),s.isAuthorizeFormRequired(null==n?void 0:n.data)?[4,this.authorize(n.data).catch((function(e){throw l.prefixMessage(e,"Error while authorizing request. ")}))]:[3,3];case 2:i.sent(),i.label=3;case 3:return[4,t().catch((function(e){throw l.prefixMessage(e,"Error while executing callback in handleError. ")}))];case 4:return[2,i.sent()];case 5:return e instanceof u.LoginRequiredError&&this.clearCsrfTokens(),403!==(null==a?void 0:a.status)&&449!==(null==a?void 0:a.status)?[3,8]:(this.parseAndSetCsrfToken(a),this.csrfToken.headerName&&this.csrfToken.value?[4,t().catch((function(e){throw l.prefixMessage(e,"Error while executing callback in handleError. ")}))]:[3,7]);case 6:return[2,i.sent()];case 7:throw e;case 8:if(404===(null==a?void 0:a.status))throw new u.NotFoundError(a.config.url);if(502===(null==a?void 0:a.status)){if(o)throw new u.InternalServerError;return[2]}i.label=9;case 9:throw e}}))}))};var c=o(8373);t&&c.Agent?this.httpClient=r.default.create({baseURL:e,httpsAgent:new c.Agent({rejectUnauthorized:!t})}):this.httpClient=r.default.create({baseURL:e})}return e.prototype.getCsrfToken=function(e){return void 0===e&&(e="general"),"file"===e?this.fileUploadCsrfToken:this.csrfToken},e.prototype.clearCsrfTokens=function(){this.csrfToken={headerName:"",value:""},this.fileUploadCsrfToken={headerName:"",value:""}},e.prototype.get=function(e,o,r,s,u){return void 0===r&&(r="application/json"),void 0===s&&(s={}),void 0===u&&(u=!1),n(this,void 0,void 0,(function(){var c,p,m=this;return i(this,(function(h){return c=a(a({},this.getHeaders(o,r)),s),p={headers:c,responseType:"text/plain"===r?"text":"json",withCredentials:!0},"text/plain"===r&&(p.transformResponse=void 0),[2,this.httpClient.get(e,p).then((function(e){return t.throwIfError(e),m.parseResponse(e)})).catch((function(t){return n(m,void 0,void 0,(function(){var a=this;return i(this,(function(n){switch(n.label){case 0:return[4,this.handleError(t,(function(){return a.get(e,o,r,s).catch((function(e){throw l.prefixMessage(e,"Error while executing handle error callback. ")}))}),u).catch((function(e){throw l.prefixMessage(e,"Error while handling error. ")}))];case 1:return[2,n.sent()]}}))}))}))]}))}))},e.prototype.post=function(e,o,r,s,u){var c=this;void 0===s&&(s="application/json"),void 0===u&&(u={});var l=a(a({},this.getHeaders(r,s)),u);return this.httpClient.post(e,o,{headers:l,withCredentials:!0}).then((function(e){return t.throwIfError(e),c.parseResponse(e)})).catch((function(t){return n(c,void 0,void 0,(function(){var a=this;return i(this,(function(n){switch(n.label){case 0:return[4,this.handleError(t,(function(){return a.post(e,o,r,s,u)}))];case 1:return[2,n.sent()]}}))}))}))},e.prototype.put=function(e,o,r,s){return void 0===s&&(s={}),n(this,void 0,void 0,(function(){var u,c=this;return i(this,(function(l){return u=a(a({},this.getHeaders(r,"application/json")),s),[2,this.httpClient.put(e,o,{headers:u,withCredentials:!0}).then((function(e){return t.throwIfError(e),c.parseResponse(e)})).catch((function(t){return n(c,void 0,void 0,(function(){var a=this;return i(this,(function(n){switch(n.label){case 0:return[4,this.handleError(t,(function(){return a.put(e,o,r,s)}))];case 1:return[2,n.sent()]}}))}))}))]}))}))},e.prototype.delete=function(e,o){return n(this,void 0,void 0,(function(){var a,r=this;return i(this,(function(s){return a=this.getHeaders(o,"application/json"),[2,this.httpClient.delete(e,{headers:a,withCredentials:!0}).then((function(e){return t.throwIfError(e),r.parseResponse(e)})).catch((function(t){return n(r,void 0,void 0,(function(){var a=this;return i(this,(function(n){switch(n.label){case 0:return[4,this.handleError(t,(function(){return a.delete(e,o)}))];case 1:return[2,n.sent()]}}))}))}))]}))}))},e.prototype.patch=function(e,o,a){return void 0===o&&(o={}),n(this,void 0,void 0,(function(){var r,s=this;return i(this,(function(u){return r=this.getHeaders(a,"application/json"),[2,this.httpClient.patch(e,o,{headers:r,withCredentials:!0}).then((function(e){return t.throwIfError(e),s.parseResponse(e)})).catch((function(t){return n(s,void 0,void 0,(function(){var n=this;return i(this,(function(i){switch(i.label){case 0:return[4,this.handleError(t,(function(){return n.patch(e,o,a)}))];case 1:return[2,i.sent()]}}))}))}))]}))}))},e.prototype.uploadFile=function(e,t,o){var a;return n(this,void 0,void 0,(function(){var n,r,s;return i(this,(function(i){switch(i.label){case 0:n=this.getHeaders(o,"application/json"),(null===(a=this.fileUploadCsrfToken)||void 0===a?void 0:a.value)&&(n[this.fileUploadCsrfToken.headerName]=this.fileUploadCsrfToken.value),i.label=1;case 1:return i.trys.push([1,3,,4]),[4,this.httpClient.post(e,t,{headers:n})];case 2:return[2,{result:(s=i.sent()).data,etag:s.headers.etag}];case 3:if(r=i.sent(),403===(null==(s=r.response)?void 0:s.status)||449===(null==s?void 0:s.status)){if(this.parseAndSetFileUploadCsrfToken(s),this.fileUploadCsrfToken)return[2,this.uploadFile(e,t,o)];throw r}throw r;case 4:return[2]}}))}))},e.prototype.parseResponse=function(e){var t,o=(null==e?void 0:e.headers)?e.headers.etag:"",a=!1;try{t="string"==typeof e.data?JSON.parse(e.data):e.data}catch(o){try{t=JSON.parse(c.parseWeboutResponse(e.data))}catch(o){t=e.data}a=!0}var n={result:t,etag:o};return a&&(n.log=e.data),n},e}();t.RequestClient=m;t.throwIfError=function(e){var t,o,a,n,i,r,c;if(401===e.status)throw new u.LoginRequiredError;if(null===(o=null===(t=e.data)||void 0===t?void 0:t.entityID)||void 0===o?void 0:o.includes("login"))throw new u.LoginRequiredError;if("string"==typeof e.data&&s.isAuthorizeFormRequired(e.data))throw new u.AuthorizeError("Authorization required",e.request.responseURL);if("string"==typeof e.data&&s.isLogInRequired(e.data)&&!(null===(n=null===(a=e.config)||void 0===a?void 0:a.url)||void 0===n?void 0:n.includes("/SASLogon/login")))throw new u.LoginRequiredError;if(null===(i=e.data)||void 0===i?void 0:i.auth_request){var l=e.request.responseURL;throw new u.AuthorizeError(e.data.message,l)}if(null===(c=null===(r=e.config)||void 0===r?void 0:r.url)||void 0===c?void 0:c.includes("sasAuthError"))throw new p.SAS9AuthError;var m=h(e.data);if(m)throw m};var h=function(e){try{var t=JSON.parse(null==e?void 0:e.replace(/[\n\r]/g," "));return t.errorCode&&t.message?new u.JobExecutionError(t.errorCode,t.message,null==e?void 0:e.replace(/[\n\r]/g," ")):null}catch(t){try{if(null==e?void 0:e.includes('{"errorCode')){if((n=e.split('{"errorCode')).length>1){var o='{"errorCode'+n[1].split('"}')[0]+'"}',a=JSON.parse(o.replace(/[\n\r]/g," "));return new u.JobExecutionError(a.errorCode,a.message,null==e?void 0:e.replace(/[\n\r]/g,"\n"))}return null}try{var n;if(!!(null==e?void 0:e.match(/stored process not found: /i)))if((n=e.split(/stored process not found: /i)).length>1){var i="Stored process not found: "+n[1].split("<i>")[1].split("</i>")[0];return new u.JobExecutionError(404,i,"")}}catch(e){return null}}catch(e){return null}}}},795:function(e,t,o){"use strict";var a,n=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function o(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}),i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,o=1,a=arguments.length;o<a;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},r=this&&this.__awaiter||function(e,t,o,a){return new(o||(o=Promise))((function(n,i){function r(e){try{u(a.next(e))}catch(e){i(e)}}function s(e){try{u(a.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}u((a=a.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var o,a,n,i,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;r;)try{if(o=1,a&&(n=2&i[0]?a.return:i[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,i[1])).done)return n;switch(a=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!(n=r.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){r.label=i[1];break}if(6===i[0]&&r.label<n[1]){r.label=n[1],n=i;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(i);break}n[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.Sas9RequestClient=void 0;var u=o(8224),c=o(7857),l=o(9778),p=o(4588),m=function(e){function t(t,o){void 0===o&&(o=!1);var a=e.call(this,t,o)||this;return a.httpClient.defaults.maxRedirects=0,a.httpClient.defaults.validateStatus=function(e){return e>=200&&e<303},u.default&&(u.default(a.httpClient),a.httpClient.defaults.jar=new c.CookieJar),a}return n(t,e),t.prototype.login=function(e,t,o){return r(this,void 0,void 0,(function(){var a;return s(this,(function(n){switch(n.label){case 0:return a="/User Folders/"+e+"/My Folder/sasjs/runner",this.httpClient.defaults.jar?(this.httpClient.defaults.jar.removeAllCookies(),[4,this.get(o+"?_program="+a+"&_username="+e+"&_password="+t,void 0,"text/plain")]):[3,2];case 1:n.sent(),n.label=2;case 2:return[2]}}))}))},t.prototype.get=function(e,t,o,a,n){return void 0===o&&(o="application/json"),void 0===a&&(a={}),void 0===n&&(n=!1),r(this,void 0,void 0,(function(){var u,c,m=this;return s(this,(function(h){return u=i(i({},this.getHeaders(t,o)),a),c={headers:u,responseType:"text/plain"===o?"text":"json",withCredentials:!0},"text/plain"===o&&(c.transformResponse=void 0),[2,this.httpClient.get(e,c).then((function(e){return 302===e.status?m.get(e.headers.location,t,o):(p.throwIfError(e),m.parseResponse(e))})).catch((function(i){return r(m,void 0,void 0,(function(){var r=this;return s(this,(function(s){switch(s.label){case 0:return[4,this.handleError(i,(function(){return r.get(e,t,o,a).catch((function(e){throw l.prefixMessage(e,"Error while executing handle error callback. ")}))}),n).catch((function(e){throw l.prefixMessage(e,"Error while handling error. ")}))];case 1:return[2,s.sent()]}}))}))}))]}))}))},t.prototype.post=function(e,t,o,a,n){var u=this;void 0===a&&(a="application/json"),void 0===n&&(n={});var c=i(i({},this.getHeaders(o,a)),n);return this.httpClient.post(e,t,{headers:c,withCredentials:!0}).then((function(e){return r(u,void 0,void 0,(function(){return s(this,(function(t){switch(t.label){case 0:return 302!==e.status?[3,2]:[4,this.get(e.headers.location,void 0,a,n)];case 1:return[2,t.sent()];case 2:return p.throwIfError(e),[2,this.parseResponse(e)]}}))}))})).catch((function(i){return r(u,void 0,void 0,(function(){var r=this;return s(this,(function(s){switch(s.label){case 0:return[4,this.handleError(i,(function(){return r.post(e,t,o,a,n)}))];case 1:return[2,s.sent()]}}))}))}))},t}(p.RequestClient);t.Sas9RequestClient=m},470:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4666:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5766:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4975:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},215:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4782:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4168:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8516:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},3153:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5841:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SASjsConfig=void 0;var o=function(){this.serverUrl="",this.pathSAS9="",this.pathSASViya="",this.appLoc="",this.serverType=null,this.debug=!0,this.contextName="",this.useComputeApi=null,this.allowInsecureRequests=!1};t.SASjsConfig=o},2493:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6038:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},9493:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},124:function(e,t){"use strict";var o,a=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function a(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)});Object.defineProperty(t,"__esModule",{value:!0}),t.AuthorizeError=void 0;var n=function(e){function t(o,a){var n=e.call(this,o)||this;return n.message=o,n.confirmUrl=a,n.name="AuthorizeError",Object.setPrototypeOf(n,t.prototype),n}return a(t,e),t}(Error);t.AuthorizeError=n},5267:function(e,t){"use strict";var o,a=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function a(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)});Object.defineProperty(t,"__esModule",{value:!0}),t.ComputeJobExecutionError=void 0;var n=function(e){function t(o,a){var n=e.call(this,"Error: Job execution failed")||this;return n.job=o,n.log=a,n.name="ComputeJobExecutionError",Object.setPrototypeOf(n,t.prototype),n}return a(t,e),t}(Error);t.ComputeJobExecutionError=n},9232:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ErrorResponse=void 0;var o=function(e,t,o){var a=t;if("object"!=typeof t)try{a=JSON.parse(t)}catch(e){o=t,a=""}this.error={message:e,details:a,raw:o}};t.ErrorResponse=o},5109:function(e,t){"use strict";var o,a=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function a(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)});Object.defineProperty(t,"__esModule",{value:!0}),t.InternalServerError=void 0;var n=function(e){function t(){var o=e.call(this,"Error: Internal server error.")||this;return o.name="InternalServerError",Object.setPrototypeOf(o,t.prototype),o}return a(t,e),t}(Error);t.InternalServerError=n},8531:function(e,t){"use strict";var o,a=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function a(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)});Object.defineProperty(t,"__esModule",{value:!0}),t.JobExecutionError=void 0;var n=function(e){function t(o,a,n){var i=e.call(this,"Error Code "+o+": "+a)||this;return i.errorCode=o,i.errorMessage=a,i.result=n,i.name="JobExecutionError",Object.setPrototypeOf(i,t.prototype),i}return a(t,e),t}(Error);t.JobExecutionError=n},6743:function(e,t){"use strict";var o,a=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function a(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)});Object.defineProperty(t,"__esModule",{value:!0}),t.LoginRequiredError=void 0;var n=function(e){function t(){var o=e.call(this,"Auth error: You must be logged in to access this resource")||this;return o.name="LoginRequiredError",Object.setPrototypeOf(o,t.prototype),o}return a(t,e),t}(Error);t.LoginRequiredError=n},9577:function(e,t){"use strict";var o,a=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function a(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)});Object.defineProperty(t,"__esModule",{value:!0}),t.NotFoundError=void 0;var n=function(e){function t(o){var a=e.call(this,"Error: Resource at "+o+" was not found")||this;return a.url=o,a.name="NotFoundError",Object.setPrototypeOf(a,t.prototype),a}return a(t,e),t}(Error);t.NotFoundError=n},9526:function(e,t){"use strict";var o,a=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function a(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)});Object.defineProperty(t,"__esModule",{value:!0}),t.SAS9AuthError=void 0;var n=function(e){function t(){var o=e.call(this,"The credentials you provided cannot be authenticated. Please provide a valid set of credentials.")||this;return o.name="AuthorizeError",Object.setPrototypeOf(o,t.prototype),o}return a(t,e),t}(Error);t.SAS9AuthError=n},1395:function(e,t,o){"use strict";var a=this&&this.__createBinding||(Object.create?function(e,t,o,a){void 0===a&&(a=o),Object.defineProperty(e,a,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,a){void 0===a&&(a=o),e[a]=t[o]}),n=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||a(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0}),n(o(124),t),n(o(5267),t),n(o(5109),t),n(o(8531),t),n(o(6743),t),n(o(9577),t),n(o(9232),t)},1230:function(e,t,o){"use strict";var a=this&&this.__createBinding||(Object.create?function(e,t,o,a){void 0===a&&(a=o),Object.defineProperty(e,a,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,a){void 0===a&&(a=o),e[a]=t[o]}),n=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||a(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0}),n(o(470),t),n(o(4666),t),n(o(4975),t),n(o(5766),t),n(o(215),t),n(o(4782),t),n(o(4168),t),n(o(8516),t),n(o(5841),t),n(o(2493),t),n(o(6038),t),n(o(9493),t),n(o(3153),t)},7922:function(e,t){"use strict";var o=this&&this.__awaiter||function(e,t,o,a){return new(o||(o=Promise))((function(n,i){function r(e){try{u(a.next(e))}catch(e){i(e)}}function s(e){try{u(a.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}u((a=a.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var o,a,n,i,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;r;)try{if(o=1,a&&(n=2&i[0]?a.return:i[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,i[1])).done)return n;switch(a=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!(n=r.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){r.label=i[1];break}if(6===i[0]&&r.label<n[1]){r.label=n[1],n=i;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(i);break}n[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.asyncForEach=void 0,t.asyncForEach=function(e,t){return o(this,void 0,void 0,(function(){var o;return a(this,(function(a){switch(a.label){case 0:o=0,a.label=1;case 1:return o<e.length?[4,t(e[o],o,e)]:[3,4];case 2:a.sent(),a.label=3;case 3:return o++,[3,1];case 4:return[2]}}))}))}},3793:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.compareTimestamps=void 0;t.compareTimestamps=function(e,t){return t.timestamp.getTime()-e.timestamp.getTime()}},2402:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertToCSV=void 0;t.convertToCSV=function(e){var t,a=Object.keys(e[0]),n=!1,i=a.map((function(t){var a=null,i=!1,r=-1,s=e.map((function(e,n){if(e[t]||""===e[t]){if(a){var s=""===e[t]||"string"==typeof e[t]?"chars":"number";i||(r=(i=s!==a)?n+1:-1)}else a=""===e[t]||"string"==typeof e[t]?"chars":"number";var u=void 0;return"string"==typeof e[t]&&(u=o(e[t])),u}})).sort((function(e,t){return t-e}))[0];return s&&s>32765&&(n=!0),i&&console.error("Row ("+r+"), Column ("+t+") has mixed types: ERROR"),t+":"+("chars"===a?"$char":"")+(s||("chars"===a?"1":"best"))+"."}));return n?"ERROR: LARGE STRING LENGTH":(t=e.map((function(e){return Object.keys(e).map((function(t,o){var a,n=e[t];return"number"==typeof n?n:((a='"'+(a=(a=null===n?"":n).replace(/"/g,'""'))+'"').substring(1,a.length-1).search(/(\t|\n|\r|,|\'|\")/gm)<0&&(a=a.substring(1,a.length-1)),""===(a=a.replace(/\r\n/gm,"\n"))&&i[o].includes("best")&&(a="."),a)})).join(",")})),i.join(",").replace(/,/g," ")+"\r\n"+t.join("\r\n"))};var o=function(e){for(var t=e.length,o=e.length-1;o>=0;o--){var a=e.charCodeAt(o);a>127&&a<=2047?t++:a>2047&&a<=65535&&(t+=2),a>=56320&&a<=57343&&o--}return t}},990:function(e,t,o){"use strict";var a=this&&this.__awaiter||function(e,t,o,a){return new(o||(o=Promise))((function(n,i){function r(e){try{u(a.next(e))}catch(e){i(e)}}function s(e){try{u(a.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}u((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var o,a,n,i,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;r;)try{if(o=1,a&&(n=2&i[0]?a.return:i[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,i[1])).done)return n;switch(a=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!(n=r.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){r.label=i[1];break}if(6===i[0]&&r.label<n[1]){r.label=n[1],n=i;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(i);break}n[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.fetchLogByChunks=void 0;var i=o(9778);t.fetchLogByChunks=function(e,t,o,r){return a(void 0,void 0,void 0,(function(){var a,s,u,c,l;return n(this,(function(n){switch(n.label){case 0:a="",s=r<1e4?r:1e4,u=0,n.label=1;case 1:return console.log("Fetching logs from line no: "+(u+1)+" to "+(u+s)+" of "+r+"."),[4,e.get(o+"?start="+u+"&limit="+s,t).then((function(e){return e.result})).catch((function(e){throw i.prefixMessage(e,"Error while getting log. ")}))];case 2:if(0===(c=n.sent()).items.length)return[3,4];l=c.items.map((function(e){return e.line})).join("\n"),a+=l,u+=s,n.label=3;case 3:if(u<r)return[3,1];n.label=4;case 4:return[2,a]}}))}))}},714:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatDataForRequest=void 0;var a=o(2402),n=o(4799);t.formatDataForRequest=function(e){var t=[],o=0,i={};for(var r in e){o++,t.push(r);var s=a.convertToCSV(e[r]);if("ERROR: LARGE STRING LENGTH"===s)throw new Error("The max length of a string value in SASjs is 32765 characters.");if(s.length>16e3){var u=n.splitChunks(s);i["sasjs"+o+"data0"]=u.length,u.forEach((function(e,t){i["sasjs"+o+"data"+(t+1)]=e}))}else i["sasjs"+o+"data"]=s}return i.sasjs_tables=t.join(" "),i}},5928:function(e,t,o){"use strict";var a=this&&this.__createBinding||(Object.create?function(e,t,o,a){void 0===a&&(a=o),Object.defineProperty(e,a,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,a){void 0===a&&(a=o),e[a]=t[o]}),n=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||a(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0}),n(o(7922),t),n(o(3793),t),n(o(2402),t),n(o(257),t),n(o(2),t),n(o(2615),t),n(o(2920),t),n(o(2422),t),n(o(6515),t),n(o(31),t),n(o(9896),t),n(o(4799),t),n(o(2813),t),n(o(990),t)},257:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isRelativePath=void 0;t.isRelativePath=function(e){return!!e&&!e.startsWith("/")}},2:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isUri=void 0;t.isUri=function(e){return/^\/folders\/folders\//.test(e)}},2615:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isUrl=void 0;t.isUrl=function(e){try{var t=new URL(e);if(!["http:","https:"].includes(t.protocol))return!1}catch(e){return!1}return!0}},2920:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.needsRetry=void 0;t.needsRetry=function(e){return!!e&&(e.includes('"errorCode":403')&&e.includes("_csrf")&&e.includes("X-CSRF-TOKEN")||e.includes('"status":403')&&e.includes('"error":"Forbidden"')||e.includes('"status":449')&&e.includes("Authentication success, retry original request"))}},2422:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseGeneratedCode=void 0;t.parseGeneratedCode=function(e){return e.split("\n").filter((function(e){return e.trim().startsWith("MPRINT")})).join("\r\n")}},31:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseSasViyaLog=void 0;t.parseSasViyaLog=function(e){var t;try{t=e.items?e.items.map((function(e){return e.line})).join("\n"):JSON.stringify(e)}catch(o){console.error("An error has occurred while parsing the log response",o),t=e}return t}},6515:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseSourceCode=void 0;t.parseSourceCode=function(e){return e.split("\n").filter((function(e){return e.trim().substring(0,10).trimStart().match(/^\d/)})).join("\r\n")}},2813:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseWeboutResponse=void 0;t.parseWeboutResponse=function(e){var t="";if(e.includes(">>weboutBEGIN<<"))try{t=e.split(">>weboutBEGIN<<")[1].split(">>weboutEND<<")[0]}catch(e){t="",console.error(e)}return t}},9896:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.serialize=void 0;t.serialize=function(e){var t=[];for(var o in e)if(e.hasOwnProperty(o))if(e[o]instanceof Array)for(var a=0,n=e[o].length;a<n;a++)t.push(encodeURIComponent(o)+"="+encodeURIComponent(e[o][a]));else t.push(encodeURIComponent(o)+"="+encodeURIComponent(e[o]));return t.join("&")}},4799:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.splitChunks=void 0;t.splitChunks=function(e){for(var t=16e3,o=Math.ceil(e.length/t),a=new Array(o),n=0,i=0;n<o;++n,i+=t)a[n]=e.substr(i,t);return a}},2511:function(e,t,o){var a;e=o.nmd(e),function(n){t&&t.nodeType,e&&e.nodeType;var i="object"==typeof o.g&&o.g;i.global!==i&&i.window!==i&&i.self;var r,s=2147483647,u=36,c=/^xn--/,l=/[^\x20-\x7E]/,p=/[\x2E\u3002\uFF0E\uFF61]/g,m={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},h=Math.floor,d=String.fromCharCode;function f(e){throw RangeError(m[e])}function g(e,t){for(var o=e.length,a=[];o--;)a[o]=t(e[o]);return a}function v(e,t){var o=e.split("@"),a="";return o.length>1&&(a=o[0]+"@",e=o[1]),a+g((e=e.replace(p,".")).split("."),t).join(".")}function b(e){for(var t,o,a=[],n=0,i=e.length;n<i;)(t=e.charCodeAt(n++))>=55296&&t<=56319&&n<i?56320==(64512&(o=e.charCodeAt(n++)))?a.push(((1023&t)<<10)+(1023&o)+65536):(a.push(t),n--):a.push(t);return a}function k(e){return g(e,(function(e){var t="";return e>65535&&(t+=d((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=d(e)})).join("")}function y(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function j(e,t,o){var a=0;for(e=o?h(e/700):e>>1,e+=h(e/t);e>455;a+=u)e=h(e/35);return h(a+36*e/(e+38))}function w(e){var t,o,a,n,i,r,c,l,p,m,d,g=[],v=e.length,b=0,y=128,w=72;for((o=e.lastIndexOf("-"))<0&&(o=0),a=0;a<o;++a)e.charCodeAt(a)>=128&&f("not-basic"),g.push(e.charCodeAt(a));for(n=o>0?o+1:0;n<v;){for(i=b,r=1,c=u;n>=v&&f("invalid-input"),((l=(d=e.charCodeAt(n++))-48<10?d-22:d-65<26?d-65:d-97<26?d-97:u)>=u||l>h((s-b)/r))&&f("overflow"),b+=l*r,!(l<(p=c<=w?1:c>=w+26?26:c-w));c+=u)r>h(s/(m=u-p))&&f("overflow"),r*=m;w=j(b-i,t=g.length+1,0==i),h(b/t)>s-y&&f("overflow"),y+=h(b/t),b%=t,g.splice(b++,0,y)}return k(g)}function x(e){var t,o,a,n,i,r,c,l,p,m,g,v,k,w,x,C=[];for(v=(e=b(e)).length,t=128,o=0,i=72,r=0;r<v;++r)(g=e[r])<128&&C.push(d(g));for(a=n=C.length,n&&C.push("-");a<v;){for(c=s,r=0;r<v;++r)(g=e[r])>=t&&g<c&&(c=g);for(c-t>h((s-o)/(k=a+1))&&f("overflow"),o+=(c-t)*k,t=c,r=0;r<v;++r)if((g=e[r])<t&&++o>s&&f("overflow"),g==t){for(l=o,p=u;!(l<(m=p<=i?1:p>=i+26?26:p-i));p+=u)x=l-m,w=u-m,C.push(d(y(m+x%w,0))),l=h(x/w);C.push(d(y(l,0))),i=j(o,k,a==n),o=0,++a}++o,++t}return C.join("")}r={version:"1.3.2",ucs2:{decode:b,encode:k},decode:w,encode:x,toASCII:function(e){return v(e,(function(e){return l.test(e)?"xn--"+x(e):e}))},toUnicode:function(e){return v(e,(function(e){return c.test(e)?w(e.slice(4).toLowerCase()):e}))}},void 0===(a=function(){return r}.call(t,o,t,e))||(e.exports=a)}()},8575:(e,t,o)=>{"use strict";var a=o(2511),n=o(2502);function i(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.Qc=k;var r=/^([a-z0-9.+-]+:)/i,s=/:[0-9]*$/,u=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,c=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),l=["'"].concat(c),p=["%","/","?",";","#"].concat(l),m=["/","?","#"],h=/^[+a-z0-9A-Z_-]{0,63}$/,d=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,f={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},b=o(7673);function k(e,t,o){if(e&&n.isObject(e)&&e instanceof i)return e;var a=new i;return a.parse(e,t,o),a}i.prototype.parse=function(e,t,o){if(!n.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var i=e.indexOf("?"),s=-1!==i&&i<e.indexOf("#")?"?":"#",c=e.split(s);c[0]=c[0].replace(/\\/g,"/");var k=e=c.join(s);if(k=k.trim(),!o&&1===e.split("#").length){var y=u.exec(k);if(y)return this.path=k,this.href=k,this.pathname=y[1],y[2]?(this.search=y[2],this.query=t?b.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var j=r.exec(k);if(j){var w=(j=j[0]).toLowerCase();this.protocol=w,k=k.substr(j.length)}if(o||j||k.match(/^\/\/[^@\/]+@[^@\/]+/)){var x="//"===k.substr(0,2);!x||j&&g[j]||(k=k.substr(2),this.slashes=!0)}if(!g[j]&&(x||j&&!v[j])){for(var C,z,S=-1,_=0;_<m.length;_++){-1!==(O=k.indexOf(m[_]))&&(-1===S||O<S)&&(S=O)}-1!==(z=-1===S?k.lastIndexOf("@"):k.lastIndexOf("@",S))&&(C=k.slice(0,z),k=k.slice(z+1),this.auth=decodeURIComponent(C)),S=-1;for(_=0;_<p.length;_++){var O;-1!==(O=k.indexOf(p[_]))&&(-1===S||O<S)&&(S=O)}-1===S&&(S=k.length),this.host=k.slice(0,S),k=k.slice(S),this.parseHost(),this.hostname=this.hostname||"";var E="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!E)for(var A=this.hostname.split(/\./),T=(_=0,A.length);_<T;_++){var P=A[_];if(P&&!P.match(h)){for(var q="",M=0,L=P.length;M<L;M++)P.charCodeAt(M)>127?q+="x":q+=P[M];if(!q.match(h)){var R=A.slice(0,_),U=A.slice(_+1),N=P.match(d);N&&(R.push(N[1]),U.unshift(N[2])),U.length&&(k="/"+U.join(".")+k),this.hostname=R.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),E||(this.hostname=a.toASCII(this.hostname));var I=this.port?":"+this.port:"",F=this.hostname||"";this.host=F+I,this.href+=this.host,E&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==k[0]&&(k="/"+k))}if(!f[w])for(_=0,T=l.length;_<T;_++){var D=l[_];if(-1!==k.indexOf(D)){var B=encodeURIComponent(D);B===D&&(B=escape(D)),k=k.split(D).join(B)}}var J=k.indexOf("#");-1!==J&&(this.hash=k.substr(J),k=k.slice(0,J));var V=k.indexOf("?");if(-1!==V?(this.search=k.substr(V),this.query=k.substr(V+1),t&&(this.query=b.parse(this.query)),k=k.slice(0,V)):t&&(this.search="",this.query={}),k&&(this.pathname=k),v[w]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){I=this.pathname||"";var H=this.search||"";this.path=I+H}return this.href=this.format(),this},i.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",o=this.pathname||"",a=this.hash||"",i=!1,r="";this.host?i=e+this.host:this.hostname&&(i=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&n.isObject(this.query)&&Object.keys(this.query).length&&(r=b.stringify(this.query));var s=this.search||r&&"?"+r||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||v[t])&&!1!==i?(i="//"+(i||""),o&&"/"!==o.charAt(0)&&(o="/"+o)):i||(i=""),a&&"#"!==a.charAt(0)&&(a="#"+a),s&&"?"!==s.charAt(0)&&(s="?"+s),t+i+(o=o.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(s=s.replace("#","%23"))+a},i.prototype.resolve=function(e){return this.resolveObject(k(e,!1,!0)).format()},i.prototype.resolveObject=function(e){if(n.isString(e)){var t=new i;t.parse(e,!1,!0),e=t}for(var o=new i,a=Object.keys(this),r=0;r<a.length;r++){var s=a[r];o[s]=this[s]}if(o.hash=e.hash,""===e.href)return o.href=o.format(),o;if(e.slashes&&!e.protocol){for(var u=Object.keys(e),c=0;c<u.length;c++){var l=u[c];"protocol"!==l&&(o[l]=e[l])}return v[o.protocol]&&o.hostname&&!o.pathname&&(o.path=o.pathname="/"),o.href=o.format(),o}if(e.protocol&&e.protocol!==o.protocol){if(!v[e.protocol]){for(var p=Object.keys(e),m=0;m<p.length;m++){var h=p[m];o[h]=e[h]}return o.href=o.format(),o}if(o.protocol=e.protocol,e.host||g[e.protocol])o.pathname=e.pathname;else{for(var d=(e.pathname||"").split("/");d.length&&!(e.host=d.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==d[0]&&d.unshift(""),d.length<2&&d.unshift(""),o.pathname=d.join("/")}if(o.search=e.search,o.query=e.query,o.host=e.host||"",o.auth=e.auth,o.hostname=e.hostname||e.host,o.port=e.port,o.pathname||o.search){var f=o.pathname||"",b=o.search||"";o.path=f+b}return o.slashes=o.slashes||e.slashes,o.href=o.format(),o}var k=o.pathname&&"/"===o.pathname.charAt(0),y=e.host||e.pathname&&"/"===e.pathname.charAt(0),j=y||k||o.host&&e.pathname,w=j,x=o.pathname&&o.pathname.split("/")||[],C=(d=e.pathname&&e.pathname.split("/")||[],o.protocol&&!v[o.protocol]);if(C&&(o.hostname="",o.port=null,o.host&&(""===x[0]?x[0]=o.host:x.unshift(o.host)),o.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===d[0]?d[0]=e.host:d.unshift(e.host)),e.host=null),j=j&&(""===d[0]||""===x[0])),y)o.host=e.host||""===e.host?e.host:o.host,o.hostname=e.hostname||""===e.hostname?e.hostname:o.hostname,o.search=e.search,o.query=e.query,x=d;else if(d.length)x||(x=[]),x.pop(),x=x.concat(d),o.search=e.search,o.query=e.query;else if(!n.isNullOrUndefined(e.search)){if(C)o.hostname=o.host=x.shift(),(E=!!(o.host&&o.host.indexOf("@")>0)&&o.host.split("@"))&&(o.auth=E.shift(),o.host=o.hostname=E.shift());return o.search=e.search,o.query=e.query,n.isNull(o.pathname)&&n.isNull(o.search)||(o.path=(o.pathname?o.pathname:"")+(o.search?o.search:"")),o.href=o.format(),o}if(!x.length)return o.pathname=null,o.search?o.path="/"+o.search:o.path=null,o.href=o.format(),o;for(var z=x.slice(-1)[0],S=(o.host||e.host||x.length>1)&&("."===z||".."===z)||""===z,_=0,O=x.length;O>=0;O--)"."===(z=x[O])?x.splice(O,1):".."===z?(x.splice(O,1),_++):_&&(x.splice(O,1),_--);if(!j&&!w)for(;_--;_)x.unshift("..");!j||""===x[0]||x[0]&&"/"===x[0].charAt(0)||x.unshift(""),S&&"/"!==x.join("/").substr(-1)&&x.push("");var E,A=""===x[0]||x[0]&&"/"===x[0].charAt(0);C&&(o.hostname=o.host=A?"":x.length?x.shift():"",(E=!!(o.host&&o.host.indexOf("@")>0)&&o.host.split("@"))&&(o.auth=E.shift(),o.host=o.hostname=E.shift()));return(j=j||o.host&&x.length)&&!A&&x.unshift(""),x.length?o.pathname=x.join("/"):(o.pathname=null,o.path=null),n.isNull(o.pathname)&&n.isNull(o.search)||(o.path=(o.pathname?o.pathname:"")+(o.search?o.search:"")),o.auth=e.auth||o.auth,o.slashes=o.slashes||e.slashes,o.href=o.format(),o},i.prototype.parseHost=function(){var e=this.host,t=s.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},2502:e=>{"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},1496:e=>{"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var o=function(){};o.prototype=t.prototype,e.prototype=new o,e.prototype.constructor=e}},384:e=>{e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},9539:(e,t,o)=>{var a=o(4155),n=/%[sdj%]/g;t.format=function(e){if(!v(e)){for(var t=[],o=0;o<arguments.length;o++)t.push(s(arguments[o]));return t.join(" ")}o=1;for(var a=arguments,i=a.length,r=String(e).replace(n,(function(e){if("%%"===e)return"%";if(o>=i)return e;switch(e){case"%s":return String(a[o++]);case"%d":return Number(a[o++]);case"%j":try{return JSON.stringify(a[o++])}catch(e){return"[Circular]"}default:return e}})),u=a[o];o<i;u=a[++o])f(u)||!y(u)?r+=" "+u:r+=" "+s(u);return r},t.deprecate=function(e,n){if(b(o.g.process))return function(){return t.deprecate(e,n).apply(this,arguments)};if(!0===a.noDeprecation)return e;var i=!1;return function(){if(!i){if(a.throwDeprecation)throw new Error(n);a.traceDeprecation?console.trace(n):console.error(n),i=!0}return e.apply(this,arguments)}};var i,r={};function s(e,o){var a={seen:[],stylize:c};return arguments.length>=3&&(a.depth=arguments[2]),arguments.length>=4&&(a.colors=arguments[3]),d(o)?a.showHidden=o:o&&t._extend(a,o),b(a.showHidden)&&(a.showHidden=!1),b(a.depth)&&(a.depth=2),b(a.colors)&&(a.colors=!1),b(a.customInspect)&&(a.customInspect=!0),a.colors&&(a.stylize=u),l(a,e,a.depth)}function u(e,t){var o=s.styles[t];return o?"["+s.colors[o][0]+"m"+e+"["+s.colors[o][1]+"m":e}function c(e,t){return e}function l(e,o,a){if(e.customInspect&&o&&x(o.inspect)&&o.inspect!==t.inspect&&(!o.constructor||o.constructor.prototype!==o)){var n=o.inspect(a,e);return v(n)||(n=l(e,n,a)),n}var i=function(e,t){if(b(t))return e.stylize("undefined","undefined");if(v(t)){var o="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(o,"string")}if(g(t))return e.stylize(""+t,"number");if(d(t))return e.stylize(""+t,"boolean");if(f(t))return e.stylize("null","null")}(e,o);if(i)return i;var r=Object.keys(o),s=function(e){var t={};return e.forEach((function(e,o){t[e]=!0})),t}(r);if(e.showHidden&&(r=Object.getOwnPropertyNames(o)),w(o)&&(r.indexOf("message")>=0||r.indexOf("description")>=0))return p(o);if(0===r.length){if(x(o)){var u=o.name?": "+o.name:"";return e.stylize("[Function"+u+"]","special")}if(k(o))return e.stylize(RegExp.prototype.toString.call(o),"regexp");if(j(o))return e.stylize(Date.prototype.toString.call(o),"date");if(w(o))return p(o)}var c,y="",C=!1,z=["{","}"];(h(o)&&(C=!0,z=["[","]"]),x(o))&&(y=" [Function"+(o.name?": "+o.name:"")+"]");return k(o)&&(y=" "+RegExp.prototype.toString.call(o)),j(o)&&(y=" "+Date.prototype.toUTCString.call(o)),w(o)&&(y=" "+p(o)),0!==r.length||C&&0!=o.length?a<0?k(o)?e.stylize(RegExp.prototype.toString.call(o),"regexp"):e.stylize("[Object]","special"):(e.seen.push(o),c=C?function(e,t,o,a,n){for(var i=[],r=0,s=t.length;r<s;++r)O(t,String(r))?i.push(m(e,t,o,a,String(r),!0)):i.push("");return n.forEach((function(n){n.match(/^\d+$/)||i.push(m(e,t,o,a,n,!0))})),i}(e,o,a,s,r):r.map((function(t){return m(e,o,a,s,t,C)})),e.seen.pop(),function(e,t,o){if(e.reduce((function(e,t){return t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return o[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+o[1];return o[0]+t+" "+e.join(", ")+" "+o[1]}(c,y,z)):z[0]+y+z[1]}function p(e){return"["+Error.prototype.toString.call(e)+"]"}function m(e,t,o,a,n,i){var r,s,u;if((u=Object.getOwnPropertyDescriptor(t,n)||{value:t[n]}).get?s=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(s=e.stylize("[Setter]","special")),O(a,n)||(r="["+n+"]"),s||(e.seen.indexOf(u.value)<0?(s=f(o)?l(e,u.value,null):l(e,u.value,o-1)).indexOf("\n")>-1&&(s=i?s.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+s.split("\n").map((function(e){return"   "+e})).join("\n")):s=e.stylize("[Circular]","special")),b(r)){if(i&&n.match(/^\d+$/))return s;(r=JSON.stringify(""+n)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(r=r.substr(1,r.length-2),r=e.stylize(r,"name")):(r=r.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),r=e.stylize(r,"string"))}return r+": "+s}function h(e){return Array.isArray(e)}function d(e){return"boolean"==typeof e}function f(e){return null===e}function g(e){return"number"==typeof e}function v(e){return"string"==typeof e}function b(e){return void 0===e}function k(e){return y(e)&&"[object RegExp]"===C(e)}function y(e){return"object"==typeof e&&null!==e}function j(e){return y(e)&&"[object Date]"===C(e)}function w(e){return y(e)&&("[object Error]"===C(e)||e instanceof Error)}function x(e){return"function"==typeof e}function C(e){return Object.prototype.toString.call(e)}function z(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(e){if(b(i)&&(i=a.env.NODE_DEBUG||""),e=e.toUpperCase(),!r[e])if(new RegExp("\\b"+e+"\\b","i").test(i)){var o=a.pid;r[e]=function(){var a=t.format.apply(t,arguments);console.error("%s %d: %s",e,o,a)}}else r[e]=function(){};return r[e]},t.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=h,t.isBoolean=d,t.isNull=f,t.isNullOrUndefined=function(e){return null==e},t.isNumber=g,t.isString=v,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=b,t.isRegExp=k,t.isObject=y,t.isDate=j,t.isError=w,t.isFunction=x,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=o(384);var S=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function _(){var e=new Date,t=[z(e.getHours()),z(e.getMinutes()),z(e.getSeconds())].join(":");return[e.getDate(),S[e.getMonth()],t].join(" ")}function O(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){console.log("%s - %s",_(),t.format.apply(t,arguments))},t.inherits=o(1496),t._extend=function(e,t){if(!t||!y(t))return e;for(var o=Object.keys(t),a=o.length;a--;)e[o[a]]=t[o[a]];return e}},8611:(e,t,o)=>{!function(e){"use strict";e.exports.is_uri=o,e.exports.is_http_uri=a,e.exports.is_https_uri=n,e.exports.is_web_uri=i,e.exports.isUri=o,e.exports.isHttpUri=a,e.exports.isHttpsUri=n,e.exports.isWebUri=i;var t=function(e){return e.match(/(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/)};function o(e){if(e&&!/[^a-z0-9\:\/\?\#\[\]\@\!\$\&\'\(\)\*\+\,\;\=\.\-\_\~\%]/i.test(e)&&!/%[^0-9a-f]/i.test(e)&&!/%[0-9a-f](:?[^0-9a-f]|$)/i.test(e)){var o,a,n,i,r,s="",u="";if(s=(o=t(e))[1],a=o[2],n=o[3],i=o[4],r=o[5],s&&s.length&&n.length>=0){if(a&&a.length){if(0!==n.length&&!/^\//.test(n))return}else if(/^\/\//.test(n))return;if(/^[a-z][a-z0-9\+\-\.]*$/.test(s.toLowerCase()))return u+=s+":",a&&a.length&&(u+="//"+a),u+=n,i&&i.length&&(u+="?"+i),r&&r.length&&(u+="#"+r),u}}}function a(e,a){if(o(e)){var n,i,r,s,u="",c="",l="",p="";if(u=(n=t(e))[1],c=n[2],i=n[3],r=n[4],s=n[5],u){if(a){if("https"!=u.toLowerCase())return}else if("http"!=u.toLowerCase())return;if(c)return/:(\d+)$/.test(c)&&(l=c.match(/:(\d+)$/)[0],c=c.replace(/:\d+$/,"")),p+=u+":",p+="//"+c,l&&(p+=l),p+=i,r&&r.length&&(p+="?"+r),s&&s.length&&(p+="#"+s),p}}}function n(e){return a(e,!0)}function i(e){return a(e)||n(e)}}(e=o.nmd(e))},8373:()=>{}},t={};function o(a){var n=t[a];if(void 0!==n)return n.exports;var i=t[a]={id:a,loaded:!1,exports:{}};return e[a].call(i.exports,i,i.exports,o),i.loaded=!0,i.exports}return o.d=(e,t)=>{for(var a in t)o.o(t,a)&&!o.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),o(3607)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,