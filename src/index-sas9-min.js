/*! For license information please see index-sas9-min.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.SASjs=t():e.SASjs=t()}(self,(()=>(()=>{var e={2656:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.decodeToken=t.hasTokenExpired=t.isRefreshTokenExpiring=t.isAccessTokenExpiring=void 0;var o=n(r(6245));function i(e,t){return(0,o.default)(e).exp-(new Date).valueOf()/1e3<=t}t.isAccessTokenExpiring=function(e,t){return void 0===t&&(t=3600),!e||i(e,t)},t.isRefreshTokenExpiring=function(e,t){return void 0===t&&(t=30),!e||i(e,t)},t.hasTokenExpired=function(e){return!e||i(e,0)},t.decodeToken=function(e){var t;try{t=(0,o.default)(e)}catch(e){throw new Error("Invalid token supplied.")}return t}},6799:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(2656),t)},3259:function(e,t){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.prefixMessage=void 0;t.prefixMessage=function(e,t){if("object"==typeof e)if(e.hasOwnProperty("message"))e.message=t+e.message;else{if(!e.hasOwnProperty("body"))return r(r({},e),{message:t});if("object"==typeof e.body&&(e.message=e.body.message?t+e.body.message:t),"string"==typeof e.body){var n=void 0;try{n=JSON.parse(e.body)}catch(r){return e.message=t,e}return n.message=n.message?t+n.message:t,e.body=n,e}}return"string"==typeof e&&(e=t+e),e}},9778:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(3259),t),o(r(1064),t)},1064:function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)s.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return s},s=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var n,o=0,i=t.length;o<i;o++)!n&&o in t||(n||(n=Array.prototype.slice.call(t,0,o)),n[o]=t[o]);return e.concat(n||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.ServerTypeError=void 0;var a=r(3900),u=function(e){function t(r){void 0===r&&(r=[]);var n=this,o=(r=s([],i(new Set(r)),!1)).length?r.join(", ").trim():[a.ServerType.SasViya,a.ServerType.Sas9,a.ServerType.Sasjs].join(", ").trim();return o=o.replace(/,\s([^,]*)$/," and $1"),(n=e.call(this,"Invalid server type: valid option".concat(1!==r.length?"s":""," ").concat(1!==r.length?"are":"is"," ").concat(o))||this).name="ServerTypeError",Object.setPrototypeOf(n,t.prototype),n}return o(t,e),t}(Error);t.ServerTypeError=u},2777:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.newLine=t.capitalizeFirstChar=t.sanitizeSpecialChars=t.padWithNumber=void 0;var n=r(5306);Object.defineProperty(t,"padWithNumber",{enumerable:!0,get:function(){return n.padWithNumber}});var o=r(9017);Object.defineProperty(t,"sanitizeSpecialChars",{enumerable:!0,get:function(){return o.sanitizeSpecialChars}}),Object.defineProperty(t,"capitalizeFirstChar",{enumerable:!0,get:function(){return o.capitalizeFirstChar}});var i=r(1628);Object.defineProperty(t,"newLine",{enumerable:!0,get:function(){return i.newLine}})},5306:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.padWithNumber=void 0;t.padWithNumber=function(e,t){return void 0===t&&(t=0),e>9?e:"".concat(t).concat(e)}},1628:(e,t,r)=>{"use strict";var n=r(4155);Object.defineProperty(t,"__esModule",{value:!0}),t.newLine=void 0;t.newLine=function(){return"win32"===n.platform?"\\r\\n":"\\n"}},9017:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.capitalizeFirstChar=t.sanitizeSpecialChars=void 0;t.sanitizeSpecialChars=function(e){return e.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,"")};t.capitalizeFirstChar=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}},6467:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.isSpecialMissing=t.choiceValidator=t.confirmationValidator=t.urlValidator=void 0;var o=n(r(481));t.urlValidator=function(e,t){return!!o.default.isHttpUri(e)||!!o.default.isHttpsUri(e)||""===e||t};t.confirmationValidator=function(e){return!0===e||!1===e};t.choiceValidator=function(e,t,r){return e>0&&e<=t||r};t.isSpecialMissing=function(e){return("string"!=typeof e||!e.includes(".."))&&new RegExp("^(\\.)?[a-z_.]{1}$","i").test(e)}},7757:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateTimestamp=t.timestampToYYYYMMDDHHMMSS=void 0;var n=r(1302);Object.defineProperty(t,"timestampToYYYYMMDDHHMMSS",{enumerable:!0,get:function(){return n.timestampToYYYYMMDDHHMMSS}}),Object.defineProperty(t,"generateTimestamp",{enumerable:!0,get:function(){return n.generateTimestamp}})},1302:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateTimestamp=t.timestampToYYYYMMDDHHMMSS=void 0;var n=r(2777);t.timestampToYYYYMMDDHHMMSS=function(e){void 0===e&&(e=Date.now());var t=new Date(e);return[t.getFullYear(),(0,n.padWithNumber)(t.getMonth()+1),(0,n.padWithNumber)(t.getDate())].join("/")+" "+[(0,n.padWithNumber)(t.getHours()),(0,n.padWithNumber)(t.getMinutes()),(0,n.padWithNumber)(t.getSeconds())].join(":")},t.generateTimestamp=function(e,t){void 0===e&&(e="");var r=new Date,o=[r.getUTCFullYear(),r.getUTCMonth()+1,r.getUTCDate(),r.getUTCHours(),r.getUTCMinutes(),r.getUTCSeconds()];return o=o.map((function(e){return(0,n.padWithNumber)(e)})),t&&e&&t<o.length&&t>=0&&o.splice(t,0,e),o=o.join(t?"":e)}},8239:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigTypes=void 0,function(e){e.Build="buildConfig",e.Service="serviceConfig",e.Job="jobConfig",e.Test="testConfig",e.Doc="docConfig",e.Deploy="deployConfig",e.Stream="streamConfig",e.Auth="authConfig"}(t.ConfigTypes||(t.ConfigTypes={}))},2427:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},189:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},3692:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6939:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MemberType=void 0,function(e){e.service="service",e.file="file",e.folder="folder"}(t.MemberType||(t.MemberType={}))},3327:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5165:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},3900:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(8239),t),o(r(2427),t),o(r(189),t),o(r(3692),t),o(r(6939),t),o(r(3327),t),o(r(5165),t),o(r(4069),t),o(r(8932),t),o(r(4),t),o(r(2015),t),o(r(8515),t),o(r(5313),t),o(r(8979),t)},4069:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isMacroVars=void 0;t.isMacroVars=function(e){return e&&"object"==typeof e.macroVars&&!Array.isArray(e.macroVars)}},8932:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SASJsFileType=void 0,function(e){e.service="Service",e.job="Job",e.test="Test",e.file="File"}(t.SASJsFileType||(t.SASJsFileType={}))},2015:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8515:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ServerType=void 0,function(e){e.SasViya="SASVIYA",e.Sas9="SAS9",e.Sasjs="SASJS"}(t.ServerType||(t.ServerType={}))},5313:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8979:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.Target=void 0;var o=r(8239),i=r(8515),s=r(6781),a=function(){function e(e,t){var r=this;void 0===t&&(t={}),this._serverType=i.ServerType.SasViya,this.getConfig=function(e,t){var o=r._config[e]||{};return n(n({},o),t[e])};try{if(!e)throw new Error("Invalid target: Input JSON is null or undefined.");this._config=t,this._name=(0,s.validateTargetName)(e.name),this._serverUrl=(0,s.validateServerUrl)(e.serverUrl),this._serverType=(0,s.validateServerType)(e.serverType),this._httpsAgentOptions=(0,s.validateHttpsAgentOptions)(e.httpsAgentOptions),this._appLoc=(0,s.validateAppLoc)(e.appLoc),this._contextName=(0,s.validateContextName)(e.contextName,this._serverType),this._serverName=(0,s.validateServerName)(e.serverName,this._serverType),this._syncFolder=(0,s.validateSyncFolder)(e.syncFolder),this._repositoryName=(0,s.validateRepositoryName)(e.repositoryName,this._serverType),e.docConfig&&(this._docConfig=(0,s.validateDocConfig)(this.getConfig(o.ConfigTypes.Doc,e))),e.authConfig&&(this._authConfig=(0,s.validateAuthConfig)(this.getConfig(o.ConfigTypes.Auth,e))),e.authConfigSas9&&(this._authConfigSas9=(0,s.validateAuthConfigSas9)(e.authConfigSas9)),e.buildConfig&&(this._buildConfig=(0,s.validateBuildConfig)(this.getConfig(o.ConfigTypes.Build,e),this._name)),e.deployConfig?this._deployConfig=(0,s.validateDeployConfig)(this.getConfig(o.ConfigTypes.Deploy,e)):this._deployConfig=(0,s.validateDeployConfig)({deployServicePack:!0,deployScripts:[]}),e.serviceConfig&&(this._serviceConfig=(0,s.validateServiceConfig)(this.getConfig(o.ConfigTypes.Service,e))),e.jobConfig&&(this._jobConfig=(0,s.validateJobConfig)(this.getConfig(o.ConfigTypes.Job,e))),e.streamConfig&&(this._streamConfig=(0,s.validateStreamConfig)(this.getConfig(o.ConfigTypes.Stream,e))),e.testConfig&&(this._testConfig=(0,s.validateTestConfig)(this.getConfig(o.ConfigTypes.Test,e))),e.macroFolders&&e.macroFolders.length&&(this._macroFolders=e.macroFolders),e.programFolders&&e.programFolders.length&&(this._programFolders=e.programFolders),e.binaryFolders&&e.binaryFolders.length&&(this._binaryFolders=e.binaryFolders),e.syncDirectories&&e.syncDirectories.length&&(this._syncDirectories=(0,s.validateSyncDirectories)(e.syncDirectories))}catch(e){throw new Error("Error parsing target: ".concat(e.message))}}return Object.defineProperty(e.prototype,"name",{get:function(){return this._name},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"serverUrl",{get:function(){return this._serverUrl},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"serverType",{get:function(){return this._serverType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"httpsAgentOptions",{get:function(){return this._httpsAgentOptions},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"appLoc",{get:function(){return this._appLoc},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"docConfig",{get:function(){return this._docConfig},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"authConfig",{get:function(){return this._authConfig},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"authConfigSas9",{get:function(){return this._authConfigSas9},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"buildConfig",{get:function(){return this._buildConfig},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"deployConfig",{get:function(){return this._deployConfig},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"serviceConfig",{get:function(){return this._serviceConfig},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"jobConfig",{get:function(){return this._jobConfig},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"streamConfig",{get:function(){return this._streamConfig},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"macroFolders",{get:function(){return this._macroFolders},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"programFolders",{get:function(){return this._programFolders},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"binaryFolders",{get:function(){return this._binaryFolders},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contextName",{get:function(){return this._contextName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"serverName",{get:function(){return this._serverName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"repositoryName",{get:function(){return this._repositoryName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"testConfig",{get:function(){return this._testConfig},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"syncFolder",{get:function(){return this._syncFolder},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"syncDirectories",{get:function(){return this._syncDirectories},enumerable:!1,configurable:!0}),e.prototype.toJson=function(e){var t,r,n;void 0===e&&(e=!0);var o={name:this.name,serverUrl:this.serverUrl,serverType:this.serverType,httpsAgentOptions:this.httpsAgentOptions,appLoc:this.appLoc,docConfig:this.docConfig,deployConfig:this.deployConfig};return(null===(t=this.macroFolders)||void 0===t?void 0:t.length)&&(o.macroFolders=this.macroFolders),(null===(r=this.programFolders)||void 0===r?void 0:r.length)&&(o.programFolders=this.programFolders),(null===(n=this.binaryFolders)||void 0===n?void 0:n.length)&&(o.binaryFolders=this.binaryFolders),this.authConfig&&(o.authConfig=this.authConfig),this.authConfigSas9&&(o.authConfigSas9=this.authConfigSas9),this.syncDirectories?o.syncDirectories=this.syncDirectories:e&&(o.syncDirectories=[]),this.buildConfig?o.buildConfig=this.buildConfig:e&&(o.buildConfig={initProgram:"",termProgram:"",buildOutputFileName:"".concat(this.name,".sas"),buildOutputFolder:"sasjsbuild",buildResultsFolder:"sasjsresults",macroVars:{}}),this.jobConfig?o.jobConfig=this.jobConfig:e&&(o.jobConfig={jobFolders:[],initProgram:"",termProgram:"",macroVars:{}}),this.serviceConfig?o.serviceConfig=this.serviceConfig:e&&(o.serviceConfig={serviceFolders:[],initProgram:"",termProgram:"",macroVars:{}}),this.streamConfig?o.streamConfig=this.streamConfig:e&&(o.streamConfig={streamWebFolder:"",streamWeb:!1,webSourcePath:"",streamServiceName:"",assetPaths:[]}),this.testConfig?o.testConfig=this.testConfig:e&&(o.testConfig={initProgram:"",termProgram:"",macroVars:{},testSetUp:"",testTearDown:""}),this.serverType===i.ServerType.SasViya?o.contextName=this.contextName:this.serverType===i.ServerType.Sas9&&(o.serverName=this.serverName,o.repositoryName=this.repositoryName),o},e}();t.Target=a},6781:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.validateSyncDirectories=t.validateRepositoryName=t.validateSyncFolder=t.validateServerName=t.validateContextName=t.validateStreamConfig=t.validateDeployConfig=t.validateJobConfig=t.validateTestConfig=t.validateServiceConfig=t.validateBuildConfig=t.validateAuthConfigSas9=t.validateAuthConfig=t.validateDocConfig=t.validateAppLoc=t.validateHttpsAgentOptions=t.validateServerUrl=t.validateTargetName=t.validateServerType=void 0;var o=n(r(481)),i=r(3900);t.validateServerType=function(e){if(!e)throw new Error("Invalid server type: `serverType` cannot be null or undefined.");if(e!==i.ServerType.Sas9&&e!==i.ServerType.SasViya&&e!==i.ServerType.Sasjs)throw new Error("Invalid server type: Supported values for  `serverType` are ".concat(i.ServerType.SasViya,", ").concat(i.ServerType.Sas9," and ").concat(i.ServerType.Sasjs,"."));return e};t.validateTargetName=function(e){if(!e)throw new Error("Invalid target name: `name` cannot be empty, null or undefined.");if(e.trim().includes(" "))throw new Error("Invalid target name: `name` cannot include spaces.");if(!/^[a-zA-Z0-9\-]+$/i.test(e))throw new Error("Invalid target name: `name` can only contain alphanumeric characters and dashes.");return e};t.validateServerUrl=function(e){if(null==e&&(e=""),""!==e&&!o.default.isHttpUri(e)&&!o.default.isHttpsUri(e))throw new Error("Invalid server URL: `serverUrl` should either be an empty string or a valid URL of the form http(s)://your-server.com(:port).");return e};t.validateHttpsAgentOptions=function(e){if(e){if("object"!=typeof e)throw new Error("Invalid value: `httpsAgentOptions` should either be an empty or an object of `HttpsAgentOptions`");if(null===e.allowInsecureRequests||void 0===e.allowInsecureRequests)e.allowInsecureRequests=!1;else if("boolean"!=typeof e.allowInsecureRequests)throw new Error("Invalid value: `httpsAgentOptions.allowInsecureRequests` should either be an empty or a boolean");return"string"!=typeof e.caPath&&(e.caPath=void 0),"string"!=typeof e.keyPath&&(e.keyPath=void 0),"string"!=typeof e.certPath&&(e.certPath=void 0),e}};t.validateAppLoc=function(e){if(!e)throw new Error("Invalid app location: `appLoc` cannot be empty, null or undefined.");if(!e.startsWith("/"))throw new Error("Invalid app location: `appLoc` must start with a `/`.");return e};t.validateDocConfig=function(e){if(e||(e={}),"boolean"!=typeof e.displayMacroCore&&(e.displayMacroCore=void 0),"boolean"!=typeof e.enableLineage&&(e.enableLineage=void 0),"string"!=typeof e.outDirectory&&(e.outDirectory=void 0),"string"==typeof e.dataControllerUrl){if(""!==e.dataControllerUrl&&!o.default.isHttpUri(e.dataControllerUrl)&&!o.default.isHttpsUri(e.dataControllerUrl))throw new Error("Invalid Data Controller Url: `dataControllerUrl` should either be an empty string or a valid URL of the form http(s)://your-server.com(:port).")}else e.dataControllerUrl=void 0;return e};t.validateAuthConfig=function(e){if(!e)throw new Error("Invalid auth config: JSON cannot be null or undefined.");return e};t.validateAuthConfigSas9=function(e){if(!e)throw new Error("Invalid auth config for sas9: JSON cannot be null or undefined.");if(!e.userName||!e.password)throw new Error("Invalid auth config for sas9: userName and password can not be empty");return e};t.validateBuildConfig=function(e,t){if(!e)throw new Error("Invalid build config: JSON cannot be null or undefined.");return e.buildResultsFolder||(e.buildResultsFolder="sasjsresults"),e.buildOutputFolder||(e.buildOutputFolder="sasjsbuild"),e.buildOutputFileName||(e.buildOutputFileName="".concat(t,".sas")),e.initProgram||(e.initProgram=""),e.termProgram||(e.termProgram=""),e.macroVars||(e.macroVars={}),e};t.validateServiceConfig=function(e){if(!e)throw new Error("Invalid service config: JSON cannot be null or undefined.");return e.initProgram||(e.initProgram=""),e.termProgram||(e.termProgram=""),e.serviceFolders||(e.serviceFolders=[]),e.macroVars||(e.macroVars={}),e};t.validateTestConfig=function(e){if(!e)throw new Error("Invalid test config: JSON cannot be null or undefined.");return e.initProgram||(e.initProgram=""),e.termProgram||(e.termProgram=""),e.macroVars||(e.macroVars={}),e.testSetUp||(e.testSetUp=""),e.testTearDown||(e.testTearDown=""),e};t.validateJobConfig=function(e){if(!e)throw new Error("Invalid job config: JSON cannot be null or undefined.");return e.initProgram||(e.initProgram=""),e.termProgram||(e.termProgram=""),e.jobFolders||(e.jobFolders=[]),e.macroVars||(e.macroVars={}),e};t.validateDeployConfig=function(e){if(!e)throw new Error("Invalid deploy config: JSON cannot be null or undefined.");return e.deployServicePack=!!e.deployServicePack,e.deployScripts||(e.deployScripts=[]),e};t.validateStreamConfig=function(e){if(!e)throw new Error("Invalid stream config: JSON cannot be null or undefined.");if(!0!==e.streamWeb&&!1!==e.streamWeb)throw new Error("Invalid stream config: `streamWeb` cannot be a non-boolean value.");if(e.streamWeb&&!e.streamWebFolder)throw new Error("Invalid stream config: `streamWebFolder` cannot be empty, null or undefined when `streamWeb` is true.");if(e.streamWeb&&!e.webSourcePath)throw new Error("Invalid stream config: `webSourcePath` cannot be empty, null or undefined.");return e.streamLogo&&"string"!=typeof e.streamLogo&&(e.streamLogo=void 0),e.assetPaths||(e.assetPaths=[]),e.streamServiceName||(e.streamServiceName="clickme"),e};t.validateContextName=function(e,t){return t!==i.ServerType.SasViya||e?e:"SAS Job Execution compute context"};t.validateServerName=function(e,t){return t!==i.ServerType.Sas9||e?e:"SASApp"};t.validateSyncFolder=function(e){if("string"==typeof e&&e)return e};t.validateRepositoryName=function(e,t){return t!==i.ServerType.Sas9||e?e:"Foundation"};t.validateSyncDirectories=function(e){if(!e)throw new Error("Invalid syncDirectories config: JSON cannot be null or undefined.");return e.forEach((function(e){if(!e.local||!e.remote)throw new Error("Invalid syncDirectory config: values of property 'local' and 'remote can not be empty or undefined")})),e}},9282:(e,t,r)=>{"use strict";var n=r(4155),o=r(5108);function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}var s,a,u=r(2136).codes,c=u.ERR_AMBIGUOUS_ARGUMENT,l=u.ERR_INVALID_ARG_TYPE,f=u.ERR_INVALID_ARG_VALUE,p=u.ERR_INVALID_RETURN_VALUE,h=u.ERR_MISSING_ARGS,d=r(5961),y=r(9539).inspect,g=r(9539).types,v=g.isPromise,b=g.isRegExp,m=Object.assign?Object.assign:r(8091).assign,w=Object.is?Object.is:r(609);new Map;function S(){var e=r(9158);s=e.isDeepEqual,a=e.isDeepStrictEqual}var O=!1,_=e.exports=A,E={};function x(e){if(e.message instanceof Error)throw e.message;throw new d(e)}function j(e,t,r,n){if(!r){var o=!1;if(0===t)o=!0,n="No value argument passed to `assert.ok()`";else if(n instanceof Error)throw n;var i=new d({actual:r,expected:!0,message:n,operator:"==",stackStartFn:e});throw i.generatedMessage=o,i}}function A(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];j.apply(void 0,[A,t.length].concat(t))}_.fail=function e(t,r,i,s,a){var u,c=arguments.length;if(0===c)u="Failed";else if(1===c)i=t,t=void 0;else{if(!1===O)O=!0,(n.emitWarning?n.emitWarning:o.warn.bind(o))("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.","DeprecationWarning","DEP0094");2===c&&(s="!=")}if(i instanceof Error)throw i;var l={actual:t,expected:r,operator:void 0===s?"fail":s,stackStartFn:a||e};void 0!==i&&(l.message=i);var f=new d(l);throw u&&(f.message=u,f.generatedMessage=!0),f},_.AssertionError=d,_.ok=A,_.equal=function e(t,r,n){if(arguments.length<2)throw new h("actual","expected");t!=r&&x({actual:t,expected:r,message:n,operator:"==",stackStartFn:e})},_.notEqual=function e(t,r,n){if(arguments.length<2)throw new h("actual","expected");t==r&&x({actual:t,expected:r,message:n,operator:"!=",stackStartFn:e})},_.deepEqual=function e(t,r,n){if(arguments.length<2)throw new h("actual","expected");void 0===s&&S(),s(t,r)||x({actual:t,expected:r,message:n,operator:"deepEqual",stackStartFn:e})},_.notDeepEqual=function e(t,r,n){if(arguments.length<2)throw new h("actual","expected");void 0===s&&S(),s(t,r)&&x({actual:t,expected:r,message:n,operator:"notDeepEqual",stackStartFn:e})},_.deepStrictEqual=function e(t,r,n){if(arguments.length<2)throw new h("actual","expected");void 0===s&&S(),a(t,r)||x({actual:t,expected:r,message:n,operator:"deepStrictEqual",stackStartFn:e})},_.notDeepStrictEqual=function e(t,r,n){if(arguments.length<2)throw new h("actual","expected");void 0===s&&S();a(t,r)&&x({actual:t,expected:r,message:n,operator:"notDeepStrictEqual",stackStartFn:e})},_.strictEqual=function e(t,r,n){if(arguments.length<2)throw new h("actual","expected");w(t,r)||x({actual:t,expected:r,message:n,operator:"strictEqual",stackStartFn:e})},_.notStrictEqual=function e(t,r,n){if(arguments.length<2)throw new h("actual","expected");w(t,r)&&x({actual:t,expected:r,message:n,operator:"notStrictEqual",stackStartFn:e})};var C=function e(t,r,n){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r.forEach((function(e){e in t&&(void 0!==n&&"string"==typeof n[e]&&b(t[e])&&t[e].test(n[e])?o[e]=n[e]:o[e]=t[e])}))};function P(e,t,r,n){if("function"!=typeof t){if(b(t))return t.test(e);if(2===arguments.length)throw new l("expected",["Function","RegExp"],t);if("object"!==i(e)||null===e){var o=new d({actual:e,expected:t,message:r,operator:"deepStrictEqual",stackStartFn:n});throw o.operator=n.name,o}var u=Object.keys(t);if(t instanceof Error)u.push("name","message");else if(0===u.length)throw new f("error",t,"may not be an empty object");return void 0===s&&S(),u.forEach((function(o){"string"==typeof e[o]&&b(t[o])&&t[o].test(e[o])||function(e,t,r,n,o,i){if(!(r in e)||!a(e[r],t[r])){if(!n){var s=new C(e,o),u=new C(t,o,e),c=new d({actual:s,expected:u,operator:"deepStrictEqual",stackStartFn:i});throw c.actual=e,c.expected=t,c.operator=i.name,c}x({actual:e,expected:t,message:n,operator:i.name,stackStartFn:i})}}(e,t,o,r,u,n)})),!0}return void 0!==t.prototype&&e instanceof t||!Error.isPrototypeOf(t)&&!0===t.call({},e)}function T(e){if("function"!=typeof e)throw new l("fn","Function",e);try{e()}catch(e){return e}return E}function k(e){return v(e)||null!==e&&"object"===i(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function R(e){return Promise.resolve().then((function(){var t;if("function"==typeof e){if(!k(t=e()))throw new p("instance of Promise","promiseFn",t)}else{if(!k(e))throw new l("promiseFn",["Function","Promise"],e);t=e}return Promise.resolve().then((function(){return t})).then((function(){return E})).catch((function(e){return e}))}))}function U(e,t,r,n){if("string"==typeof r){if(4===arguments.length)throw new l("error",["Object","Error","Function","RegExp"],r);if("object"===i(t)&&null!==t){if(t.message===r)throw new c("error/message",'The error message "'.concat(t.message,'" is identical to the message.'))}else if(t===r)throw new c("error/message",'The error "'.concat(t,'" is identical to the message.'));n=r,r=void 0}else if(null!=r&&"object"!==i(r)&&"function"!=typeof r)throw new l("error",["Object","Error","Function","RegExp"],r);if(t===E){var o="";r&&r.name&&(o+=" (".concat(r.name,")")),o+=n?": ".concat(n):".";var s="rejects"===e.name?"rejection":"exception";x({actual:void 0,expected:r,operator:e.name,message:"Missing expected ".concat(s).concat(o),stackStartFn:e})}if(r&&!P(t,r,n,e))throw t}function I(e,t,r,n){if(t!==E){if("string"==typeof r&&(n=r,r=void 0),!r||P(t,r)){var o=n?": ".concat(n):".",i="doesNotReject"===e.name?"rejection":"exception";x({actual:t,expected:r,operator:e.name,message:"Got unwanted ".concat(i).concat(o,"\n")+'Actual message: "'.concat(t&&t.message,'"'),stackStartFn:e})}throw t}}function N(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];j.apply(void 0,[N,t.length].concat(t))}_.throws=function e(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];U.apply(void 0,[e,T(t)].concat(n))},_.rejects=function e(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];return R(t).then((function(t){return U.apply(void 0,[e,t].concat(n))}))},_.doesNotThrow=function e(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];I.apply(void 0,[e,T(t)].concat(n))},_.doesNotReject=function e(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];return R(t).then((function(t){return I.apply(void 0,[e,t].concat(n))}))},_.ifError=function e(t){if(null!=t){var r="ifError got unwanted exception: ";"object"===i(t)&&"string"==typeof t.message?0===t.message.length&&t.constructor?r+=t.constructor.name:r+=t.message:r+=y(t);var n=new d({actual:t,expected:null,operator:"ifError",message:r,stackStartFn:e}),o=t.stack;if("string"==typeof o){var s=o.split("\n");s.shift();for(var a=n.stack.split("\n"),u=0;u<s.length;u++){var c=a.indexOf(s[u]);if(-1!==c){a=a.slice(0,c);break}}n.stack="".concat(a.join("\n"),"\n").concat(s.join("\n"))}throw n}},_.strict=m(N,_,{equal:_.strictEqual,deepEqual:_.deepStrictEqual,notEqual:_.notStrictEqual,notDeepEqual:_.notDeepStrictEqual}),_.strict.strict=_.strict},5961:(e,t,r)=>{"use strict";var n=r(4155);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?a(e):t}function a(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(e){var t="function"==typeof Map?new Map:void 0;return u=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return c(e,arguments,f(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),l(n,e)},u(e)}function c(e,t,r){return c=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}()?Reflect.construct:function(e,t,r){var n=[null];n.push.apply(n,t);var o=new(Function.bind.apply(e,n));return r&&l(o,r.prototype),o},c.apply(null,arguments)}function l(e,t){return l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},l(e,t)}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}function p(e){return p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p(e)}var h=r(9539).inspect,d=r(2136).codes.ERR_INVALID_ARG_TYPE;function y(e,t,r){return(void 0===r||r>e.length)&&(r=e.length),e.substring(r-t.length,r)===t}var g="",v="",b="",m="",w={deepStrictEqual:"Expected values to be strictly deep-equal:",strictEqual:"Expected values to be strictly equal:",strictEqualObject:'Expected "actual" to be reference-equal to "expected":',deepEqual:"Expected values to be loosely deep-equal:",equal:"Expected values to be loosely equal:",notDeepStrictEqual:'Expected "actual" not to be strictly deep-equal to:',notStrictEqual:'Expected "actual" to be strictly unequal to:',notStrictEqualObject:'Expected "actual" not to be reference-equal to "expected":',notDeepEqual:'Expected "actual" not to be loosely deep-equal to:',notEqual:'Expected "actual" to be loosely unequal to:',notIdentical:"Values identical but not reference-equal:"},S=10;function O(e){var t=Object.keys(e),r=Object.create(Object.getPrototypeOf(e));return t.forEach((function(t){r[t]=e[t]})),Object.defineProperty(r,"message",{value:e.message}),r}function _(e){return h(e,{compact:!1,customInspect:!1,depth:1e3,maxArrayLength:1/0,showHidden:!1,breakLength:1/0,showProxy:!1,sorted:!0,getters:!0})}function E(e,t,r){var o="",i="",s=0,a="",u=!1,c=_(e),l=c.split("\n"),f=_(t).split("\n"),h=0,d="";if("strictEqual"===r&&"object"===p(e)&&"object"===p(t)&&null!==e&&null!==t&&(r="strictEqualObject"),1===l.length&&1===f.length&&l[0]!==f[0]){var O=l[0].length+f[0].length;if(O<=S){if(!("object"===p(e)&&null!==e||"object"===p(t)&&null!==t||0===e&&0===t))return"".concat(w[r],"\n\n")+"".concat(l[0]," !== ").concat(f[0],"\n")}else if("strictEqualObject"!==r){if(O<(n.stderr&&n.stderr.isTTY?n.stderr.columns:80)){for(;l[0][h]===f[0][h];)h++;h>2&&(d="\n  ".concat(function(e,t){if(t=Math.floor(t),0==e.length||0==t)return"";var r=e.length*t;for(t=Math.floor(Math.log(t)/Math.log(2));t;)e+=e,t--;return e+e.substring(0,r-e.length)}(" ",h),"^"),h=0)}}}for(var E=l[l.length-1],x=f[f.length-1];E===x&&(h++<2?a="\n  ".concat(E).concat(a):o=E,l.pop(),f.pop(),0!==l.length&&0!==f.length);)E=l[l.length-1],x=f[f.length-1];var j=Math.max(l.length,f.length);if(0===j){var A=c.split("\n");if(A.length>30)for(A[26]="".concat(g,"...").concat(m);A.length>27;)A.pop();return"".concat(w.notIdentical,"\n\n").concat(A.join("\n"),"\n")}h>3&&(a="\n".concat(g,"...").concat(m).concat(a),u=!0),""!==o&&(a="\n  ".concat(o).concat(a),o="");var C=0,P=w[r]+"\n".concat(v,"+ actual").concat(m," ").concat(b,"- expected").concat(m),T=" ".concat(g,"...").concat(m," Lines skipped");for(h=0;h<j;h++){var k=h-s;if(l.length<h+1)k>1&&h>2&&(k>4?(i+="\n".concat(g,"...").concat(m),u=!0):k>3&&(i+="\n  ".concat(f[h-2]),C++),i+="\n  ".concat(f[h-1]),C++),s=h,o+="\n".concat(b,"-").concat(m," ").concat(f[h]),C++;else if(f.length<h+1)k>1&&h>2&&(k>4?(i+="\n".concat(g,"...").concat(m),u=!0):k>3&&(i+="\n  ".concat(l[h-2]),C++),i+="\n  ".concat(l[h-1]),C++),s=h,i+="\n".concat(v,"+").concat(m," ").concat(l[h]),C++;else{var R=f[h],U=l[h],I=U!==R&&(!y(U,",")||U.slice(0,-1)!==R);I&&y(R,",")&&R.slice(0,-1)===U&&(I=!1,U+=","),I?(k>1&&h>2&&(k>4?(i+="\n".concat(g,"...").concat(m),u=!0):k>3&&(i+="\n  ".concat(l[h-2]),C++),i+="\n  ".concat(l[h-1]),C++),s=h,i+="\n".concat(v,"+").concat(m," ").concat(U),o+="\n".concat(b,"-").concat(m," ").concat(R),C+=2):(i+=o,o="",1!==k&&0!==h||(i+="\n  ".concat(U),C++))}if(C>20&&h<j-2)return"".concat(P).concat(T,"\n").concat(i,"\n").concat(g,"...").concat(m).concat(o,"\n")+"".concat(g,"...").concat(m)}return"".concat(P).concat(u?T:"","\n").concat(i).concat(o).concat(a).concat(d)}var x=function(e){function t(e){var r;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),"object"!==p(e)||null===e)throw new d("options","Object",e);var o=e.message,i=e.operator,u=e.stackStartFn,c=e.actual,l=e.expected,h=Error.stackTraceLimit;if(Error.stackTraceLimit=0,null!=o)r=s(this,f(t).call(this,String(o)));else if(n.stderr&&n.stderr.isTTY&&(n.stderr&&n.stderr.getColorDepth&&1!==n.stderr.getColorDepth()?(g="[34m",v="[32m",m="[39m",b="[31m"):(g="",v="",m="",b="")),"object"===p(c)&&null!==c&&"object"===p(l)&&null!==l&&"stack"in c&&c instanceof Error&&"stack"in l&&l instanceof Error&&(c=O(c),l=O(l)),"deepStrictEqual"===i||"strictEqual"===i)r=s(this,f(t).call(this,E(c,l,i)));else if("notDeepStrictEqual"===i||"notStrictEqual"===i){var y=w[i],S=_(c).split("\n");if("notStrictEqual"===i&&"object"===p(c)&&null!==c&&(y=w.notStrictEqualObject),S.length>30)for(S[26]="".concat(g,"...").concat(m);S.length>27;)S.pop();r=1===S.length?s(this,f(t).call(this,"".concat(y," ").concat(S[0]))):s(this,f(t).call(this,"".concat(y,"\n\n").concat(S.join("\n"),"\n")))}else{var x=_(c),j="",A=w[i];"notDeepEqual"===i||"notEqual"===i?(x="".concat(w[i],"\n\n").concat(x)).length>1024&&(x="".concat(x.slice(0,1021),"...")):(j="".concat(_(l)),x.length>512&&(x="".concat(x.slice(0,509),"...")),j.length>512&&(j="".concat(j.slice(0,509),"...")),"deepEqual"===i||"equal"===i?x="".concat(A,"\n\n").concat(x,"\n\nshould equal\n\n"):j=" ".concat(i," ").concat(j)),r=s(this,f(t).call(this,"".concat(x).concat(j)))}return Error.stackTraceLimit=h,r.generatedMessage=!o,Object.defineProperty(a(r),"name",{value:"AssertionError [ERR_ASSERTION]",enumerable:!1,writable:!0,configurable:!0}),r.code="ERR_ASSERTION",r.actual=c,r.expected=l,r.operator=i,Error.captureStackTrace&&Error.captureStackTrace(a(r),u),r.stack,r.name="AssertionError",s(r)}var r,u,c;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,e),r=t,u=[{key:"toString",value:function(){return"".concat(this.name," [").concat(this.code,"]: ").concat(this.message)}},{key:h.custom,value:function(e,t){return h(this,function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){o(e,t,r[t])}))}return e}({},t,{customInspect:!1,depth:0}))}}],u&&i(r.prototype,u),c&&i(r,c),t}(u(Error));e.exports=x},2136:(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function o(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function i(e){return i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},i(e)}function s(e,t){return s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},s(e,t)}var a,u,c={};function l(e,t,r){r||(r=Error);var n=function(r){function n(r,s,a){var u;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),u=o(this,i(n).call(this,function(e,r,n){return"string"==typeof t?t:t(e,r,n)}(r,s,a))),u.code=e,u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(n,r),n}(r);c[e]=n}function f(e,t){if(Array.isArray(e)){var r=e.length;return e=e.map((function(e){return String(e)})),r>2?"one of ".concat(t," ").concat(e.slice(0,r-1).join(", "),", or ")+e[r-1]:2===r?"one of ".concat(t," ").concat(e[0]," or ").concat(e[1]):"of ".concat(t," ").concat(e[0])}return"of ".concat(t," ").concat(String(e))}l("ERR_AMBIGUOUS_ARGUMENT",'The "%s" argument is ambiguous. %s',TypeError),l("ERR_INVALID_ARG_TYPE",(function(e,t,o){var i,s,u,c;if(void 0===a&&(a=r(9282)),a("string"==typeof e,"'name' must be a string"),"string"==typeof t&&(s="not ",t.substr(!u||u<0?0:+u,s.length)===s)?(i="must not be",t=t.replace(/^not /,"")):i="must be",function(e,t,r){return(void 0===r||r>e.length)&&(r=e.length),e.substring(r-t.length,r)===t}(e," argument"))c="The ".concat(e," ").concat(i," ").concat(f(t,"type"));else{var l=function(e,t,r){return"number"!=typeof r&&(r=0),!(r+t.length>e.length)&&-1!==e.indexOf(t,r)}(e,".")?"property":"argument";c='The "'.concat(e,'" ').concat(l," ").concat(i," ").concat(f(t,"type"))}return c+=". Received type ".concat(n(o))}),TypeError),l("ERR_INVALID_ARG_VALUE",(function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"is invalid";void 0===u&&(u=r(9539));var o=u.inspect(t);return o.length>128&&(o="".concat(o.slice(0,128),"...")),"The argument '".concat(e,"' ").concat(n,". Received ").concat(o)}),TypeError,RangeError),l("ERR_INVALID_RETURN_VALUE",(function(e,t,r){var o;return o=r&&r.constructor&&r.constructor.name?"instance of ".concat(r.constructor.name):"type ".concat(n(r)),"Expected ".concat(e,' to be returned from the "').concat(t,'"')+" function but got ".concat(o,".")}),TypeError),l("ERR_MISSING_ARGS",(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];void 0===a&&(a=r(9282)),a(t.length>0,"At least one arg needs to be specified");var o="The ",i=t.length;switch(t=t.map((function(e){return'"'.concat(e,'"')})),i){case 1:o+="".concat(t[0]," argument");break;case 2:o+="".concat(t[0]," and ").concat(t[1]," arguments");break;default:o+=t.slice(0,i-1).join(", "),o+=", and ".concat(t[i-1]," arguments")}return"".concat(o," must be specified")}),TypeError),e.exports.codes=c},9158:(e,t,r)=>{"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==a.return||a.return()}finally{if(o)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}var i=void 0!==/a/g.flags,s=function(e){var t=[];return e.forEach((function(e){return t.push(e)})),t},a=function(e){var t=[];return e.forEach((function(e,r){return t.push([r,e])})),t},u=Object.is?Object.is:r(609),c=Object.getOwnPropertySymbols?Object.getOwnPropertySymbols:function(){return[]},l=Number.isNaN?Number.isNaN:r(360);function f(e){return e.call.bind(e)}var p=f(Object.prototype.hasOwnProperty),h=f(Object.prototype.propertyIsEnumerable),d=f(Object.prototype.toString),y=r(9539).types,g=y.isAnyArrayBuffer,v=y.isArrayBufferView,b=y.isDate,m=y.isMap,w=y.isRegExp,S=y.isSet,O=y.isNativeError,_=y.isBoxedPrimitive,E=y.isNumberObject,x=y.isStringObject,j=y.isBooleanObject,A=y.isBigIntObject,C=y.isSymbolObject,P=y.isFloat32Array,T=y.isFloat64Array;function k(e){if(0===e.length||e.length>10)return!0;for(var t=0;t<e.length;t++){var r=e.charCodeAt(t);if(r<48||r>57)return!0}return 10===e.length&&e>=Math.pow(2,32)}function R(e){return Object.keys(e).filter(k).concat(c(e).filter(Object.prototype.propertyIsEnumerable.bind(e)))}function U(e,t){if(e===t)return 0;for(var r=e.length,n=t.length,o=0,i=Math.min(r,n);o<i;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0}var I=!0,N=!1,L=0,F=1,M=2,B=3;function D(e,t,r,n){if(e===t)return 0!==e||(!r||u(e,t));if(r){if("object"!==o(e))return"number"==typeof e&&l(e)&&l(t);if("object"!==o(t)||null===e||null===t)return!1;if(Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1}else{if(null===e||"object"!==o(e))return(null===t||"object"!==o(t))&&e==t;if(null===t||"object"!==o(t))return!1}var s,a,c,f,p=d(e);if(p!==d(t))return!1;if(Array.isArray(e)){if(e.length!==t.length)return!1;var h=R(e),y=R(t);return h.length===y.length&&J(e,t,r,n,F,h)}if("[object Object]"===p&&(!m(e)&&m(t)||!S(e)&&S(t)))return!1;if(b(e)){if(!b(t)||Date.prototype.getTime.call(e)!==Date.prototype.getTime.call(t))return!1}else if(w(e)){if(!w(t)||(c=e,f=t,!(i?c.source===f.source&&c.flags===f.flags:RegExp.prototype.toString.call(c)===RegExp.prototype.toString.call(f))))return!1}else if(O(e)||e instanceof Error){if(e.message!==t.message||e.name!==t.name)return!1}else{if(v(e)){if(r||!P(e)&&!T(e)){if(!function(e,t){return e.byteLength===t.byteLength&&0===U(new Uint8Array(e.buffer,e.byteOffset,e.byteLength),new Uint8Array(t.buffer,t.byteOffset,t.byteLength))}(e,t))return!1}else if(!function(e,t){if(e.byteLength!==t.byteLength)return!1;for(var r=0;r<e.byteLength;r++)if(e[r]!==t[r])return!1;return!0}(e,t))return!1;var k=R(e),I=R(t);return k.length===I.length&&J(e,t,r,n,L,k)}if(S(e))return!(!S(t)||e.size!==t.size)&&J(e,t,r,n,M);if(m(e))return!(!m(t)||e.size!==t.size)&&J(e,t,r,n,B);if(g(e)){if(a=t,(s=e).byteLength!==a.byteLength||0!==U(new Uint8Array(s),new Uint8Array(a)))return!1}else if(_(e)&&!function(e,t){return E(e)?E(t)&&u(Number.prototype.valueOf.call(e),Number.prototype.valueOf.call(t)):x(e)?x(t)&&String.prototype.valueOf.call(e)===String.prototype.valueOf.call(t):j(e)?j(t)&&Boolean.prototype.valueOf.call(e)===Boolean.prototype.valueOf.call(t):A(e)?A(t)&&BigInt.prototype.valueOf.call(e)===BigInt.prototype.valueOf.call(t):C(t)&&Symbol.prototype.valueOf.call(e)===Symbol.prototype.valueOf.call(t)}(e,t))return!1}return J(e,t,r,n,L)}function q(e,t){return t.filter((function(t){return h(e,t)}))}function J(e,t,r,i,u,l){if(5===arguments.length){l=Object.keys(e);var f=Object.keys(t);if(l.length!==f.length)return!1}for(var d=0;d<l.length;d++)if(!p(t,l[d]))return!1;if(r&&5===arguments.length){var y=c(e);if(0!==y.length){var g=0;for(d=0;d<y.length;d++){var v=y[d];if(h(e,v)){if(!h(t,v))return!1;l.push(v),g++}else if(h(t,v))return!1}var b=c(t);if(y.length!==b.length&&q(t,b).length!==g)return!1}else{var m=c(t);if(0!==m.length&&0!==q(t,m).length)return!1}}if(0===l.length&&(u===L||u===F&&0===e.length||0===e.size))return!0;if(void 0===i)i={val1:new Map,val2:new Map,position:0};else{var w=i.val1.get(e);if(void 0!==w){var S=i.val2.get(t);if(void 0!==S)return w===S}i.position++}i.val1.set(e,i.position),i.val2.set(t,i.position);var O=function(e,t,r,i,u,c){var l=0;if(c===M){if(!function(e,t,r,n){for(var i=null,a=s(e),u=0;u<a.length;u++){var c=a[u];if("object"===o(c)&&null!==c)null===i&&(i=new Set),i.add(c);else if(!t.has(c)){if(r)return!1;if(!V(e,t,c))return!1;null===i&&(i=new Set),i.add(c)}}if(null!==i){for(var l=s(t),f=0;f<l.length;f++){var p=l[f];if("object"===o(p)&&null!==p){if(!z(i,p,r,n))return!1}else if(!r&&!e.has(p)&&!z(i,p,r,n))return!1}return 0===i.size}return!0}(e,t,r,u))return!1}else if(c===B){if(!function(e,t,r,i){for(var s=null,u=a(e),c=0;c<u.length;c++){var l=n(u[c],2),f=l[0],p=l[1];if("object"===o(f)&&null!==f)null===s&&(s=new Set),s.add(f);else{var h=t.get(f);if(void 0===h&&!t.has(f)||!D(p,h,r,i)){if(r)return!1;if(!W(e,t,f,p,i))return!1;null===s&&(s=new Set),s.add(f)}}}if(null!==s){for(var d=a(t),y=0;y<d.length;y++){var g=n(d[y],2),v=(f=g[0],g[1]);if("object"===o(f)&&null!==f){if(!G(s,e,f,v,r,i))return!1}else if(!(r||e.has(f)&&D(e.get(f),v,!1,i)||G(s,e,f,v,!1,i)))return!1}return 0===s.size}return!0}(e,t,r,u))return!1}else if(c===F)for(;l<e.length;l++){if(!p(e,l)){if(p(t,l))return!1;for(var f=Object.keys(e);l<f.length;l++){var h=f[l];if(!p(t,h)||!D(e[h],t[h],r,u))return!1}return f.length===Object.keys(t).length}if(!p(t,l)||!D(e[l],t[l],r,u))return!1}for(l=0;l<i.length;l++){var d=i[l];if(!D(e[d],t[d],r,u))return!1}return!0}(e,t,r,l,i,u);return i.val1.delete(e),i.val2.delete(t),O}function z(e,t,r,n){for(var o=s(e),i=0;i<o.length;i++){var a=o[i];if(D(t,a,r,n))return e.delete(a),!0}return!1}function $(e){switch(o(e)){case"undefined":return null;case"object":return;case"symbol":return!1;case"string":e=+e;case"number":if(l(e))return!1}return!0}function V(e,t,r){var n=$(r);return null!=n?n:t.has(n)&&!e.has(n)}function W(e,t,r,n,o){var i=$(r);if(null!=i)return i;var s=t.get(i);return!(void 0===s&&!t.has(i)||!D(n,s,!1,o))&&(!e.has(i)&&D(n,s,!1,o))}function G(e,t,r,n,o,i){for(var a=s(e),u=0;u<a.length;u++){var c=a[u];if(D(r,c,o,i)&&D(n,t.get(c),o,i))return e.delete(c),!0}return!1}e.exports={isDeepEqual:function(e,t){return D(e,t,N)},isDeepStrictEqual:function(e,t){return D(e,t,I)}}},8224:e=>{"use strict";e.exports=function(e){return e}},9669:(e,t,r)=>{e.exports=r(1609)},5448:(e,t,r)=>{"use strict";var n=r(4867),o=r(6026),i=r(4372),s=r(5327),a=r(4097),u=r(4109),c=r(7985),l=r(7874),f=r(2648),p=r(644),h=r(205);e.exports=function(e){return new Promise((function(t,r){var d,y=e.data,g=e.headers,v=e.responseType;function b(){e.cancelToken&&e.cancelToken.unsubscribe(d),e.signal&&e.signal.removeEventListener("abort",d)}n.isFormData(y)&&n.isStandardBrowserEnv()&&delete g["Content-Type"];var m=new XMLHttpRequest;if(e.auth){var w=e.auth.username||"",S=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";g.Authorization="Basic "+btoa(w+":"+S)}var O=a(e.baseURL,e.url);function _(){if(m){var n="getAllResponseHeaders"in m?u(m.getAllResponseHeaders()):null,i={data:v&&"text"!==v&&"json"!==v?m.response:m.responseText,status:m.status,statusText:m.statusText,headers:n,config:e,request:m};o((function(e){t(e),b()}),(function(e){r(e),b()}),i),m=null}}if(m.open(e.method.toUpperCase(),s(O,e.params,e.paramsSerializer),!0),m.timeout=e.timeout,"onloadend"in m?m.onloadend=_:m.onreadystatechange=function(){m&&4===m.readyState&&(0!==m.status||m.responseURL&&0===m.responseURL.indexOf("file:"))&&setTimeout(_)},m.onabort=function(){m&&(r(new f("Request aborted",f.ECONNABORTED,e,m)),m=null)},m.onerror=function(){r(new f("Network Error",f.ERR_NETWORK,e,m,m)),m=null},m.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",n=e.transitional||l;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),r(new f(t,n.clarifyTimeoutError?f.ETIMEDOUT:f.ECONNABORTED,e,m)),m=null},n.isStandardBrowserEnv()){var E=(e.withCredentials||c(O))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;E&&(g[e.xsrfHeaderName]=E)}"setRequestHeader"in m&&n.forEach(g,(function(e,t){void 0===y&&"content-type"===t.toLowerCase()?delete g[t]:m.setRequestHeader(t,e)})),n.isUndefined(e.withCredentials)||(m.withCredentials=!!e.withCredentials),v&&"json"!==v&&(m.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&m.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&m.upload&&m.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(d=function(e){m&&(r(!e||e&&e.type?new p:e),m.abort(),m=null)},e.cancelToken&&e.cancelToken.subscribe(d),e.signal&&(e.signal.aborted?d():e.signal.addEventListener("abort",d))),y||(y=null);var x=h(O);x&&-1===["http","https","file"].indexOf(x)?r(new f("Unsupported protocol "+x+":",f.ERR_BAD_REQUEST,e)):m.send(y)}))}},1609:(e,t,r)=>{"use strict";var n=r(4867),o=r(1849),i=r(321),s=r(7185);var a=function e(t){var r=new i(t),a=o(i.prototype.request,r);return n.extend(a,i.prototype,r),n.extend(a,r),a.create=function(r){return e(s(t,r))},a}(r(5546));a.Axios=i,a.CanceledError=r(644),a.CancelToken=r(4972),a.isCancel=r(6502),a.VERSION=r(7288).version,a.toFormData=r(7675),a.AxiosError=r(2648),a.Cancel=a.CanceledError,a.all=function(e){return Promise.all(e)},a.spread=r(8713),a.isAxiosError=r(6268),e.exports=a,e.exports.default=a},4972:(e,t,r)=>{"use strict";var n=r(644);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;this.promise.then((function(e){if(r._listeners){var t,n=r._listeners.length;for(t=0;t<n;t++)r._listeners[t](e);r._listeners=null}})),this.promise.then=function(e){var t,n=new Promise((function(e){r.subscribe(e),t=e})).then(e);return n.cancel=function(){r.unsubscribe(t)},n},e((function(e){r.reason||(r.reason=new n(e),t(r.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},o.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},644:(e,t,r)=>{"use strict";var n=r(2648);function o(e){n.call(this,null==e?"canceled":e,n.ERR_CANCELED),this.name="CanceledError"}r(4867).inherits(o,n,{__CANCEL__:!0}),e.exports=o},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,r)=>{"use strict";var n=r(4867),o=r(5327),i=r(782),s=r(3572),a=r(7185),u=r(4097),c=r(4875),l=c.validators;function f(e){this.defaults=e,this.interceptors={request:new i,response:new i}}f.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=a(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var r=t.transitional;void 0!==r&&c.assertOptions(r,{silentJSONParsing:l.transitional(l.boolean),forcedJSONParsing:l.transitional(l.boolean),clarifyTimeoutError:l.transitional(l.boolean)},!1);var n=[],o=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(o=o&&e.synchronous,n.unshift(e.fulfilled,e.rejected))}));var i,u=[];if(this.interceptors.response.forEach((function(e){u.push(e.fulfilled,e.rejected)})),!o){var f=[s,void 0];for(Array.prototype.unshift.apply(f,n),f=f.concat(u),i=Promise.resolve(t);f.length;)i=i.then(f.shift(),f.shift());return i}for(var p=t;n.length;){var h=n.shift(),d=n.shift();try{p=h(p)}catch(e){d(e);break}}try{i=s(p)}catch(e){return Promise.reject(e)}for(;u.length;)i=i.then(u.shift(),u.shift());return i},f.prototype.getUri=function(e){e=a(this.defaults,e);var t=u(e.baseURL,e.url);return o(t,e.params,e.paramsSerializer)},n.forEach(["delete","get","head","options"],(function(e){f.prototype[e]=function(t,r){return this.request(a(r||{},{method:e,url:t,data:(r||{}).data}))}})),n.forEach(["post","put","patch"],(function(e){function t(t){return function(r,n,o){return this.request(a(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:r,data:n}))}}f.prototype[e]=t(),f.prototype[e+"Form"]=t(!0)})),e.exports=f},2648:(e,t,r)=>{"use strict";var n=r(4867);function o(e,t,r,n,o){Error.call(this),this.message=e,this.name="AxiosError",t&&(this.code=t),r&&(this.config=r),n&&(this.request=n),o&&(this.response=o)}n.inherits(o,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var i=o.prototype,s={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach((function(e){s[e]={value:e}})),Object.defineProperties(o,s),Object.defineProperty(i,"isAxiosError",{value:!0}),o.from=function(e,t,r,s,a,u){var c=Object.create(i);return n.toFlatObject(e,c,(function(e){return e!==Error.prototype})),o.call(c,e.message,t,r,s,a),c.name=e.name,u&&Object.assign(c,u),c},e.exports=o},782:(e,t,r)=>{"use strict";var n=r(4867);function o(){this.handlers=[]}o.prototype.use=function(e,t,r){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){n.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},4097:(e,t,r)=>{"use strict";var n=r(1793),o=r(7303);e.exports=function(e,t){return e&&!n(t)?o(e,t):t}},3572:(e,t,r)=>{"use strict";var n=r(4867),o=r(8527),i=r(6502),s=r(5546),a=r(644);function u(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new a}e.exports=function(e){return u(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),n.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||s.adapter)(e).then((function(t){return u(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(u(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},7185:(e,t,r)=>{"use strict";var n=r(4867);e.exports=function(e,t){t=t||{};var r={};function o(e,t){return n.isPlainObject(e)&&n.isPlainObject(t)?n.merge(e,t):n.isPlainObject(t)?n.merge({},t):n.isArray(t)?t.slice():t}function i(r){return n.isUndefined(t[r])?n.isUndefined(e[r])?void 0:o(void 0,e[r]):o(e[r],t[r])}function s(e){if(!n.isUndefined(t[e]))return o(void 0,t[e])}function a(r){return n.isUndefined(t[r])?n.isUndefined(e[r])?void 0:o(void 0,e[r]):o(void 0,t[r])}function u(r){return r in t?o(e[r],t[r]):r in e?o(void 0,e[r]):void 0}var c={url:s,method:s,data:s,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:u};return n.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=c[e]||i,o=t(e);n.isUndefined(o)&&t!==u||(r[e]=o)})),r}},6026:(e,t,r)=>{"use strict";var n=r(2648);e.exports=function(e,t,r){var o=r.config.validateStatus;r.status&&o&&!o(r.status)?t(new n("Request failed with status code "+r.status,[n.ERR_BAD_REQUEST,n.ERR_BAD_RESPONSE][Math.floor(r.status/100)-4],r.config,r.request,r)):e(r)}},8527:(e,t,r)=>{"use strict";var n=r(4867),o=r(5546);e.exports=function(e,t,r){var i=this||o;return n.forEach(r,(function(r){e=r.call(i,e,t)})),e}},5546:(e,t,r)=>{"use strict";var n=r(4155),o=r(4867),i=r(6016),s=r(2648),a=r(7874),u=r(7675),c={"Content-Type":"application/x-www-form-urlencoded"};function l(e,t){!o.isUndefined(e)&&o.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var f,p={transitional:a,adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==n&&"[object process]"===Object.prototype.toString.call(n))&&(f=r(5448)),f),transformRequest:[function(e,t){if(i(t,"Accept"),i(t,"Content-Type"),o.isFormData(e)||o.isArrayBuffer(e)||o.isBuffer(e)||o.isStream(e)||o.isFile(e)||o.isBlob(e))return e;if(o.isArrayBufferView(e))return e.buffer;if(o.isURLSearchParams(e))return l(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString();var r,n=o.isObject(e),s=t&&t["Content-Type"];if((r=o.isFileList(e))||n&&"multipart/form-data"===s){var a=this.env&&this.env.FormData;return u(r?{"files[]":e}:e,a&&new a)}return n||"application/json"===s?(l(t,"application/json"),function(e,t,r){if(o.isString(e))try{return(t||JSON.parse)(e),o.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(r||JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||p.transitional,r=t&&t.silentJSONParsing,n=t&&t.forcedJSONParsing,i=!r&&"json"===this.responseType;if(i||n&&o.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(i){if("SyntaxError"===e.name)throw s.from(e,s.ERR_BAD_RESPONSE,this,null,this.response);throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:r(1623)},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};o.forEach(["delete","get","head"],(function(e){p.headers[e]={}})),o.forEach(["post","put","patch"],(function(e){p.headers[e]=o.merge(c)})),e.exports=p},7874:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},7288:e=>{e.exports={version:"0.27.2"}},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},5327:(e,t,r)=>{"use strict";var n=r(4867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var i;if(r)i=r(t);else if(n.isURLSearchParams(t))i=t.toString();else{var s=[];n.forEach(t,(function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,(function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),s.push(o(t)+"="+o(e))})))})),i=s.join("&")}if(i){var a=e.indexOf("#");-1!==a&&(e=e.slice(0,a)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,r)=>{"use strict";var n=r(4867);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,o,i,s){var a=[];a.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),n.isString(o)&&a.push("path="+o),n.isString(i)&&a.push("domain="+i),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},6268:(e,t,r)=>{"use strict";var n=r(4867);e.exports=function(e){return n.isObject(e)&&!0===e.isAxiosError}},7985:(e,t,r)=>{"use strict";var n=r(4867);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=o(window.location.href),function(t){var r=n.isString(t)?o(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},6016:(e,t,r)=>{"use strict";var n=r(4867);e.exports=function(e,t){n.forEach(e,(function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])}))}},1623:e=>{e.exports=null},4109:(e,t,r)=>{"use strict";var n=r(4867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,i,s={};return e?(n.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=n.trim(e.substr(0,i)).toLowerCase(),r=n.trim(e.substr(i+1)),t){if(s[t]&&o.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([r]):s[t]?s[t]+", "+r:r}})),s):s}},205:e=>{"use strict";e.exports=function(e){var t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},7675:(e,t,r)=>{"use strict";var n=r(8764).lW,o=r(4867);e.exports=function(e,t){t=t||new FormData;var r=[];function i(e){return null===e?"":o.isDate(e)?e.toISOString():o.isArrayBuffer(e)||o.isTypedArray(e)?"function"==typeof Blob?new Blob([e]):n.from(e):e}return function e(n,s){if(o.isPlainObject(n)||o.isArray(n)){if(-1!==r.indexOf(n))throw Error("Circular reference detected in "+s);r.push(n),o.forEach(n,(function(r,n){if(!o.isUndefined(r)){var a,u=s?s+"."+n:n;if(r&&!s&&"object"==typeof r)if(o.endsWith(n,"{}"))r=JSON.stringify(r);else if(o.endsWith(n,"[]")&&(a=o.toArray(r)))return void a.forEach((function(e){!o.isUndefined(e)&&t.append(u,i(e))}));e(r,u)}})),r.pop()}else t.append(s,i(n))}(e),t}},4875:(e,t,r)=>{"use strict";var n=r(5108),o=r(7288).version,i=r(2648),s={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){s[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}}));var a={};s.transitional=function(e,t,r){function s(e,t){return"[Axios v"+o+"] Transitional option '"+e+"'"+t+(r?". "+r:"")}return function(r,o,u){if(!1===e)throw new i(s(o," has been removed"+(t?" in "+t:"")),i.ERR_DEPRECATED);return t&&!a[o]&&(a[o]=!0,n.warn(s(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(r,o,u)}},e.exports={assertOptions:function(e,t,r){if("object"!=typeof e)throw new i("options must be an object",i.ERR_BAD_OPTION_VALUE);for(var n=Object.keys(e),o=n.length;o-- >0;){var s=n[o],a=t[s];if(a){var u=e[s],c=void 0===u||a(u,s,e);if(!0!==c)throw new i("option "+s+" must be "+c,i.ERR_BAD_OPTION_VALUE)}else if(!0!==r)throw new i("Unknown option "+s,i.ERR_BAD_OPTION)}},validators:s}},4867:(e,t,r)=>{"use strict";var n,o=r(1849),i=Object.prototype.toString,s=(n=Object.create(null),function(e){var t=i.call(e);return n[t]||(n[t]=t.slice(8,-1).toLowerCase())});function a(e){return e=e.toLowerCase(),function(t){return s(t)===e}}function u(e){return Array.isArray(e)}function c(e){return void 0===e}var l=a("ArrayBuffer");function f(e){return null!==e&&"object"==typeof e}function p(e){if("object"!==s(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}var h=a("Date"),d=a("File"),y=a("Blob"),g=a("FileList");function v(e){return"[object Function]"===i.call(e)}var b=a("URLSearchParams");function m(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),u(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}var w,S=(w="undefined"!=typeof Uint8Array&&Object.getPrototypeOf(Uint8Array),function(e){return w&&e instanceof w});e.exports={isArray:u,isArrayBuffer:l,isBuffer:function(e){return null!==e&&!c(e)&&null!==e.constructor&&!c(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){var t="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||i.call(e)===t||v(e.toString)&&e.toString()===t)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&l(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:f,isPlainObject:p,isUndefined:c,isDate:h,isFile:d,isBlob:y,isFunction:v,isStream:function(e){return f(e)&&v(e.pipe)},isURLSearchParams:b,isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:m,merge:function e(){var t={};function r(r,n){p(t[n])&&p(r)?t[n]=e(t[n],r):p(r)?t[n]=e({},r):u(r)?t[n]=r.slice():t[n]=r}for(var n=0,o=arguments.length;n<o;n++)m(arguments[n],r);return t},extend:function(e,t,r){return m(t,(function(t,n){e[n]=r&&"function"==typeof t?o(t,r):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e},inherits:function(e,t,r,n){e.prototype=Object.create(t.prototype,n),e.prototype.constructor=e,r&&Object.assign(e.prototype,r)},toFlatObject:function(e,t,r){var n,o,i,s={};t=t||{};do{for(o=(n=Object.getOwnPropertyNames(e)).length;o-- >0;)s[i=n[o]]||(t[i]=e[i],s[i]=!0);e=Object.getPrototypeOf(e)}while(e&&(!r||r(e,t))&&e!==Object.prototype);return t},kindOf:s,kindOfTest:a,endsWith:function(e,t,r){e=String(e),(void 0===r||r>e.length)&&(r=e.length),r-=t.length;var n=e.indexOf(t,r);return-1!==n&&n===r},toArray:function(e){if(!e)return null;var t=e.length;if(c(t))return null;for(var r=new Array(t);t-- >0;)r[t]=e[t];return r},isTypedArray:S,isFileList:g}},9742:(e,t)=>{"use strict";t.byteLength=function(e){var t=u(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,i=u(e),s=i[0],a=i[1],c=new o(function(e,t,r){return 3*(t+r)/4-r}(0,s,a)),l=0,f=a>0?s-4:s;for(r=0;r<f;r+=4)t=n[e.charCodeAt(r)]<<18|n[e.charCodeAt(r+1)]<<12|n[e.charCodeAt(r+2)]<<6|n[e.charCodeAt(r+3)],c[l++]=t>>16&255,c[l++]=t>>8&255,c[l++]=255&t;2===a&&(t=n[e.charCodeAt(r)]<<2|n[e.charCodeAt(r+1)]>>4,c[l++]=255&t);1===a&&(t=n[e.charCodeAt(r)]<<10|n[e.charCodeAt(r+1)]<<4|n[e.charCodeAt(r+2)]>>2,c[l++]=t>>8&255,c[l++]=255&t);return c},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,i=[],s=16383,a=0,u=n-o;a<u;a+=s)i.push(c(e,a,a+s>u?u:a+s));1===o?(t=e[n-1],i.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],i.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return i.join("")};for(var r=[],n=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,a=i.length;s<a;++s)r[s]=i[s],n[i.charCodeAt(s)]=s;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function c(e,t,n){for(var o,i,s=[],a=t;a<n;a+=3)o=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return s.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},8764:(e,t,r)=>{"use strict";var n=r(5108);const o=r(9742),i=r(645),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.lW=c,t.h2=50;const a=2147483647;function u(e){if(e>a)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,c.prototype),t}function c(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return p(e)}return l(e,t,r)}function l(e,t,r){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!c.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|g(e,t);let n=u(r);const o=n.write(e,t);o!==r&&(n=n.slice(0,o));return n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(Z(e,Uint8Array)){const t=new Uint8Array(e);return d(t.buffer,t.byteOffset,t.byteLength)}return h(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(Z(e,ArrayBuffer)||e&&Z(e.buffer,ArrayBuffer))return d(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(Z(e,SharedArrayBuffer)||e&&Z(e.buffer,SharedArrayBuffer)))return d(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return c.from(n,t,r);const o=function(e){if(c.isBuffer(e)){const t=0|y(e.length),r=u(t);return 0===r.length||e.copy(r,0,0,t),r}if(void 0!==e.length)return"number"!=typeof e.length||K(e.length)?u(0):h(e);if("Buffer"===e.type&&Array.isArray(e.data))return h(e.data)}(e);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return c.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function f(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function p(e){return f(e),u(e<0?0:0|y(e))}function h(e){const t=e.length<0?0:0|y(e.length),r=u(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function d(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,c.prototype),n}function y(e){if(e>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|e}function g(e,t){if(c.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||Z(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let o=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return G(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return H(e).length;default:if(o)return n?-1:G(e).length;t=(""+t).toLowerCase(),o=!0}}function v(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return k(this,t,r);case"utf8":case"utf-8":return A(this,t,r);case"ascii":return P(this,t,r);case"latin1":case"binary":return T(this,t,r);case"base64":return j(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function b(e,t,r){const n=e[t];e[t]=e[r],e[r]=n}function m(e,t,r,n,o){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),K(r=+r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof t&&(t=c.from(t,n)),c.isBuffer(t))return 0===t.length?-1:w(e,t,r,n,o);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):w(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function w(e,t,r,n,o){let i,s=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;s=2,a/=2,u/=2,r/=2}function c(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(o){let n=-1;for(i=r;i<a;i++)if(c(e,i)===c(t,-1===n?0:i-n)){if(-1===n&&(n=i),i-n+1===u)return n*s}else-1!==n&&(i-=i-n),n=-1}else for(r+u>a&&(r=a-u),i=r;i>=0;i--){let r=!0;for(let n=0;n<u;n++)if(c(e,i+n)!==c(t,n)){r=!1;break}if(r)return i}return-1}function S(e,t,r,n){r=Number(r)||0;const o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;const i=t.length;let s;for(n>i/2&&(n=i/2),s=0;s<n;++s){const n=parseInt(t.substr(2*s,2),16);if(K(n))return s;e[r+s]=n}return s}function O(e,t,r,n){return Y(G(t,e.length-r),e,r,n)}function _(e,t,r,n){return Y(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function E(e,t,r,n){return Y(H(t),e,r,n)}function x(e,t,r,n){return Y(function(e,t){let r,n,o;const i=[];for(let s=0;s<e.length&&!((t-=2)<0);++s)r=e.charCodeAt(s),n=r>>8,o=r%256,i.push(o),i.push(n);return i}(t,e.length-r),e,r,n)}function j(e,t,r){return 0===t&&r===e.length?o.fromByteArray(e):o.fromByteArray(e.slice(t,r))}function A(e,t,r){r=Math.min(e.length,r);const n=[];let o=t;for(;o<r;){const t=e[o];let i=null,s=t>239?4:t>223?3:t>191?2:1;if(o+s<=r){let r,n,a,u;switch(s){case 1:t<128&&(i=t);break;case 2:r=e[o+1],128==(192&r)&&(u=(31&t)<<6|63&r,u>127&&(i=u));break;case 3:r=e[o+1],n=e[o+2],128==(192&r)&&128==(192&n)&&(u=(15&t)<<12|(63&r)<<6|63&n,u>2047&&(u<55296||u>57343)&&(i=u));break;case 4:r=e[o+1],n=e[o+2],a=e[o+3],128==(192&r)&&128==(192&n)&&128==(192&a)&&(u=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&a,u>65535&&u<1114112&&(i=u))}}null===i?(i=65533,s=1):i>65535&&(i-=65536,n.push(i>>>10&1023|55296),i=56320|1023&i),n.push(i),o+=s}return function(e){const t=e.length;if(t<=C)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=C));return r}(n)}c.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),c.TYPED_ARRAY_SUPPORT||void 0===n||"function"!=typeof n.error||n.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),c.poolSize=8192,c.from=function(e,t,r){return l(e,t,r)},Object.setPrototypeOf(c.prototype,Uint8Array.prototype),Object.setPrototypeOf(c,Uint8Array),c.alloc=function(e,t,r){return function(e,t,r){return f(e),e<=0?u(e):void 0!==t?"string"==typeof r?u(e).fill(t,r):u(e).fill(t):u(e)}(e,t,r)},c.allocUnsafe=function(e){return p(e)},c.allocUnsafeSlow=function(e){return p(e)},c.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==c.prototype},c.compare=function(e,t){if(Z(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),Z(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let o=0,i=Math.min(r,n);o<i;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const n=c.allocUnsafe(t);let o=0;for(r=0;r<e.length;++r){let t=e[r];if(Z(t,Uint8Array))o+t.length>n.length?(c.isBuffer(t)||(t=c.from(t)),t.copy(n,o)):Uint8Array.prototype.set.call(n,t,o);else{if(!c.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(n,o)}o+=t.length}return n},c.byteLength=g,c.prototype._isBuffer=!0,c.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)b(this,t,t+1);return this},c.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)b(this,t,t+3),b(this,t+1,t+2);return this},c.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)b(this,t,t+7),b(this,t+1,t+6),b(this,t+2,t+5),b(this,t+3,t+4);return this},c.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?A(this,0,e):v.apply(this,arguments)},c.prototype.toLocaleString=c.prototype.toString,c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){let e="";const r=t.h2;return e=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(e+=" ... "),"<Buffer "+e+">"},s&&(c.prototype[s]=c.prototype.inspect),c.prototype.compare=function(e,t,r,n,o){if(Z(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),!c.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return-1;if(t>=r)return 1;if(this===e)return 0;let i=(o>>>=0)-(n>>>=0),s=(r>>>=0)-(t>>>=0);const a=Math.min(i,s),u=this.slice(n,o),l=e.slice(t,r);for(let e=0;e<a;++e)if(u[e]!==l[e]){i=u[e],s=l[e];break}return i<s?-1:s<i?1:0},c.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},c.prototype.indexOf=function(e,t,r){return m(this,e,t,r,!0)},c.prototype.lastIndexOf=function(e,t,r){return m(this,e,t,r,!1)},c.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let i=!1;for(;;)switch(n){case"hex":return S(this,e,t,r);case"utf8":case"utf-8":return O(this,e,t,r);case"ascii":case"latin1":case"binary":return _(this,e,t,r);case"base64":return E(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const C=4096;function P(e,t,r){let n="";r=Math.min(e.length,r);for(let o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function T(e,t,r){let n="";r=Math.min(e.length,r);for(let o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function k(e,t,r){const n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let o="";for(let n=t;n<r;++n)o+=X[e[n]];return o}function R(e,t,r){const n=e.slice(t,r);let o="";for(let e=0;e<n.length-1;e+=2)o+=String.fromCharCode(n[e]+256*n[e+1]);return o}function U(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function I(e,t,r,n,o,i){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function N(e,t,r,n,o){z(t,n,o,e,r,7);let i=Number(t&BigInt(4294967295));e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,r}function L(e,t,r,n,o){z(t,n,o,e,r,7);let i=Number(t&BigInt(4294967295));e[r+7]=i,i>>=8,e[r+6]=i,i>>=8,e[r+5]=i,i>>=8,e[r+4]=i;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=s,s>>=8,e[r+2]=s,s>>=8,e[r+1]=s,s>>=8,e[r]=s,r+8}function F(e,t,r,n,o,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function M(e,t,r,n,o){return t=+t,r>>>=0,o||F(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function B(e,t,r,n,o){return t=+t,r>>>=0,o||F(e,0,r,8),i.write(e,t,r,n,52,8),r+8}c.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const n=this.subarray(e,t);return Object.setPrototypeOf(n,c.prototype),n},c.prototype.readUintLE=c.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||U(e,t,this.length);let n=this[e],o=1,i=0;for(;++i<t&&(o*=256);)n+=this[e+i]*o;return n},c.prototype.readUintBE=c.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||U(e,t,this.length);let n=this[e+--t],o=1;for(;t>0&&(o*=256);)n+=this[e+--t]*o;return n},c.prototype.readUint8=c.prototype.readUInt8=function(e,t){return e>>>=0,t||U(e,1,this.length),this[e]},c.prototype.readUint16LE=c.prototype.readUInt16LE=function(e,t){return e>>>=0,t||U(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUint16BE=c.prototype.readUInt16BE=function(e,t){return e>>>=0,t||U(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUint32LE=c.prototype.readUInt32LE=function(e,t){return e>>>=0,t||U(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUint32BE=c.prototype.readUInt32BE=function(e,t){return e>>>=0,t||U(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readBigUInt64LE=Q((function(e){$(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||V(e,this.length-8);const n=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,o=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(n)+(BigInt(o)<<BigInt(32))})),c.prototype.readBigUInt64BE=Q((function(e){$(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||V(e,this.length-8);const n=t*2**24+65536*this[++e]+256*this[++e]+this[++e],o=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(o)})),c.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||U(e,t,this.length);let n=this[e],o=1,i=0;for(;++i<t&&(o*=256);)n+=this[e+i]*o;return o*=128,n>=o&&(n-=Math.pow(2,8*t)),n},c.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||U(e,t,this.length);let n=t,o=1,i=this[e+--n];for(;n>0&&(o*=256);)i+=this[e+--n]*o;return o*=128,i>=o&&(i-=Math.pow(2,8*t)),i},c.prototype.readInt8=function(e,t){return e>>>=0,t||U(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){e>>>=0,t||U(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt16BE=function(e,t){e>>>=0,t||U(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt32LE=function(e,t){return e>>>=0,t||U(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return e>>>=0,t||U(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readBigInt64LE=Q((function(e){$(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||V(e,this.length-8);const n=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),c.prototype.readBigInt64BE=Q((function(e){$(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||V(e,this.length-8);const n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),c.prototype.readFloatLE=function(e,t){return e>>>=0,t||U(e,4,this.length),i.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return e>>>=0,t||U(e,4,this.length),i.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return e>>>=0,t||U(e,8,this.length),i.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return e>>>=0,t||U(e,8,this.length),i.read(this,e,!1,52,8)},c.prototype.writeUintLE=c.prototype.writeUIntLE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){I(this,e,t,r,Math.pow(2,8*r)-1,0)}let o=1,i=0;for(this[t]=255&e;++i<r&&(o*=256);)this[t+i]=e/o&255;return t+r},c.prototype.writeUintBE=c.prototype.writeUIntBE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){I(this,e,t,r,Math.pow(2,8*r)-1,0)}let o=r-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+r},c.prototype.writeUint8=c.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,1,255,0),this[t]=255&e,t+1},c.prototype.writeUint16LE=c.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeUint16BE=c.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeUint32LE=c.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},c.prototype.writeUint32BE=c.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigUInt64LE=Q((function(e,t=0){return N(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeBigUInt64BE=Q((function(e,t=0){return L(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);I(this,e,t,r,n-1,-n)}let o=0,i=1,s=0;for(this[t]=255&e;++o<r&&(i*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/i>>0)-s&255;return t+r},c.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);I(this,e,t,r,n-1,-n)}let o=r-1,i=1,s=0;for(this[t+o]=255&e;--o>=0&&(i*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/i>>0)-s&255;return t+r},c.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},c.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigInt64LE=Q((function(e,t=0){return N(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeBigInt64BE=Q((function(e,t=0){return L(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeFloatLE=function(e,t,r){return M(this,e,t,!0,r)},c.prototype.writeFloatBE=function(e,t,r){return M(this,e,t,!1,r)},c.prototype.writeDoubleLE=function(e,t,r){return B(this,e,t,!0,r)},c.prototype.writeDoubleBE=function(e,t,r){return B(this,e,t,!1,r)},c.prototype.copy=function(e,t,r,n){if(!c.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);const o=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),o},c.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){const t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;let o;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(o=t;o<r;++o)this[o]=e;else{const i=c.isBuffer(e)?e:c.from(e,n),s=i.length;if(0===s)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(o=0;o<r-t;++o)this[o+t]=i[o%s]}return this};const D={};function q(e,t,r){D[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function J(e){let t="",r=e.length;const n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function z(e,t,r,n,o,i){if(e>r||e<t){const n="bigint"==typeof t?"n":"";let o;throw o=i>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(i+1)}${n}`:`>= -(2${n} ** ${8*(i+1)-1}${n}) and < 2 ** ${8*(i+1)-1}${n}`:`>= ${t}${n} and <= ${r}${n}`,new D.ERR_OUT_OF_RANGE("value",o,e)}!function(e,t,r){$(t,"offset"),void 0!==e[t]&&void 0!==e[t+r]||V(t,e.length-(r+1))}(n,o,i)}function $(e,t){if("number"!=typeof e)throw new D.ERR_INVALID_ARG_TYPE(t,"number",e)}function V(e,t,r){if(Math.floor(e)!==e)throw $(e,r),new D.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new D.ERR_BUFFER_OUT_OF_BOUNDS;throw new D.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}q("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),q("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),q("ERR_OUT_OF_RANGE",(function(e,t,r){let n=`The value of "${e}" is out of range.`,o=r;return Number.isInteger(r)&&Math.abs(r)>2**32?o=J(String(r)):"bigint"==typeof r&&(o=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(o=J(o)),o+="n"),n+=` It must be ${t}. Received ${o}`,n}),RangeError);const W=/[^+/0-9A-Za-z-_]/g;function G(e,t){let r;t=t||1/0;const n=e.length;let o=null;const i=[];for(let s=0;s<n;++s){if(r=e.charCodeAt(s),r>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function H(e){return o.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(W,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Y(e,t,r,n){let o;for(o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}function Z(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function K(e){return e!=e}const X=function(){const e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let o=0;o<16;++o)t[n+o]=e[r]+e[o]}return t}();function Q(e){return"undefined"==typeof BigInt?ee:e}function ee(){throw new Error("BigInt not supported")}},1924:(e,t,r)=>{"use strict";var n=r(210),o=r(5559),i=o(n("String.prototype.indexOf"));e.exports=function(e,t){var r=n(e,!!t);return"function"==typeof r&&i(e,".prototype.")>-1?o(r):r}},5559:(e,t,r)=>{"use strict";var n=r(8612),o=r(210),i=o("%Function.prototype.apply%"),s=o("%Function.prototype.call%"),a=o("%Reflect.apply%",!0)||n.call(s,i),u=o("%Object.getOwnPropertyDescriptor%",!0),c=o("%Object.defineProperty%",!0),l=o("%Math.max%");if(c)try{c({},"a",{value:1})}catch(e){c=null}e.exports=function(e){var t=a(n,s,arguments);u&&c&&(u(t,"length").configurable&&c(t,"length",{value:1+l(0,e.length-(arguments.length-1))}));return t};var f=function(){return a(n,i,arguments)};c?c(e.exports,"apply",{value:f}):e.exports.apply=f},5108:(e,t,r)=>{var n=r(9539),o=r(9282);function i(){return(new Date).getTime()}var s,a=Array.prototype.slice,u={};s=void 0!==r.g&&r.g.console?r.g.console:"undefined"!=typeof window&&window.console?window.console:{};for(var c=[[function(){},"log"],[function(){s.log.apply(s,arguments)},"info"],[function(){s.log.apply(s,arguments)},"warn"],[function(){s.warn.apply(s,arguments)},"error"],[function(e){u[e]=i()},"time"],[function(e){var t=u[e];if(!t)throw new Error("No such label: "+e);delete u[e];var r=i()-t;s.log(e+": "+r+"ms")},"timeEnd"],[function(){var e=new Error;e.name="Trace",e.message=n.format.apply(null,arguments),s.error(e.stack)},"trace"],[function(e){s.log(n.inspect(e)+"\n")},"dir"],[function(e){if(!e){var t=a.call(arguments,1);o.ok(!1,n.format.apply(null,t))}},"assert"]],l=0;l<c.length;l++){var f=c[l],p=f[0],h=f[1];s[h]||(s[h]=p)}e.exports=s},4289:(e,t,r)=>{"use strict";var n=r(2215),o="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),i=Object.prototype.toString,s=Array.prototype.concat,a=Object.defineProperty,u=r(1044)(),c=a&&u,l=function(e,t,r,n){if(t in e)if(!0===n){if(e[t]===r)return}else if("function"!=typeof(o=n)||"[object Function]"!==i.call(o)||!n())return;var o;c?a(e,t,{configurable:!0,enumerable:!1,value:r,writable:!0}):e[t]=r},f=function(e,t){var r=arguments.length>2?arguments[2]:{},i=n(t);o&&(i=s.call(i,Object.getOwnPropertySymbols(t)));for(var a=0;a<i.length;a+=1)l(e,i[a],t[i[a]],r[i[a]])};f.supportsDescriptors=!!c,e.exports=f},8091:e=>{"use strict";function t(e,t){if(null==e)throw new TypeError("Cannot convert first argument to object");for(var r=Object(e),n=1;n<arguments.length;n++){var o=arguments[n];if(null!=o)for(var i=Object.keys(Object(o)),s=0,a=i.length;s<a;s++){var u=i[s],c=Object.getOwnPropertyDescriptor(o,u);void 0!==c&&c.enumerable&&(r[u]=o[u])}}return r}e.exports={assign:t,polyfill:function(){Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:t})}}},4029:(e,t,r)=>{"use strict";var n=r(5320),o=Object.prototype.toString,i=Object.prototype.hasOwnProperty,s=function(e,t,r){for(var n=0,o=e.length;n<o;n++)i.call(e,n)&&(null==r?t(e[n],n,e):t.call(r,e[n],n,e))},a=function(e,t,r){for(var n=0,o=e.length;n<o;n++)null==r?t(e.charAt(n),n,e):t.call(r,e.charAt(n),n,e)},u=function(e,t,r){for(var n in e)i.call(e,n)&&(null==r?t(e[n],n,e):t.call(r,e[n],n,e))};e.exports=function(e,t,r){if(!n(t))throw new TypeError("iterator must be a function");var i;arguments.length>=3&&(i=r),"[object Array]"===o.call(e)?s(e,t,i):"string"==typeof e?a(e,t,i):u(e,t,i)}},6230:e=>{e.exports="object"==typeof self?self.FormData:window.FormData},7648:e=>{"use strict";var t="Function.prototype.bind called on incompatible ",r=Array.prototype.slice,n=Object.prototype.toString,o="[object Function]";e.exports=function(e){var i=this;if("function"!=typeof i||n.call(i)!==o)throw new TypeError(t+i);for(var s,a=r.call(arguments,1),u=Math.max(0,i.length-a.length),c=[],l=0;l<u;l++)c.push("$"+l);if(s=Function("binder","return function ("+c.join(",")+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof s){var t=i.apply(this,a.concat(r.call(arguments)));return Object(t)===t?t:this}return i.apply(e,a.concat(r.call(arguments)))})),i.prototype){var f=function(){};f.prototype=i.prototype,s.prototype=new f,f.prototype=null}return s}},8612:(e,t,r)=>{"use strict";var n=r(7648);e.exports=Function.prototype.bind||n},210:(e,t,r)=>{"use strict";var n,o=SyntaxError,i=Function,s=TypeError,a=function(e){try{return i('"use strict"; return ('+e+").constructor;")()}catch(e){}},u=Object.getOwnPropertyDescriptor;if(u)try{u({},"")}catch(e){u=null}var c=function(){throw new s},l=u?function(){try{return c}catch(e){try{return u(arguments,"callee").get}catch(e){return c}}}():c,f=r(1405)(),p=Object.getPrototypeOf||function(e){return e.__proto__},h={},d="undefined"==typeof Uint8Array?n:p(Uint8Array),y={"%AggregateError%":"undefined"==typeof AggregateError?n:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?n:ArrayBuffer,"%ArrayIteratorPrototype%":f?p([][Symbol.iterator]()):n,"%AsyncFromSyncIteratorPrototype%":n,"%AsyncFunction%":h,"%AsyncGenerator%":h,"%AsyncGeneratorFunction%":h,"%AsyncIteratorPrototype%":h,"%Atomics%":"undefined"==typeof Atomics?n:Atomics,"%BigInt%":"undefined"==typeof BigInt?n:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?n:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?n:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?n:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?n:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?n:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?n:FinalizationRegistry,"%Function%":i,"%GeneratorFunction%":h,"%Int8Array%":"undefined"==typeof Int8Array?n:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?n:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?n:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":f?p(p([][Symbol.iterator]())):n,"%JSON%":"object"==typeof JSON?JSON:n,"%Map%":"undefined"==typeof Map?n:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&f?p((new Map)[Symbol.iterator]()):n,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?n:Promise,"%Proxy%":"undefined"==typeof Proxy?n:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?n:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?n:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&f?p((new Set)[Symbol.iterator]()):n,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?n:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":f?p(""[Symbol.iterator]()):n,"%Symbol%":f?Symbol:n,"%SyntaxError%":o,"%ThrowTypeError%":l,"%TypedArray%":d,"%TypeError%":s,"%Uint8Array%":"undefined"==typeof Uint8Array?n:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?n:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?n:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?n:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?n:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?n:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?n:WeakSet};try{null.error}catch(e){var g=p(p(e));y["%Error.prototype%"]=g}var v=function e(t){var r;if("%AsyncFunction%"===t)r=a("async function () {}");else if("%GeneratorFunction%"===t)r=a("function* () {}");else if("%AsyncGeneratorFunction%"===t)r=a("async function* () {}");else if("%AsyncGenerator%"===t){var n=e("%AsyncGeneratorFunction%");n&&(r=n.prototype)}else if("%AsyncIteratorPrototype%"===t){var o=e("%AsyncGenerator%");o&&(r=p(o.prototype))}return y[t]=r,r},b={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},m=r(8612),w=r(7642),S=m.call(Function.call,Array.prototype.concat),O=m.call(Function.apply,Array.prototype.splice),_=m.call(Function.call,String.prototype.replace),E=m.call(Function.call,String.prototype.slice),x=m.call(Function.call,RegExp.prototype.exec),j=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,A=/\\(\\)?/g,C=function(e){var t=E(e,0,1),r=E(e,-1);if("%"===t&&"%"!==r)throw new o("invalid intrinsic syntax, expected closing `%`");if("%"===r&&"%"!==t)throw new o("invalid intrinsic syntax, expected opening `%`");var n=[];return _(e,j,(function(e,t,r,o){n[n.length]=r?_(o,A,"$1"):t||e})),n},P=function(e,t){var r,n=e;if(w(b,n)&&(n="%"+(r=b[n])[0]+"%"),w(y,n)){var i=y[n];if(i===h&&(i=v(n)),void 0===i&&!t)throw new s("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:r,name:n,value:i}}throw new o("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new s("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new s('"allowMissing" argument must be a boolean');if(null===x(/^%?[^%]*%?$/,e))throw new o("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var r=C(e),n=r.length>0?r[0]:"",i=P("%"+n+"%",t),a=i.name,c=i.value,l=!1,f=i.alias;f&&(n=f[0],O(r,S([0,1],f)));for(var p=1,h=!0;p<r.length;p+=1){var d=r[p],g=E(d,0,1),v=E(d,-1);if(('"'===g||"'"===g||"`"===g||'"'===v||"'"===v||"`"===v)&&g!==v)throw new o("property names with quotes must have matching quotes");if("constructor"!==d&&h||(l=!0),w(y,a="%"+(n+="."+d)+"%"))c=y[a];else if(null!=c){if(!(d in c)){if(!t)throw new s("base intrinsic for "+e+" exists, but the property is not available.");return}if(u&&p+1>=r.length){var b=u(c,d);c=(h=!!b)&&"get"in b&&!("originalValue"in b.get)?b.get:c[d]}else h=w(c,d),c=c[d];h&&!l&&(y[a]=c)}}return c}},7296:(e,t,r)=>{"use strict";var n=r(210)("%Object.getOwnPropertyDescriptor%",!0);if(n)try{n([],"length")}catch(e){n=null}e.exports=n},1044:(e,t,r)=>{"use strict";var n=r(210)("%Object.defineProperty%",!0),o=function(){if(n)try{return n({},"a",{value:1}),!0}catch(e){return!1}return!1};o.hasArrayLengthDefineBug=function(){if(!o())return null;try{return 1!==n([],"length",{value:1}).length}catch(e){return!0}},e.exports=o},1405:(e,t,r)=>{"use strict";var n="undefined"!=typeof Symbol&&Symbol,o=r(5419);e.exports=function(){return"function"==typeof n&&("function"==typeof Symbol&&("symbol"==typeof n("foo")&&("symbol"==typeof Symbol("bar")&&o())))}},5419:e=>{"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),r=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var n=Object.getOwnPropertySymbols(e);if(1!==n.length||n[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(e,t);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},6410:(e,t,r)=>{"use strict";var n=r(5419);e.exports=function(){return n()&&!!Symbol.toStringTag}},7642:(e,t,r)=>{"use strict";var n=r(8612);e.exports=n.call(Function.call,Object.prototype.hasOwnProperty)},645:(e,t)=>{t.read=function(e,t,r,n,o){var i,s,a=8*o-n-1,u=(1<<a)-1,c=u>>1,l=-7,f=r?o-1:0,p=r?-1:1,h=e[t+f];for(f+=p,i=h&(1<<-l)-1,h>>=-l,l+=a;l>0;i=256*i+e[t+f],f+=p,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=n;l>0;s=256*s+e[t+f],f+=p,l-=8);if(0===i)i=1-c;else{if(i===u)return s?NaN:1/0*(h?-1:1);s+=Math.pow(2,n),i-=c}return(h?-1:1)*s*Math.pow(2,i-n)},t.write=function(e,t,r,n,o,i){var s,a,u,c=8*i-o-1,l=(1<<c)-1,f=l>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=n?0:i-1,d=n?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+f>=1?p/u:p*Math.pow(2,1-f))*u>=2&&(s++,u/=2),s+f>=l?(a=0,s=l):s+f>=1?(a=(t*u-1)*Math.pow(2,o),s+=f):(a=t*Math.pow(2,f-1)*Math.pow(2,o),s=0));o>=8;e[r+h]=255&a,h+=d,a/=256,o-=8);for(s=s<<o|a,c+=o;c>0;e[r+h]=255&s,h+=d,s/=256,c-=8);e[r+h-d]|=128*y}},5717:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},2584:(e,t,r)=>{"use strict";var n=r(6410)(),o=r(1924)("Object.prototype.toString"),i=function(e){return!(n&&e&&"object"==typeof e&&Symbol.toStringTag in e)&&"[object Arguments]"===o(e)},s=function(e){return!!i(e)||null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Array]"!==o(e)&&"[object Function]"===o(e.callee)},a=function(){return i(arguments)}();i.isLegacyArguments=s,e.exports=a?i:s},5320:e=>{"use strict";var t,r,n=Function.prototype.toString,o="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof o&&"function"==typeof Object.defineProperty)try{t=Object.defineProperty({},"length",{get:function(){throw r}}),r={},o((function(){throw 42}),null,t)}catch(e){e!==r&&(o=null)}else o=null;var i=/^\s*class\b/,s=function(e){try{var t=n.call(e);return i.test(t)}catch(e){return!1}},a=function(e){try{return!s(e)&&(n.call(e),!0)}catch(e){return!1}},u=Object.prototype.toString,c="function"==typeof Symbol&&!!Symbol.toStringTag,l=!(0 in[,]),f=function(){return!1};if("object"==typeof document){var p=document.all;u.call(p)===u.call(document.all)&&(f=function(e){if((l||!e)&&(void 0===e||"object"==typeof e))try{var t=u.call(e);return("[object HTMLAllCollection]"===t||"[object HTML document.all class]"===t||"[object HTMLCollection]"===t||"[object Object]"===t)&&null==e("")}catch(e){}return!1})}e.exports=o?function(e){if(f(e))return!0;if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;try{o(e,null,t)}catch(e){if(e!==r)return!1}return!s(e)&&a(e)}:function(e){if(f(e))return!0;if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;if(c)return a(e);if(s(e))return!1;var t=u.call(e);return!("[object Function]"!==t&&"[object GeneratorFunction]"!==t&&!/^\[object HTML/.test(t))&&a(e)}},8662:(e,t,r)=>{"use strict";var n,o=Object.prototype.toString,i=Function.prototype.toString,s=/^\s*(?:function)?\*/,a=r(6410)(),u=Object.getPrototypeOf;e.exports=function(e){if("function"!=typeof e)return!1;if(s.test(i.call(e)))return!0;if(!a)return"[object GeneratorFunction]"===o.call(e);if(!u)return!1;if(void 0===n){var t=function(){if(!a)return!1;try{return Function("return function*() {}")()}catch(e){}}();n=!!t&&u(t)}return u(e)===n}},8611:e=>{"use strict";e.exports=function(e){return e!=e}},360:(e,t,r)=>{"use strict";var n=r(5559),o=r(4289),i=r(8611),s=r(9415),a=r(3194),u=n(s(),Number);o(u,{getPolyfill:s,implementation:i,shim:a}),e.exports=u},9415:(e,t,r)=>{"use strict";var n=r(8611);e.exports=function(){return Number.isNaN&&Number.isNaN(NaN)&&!Number.isNaN("a")?Number.isNaN:n}},3194:(e,t,r)=>{"use strict";var n=r(4289),o=r(9415);e.exports=function(){var e=o();return n(Number,{isNaN:e},{isNaN:function(){return Number.isNaN!==e}}),e}},5692:(e,t,r)=>{"use strict";var n=r(4029),o=r(3083),i=r(1924),s=i("Object.prototype.toString"),a=r(6410)(),u=r(7296),c="undefined"==typeof globalThis?r.g:globalThis,l=o(),f=i("Array.prototype.indexOf",!0)||function(e,t){for(var r=0;r<e.length;r+=1)if(e[r]===t)return r;return-1},p=i("String.prototype.slice"),h={},d=Object.getPrototypeOf;a&&u&&d&&n(l,(function(e){var t=new c[e];if(Symbol.toStringTag in t){var r=d(t),n=u(r,Symbol.toStringTag);if(!n){var o=d(r);n=u(o,Symbol.toStringTag)}h[e]=n.get}}));e.exports=function(e){if(!e||"object"!=typeof e)return!1;if(!a||!(Symbol.toStringTag in e)){var t=p(s(e),8,-1);return f(l,t)>-1}return!!u&&function(e){var t=!1;return n(h,(function(r,n){if(!t)try{t=r.call(e)===n}catch(e){}})),t}(e)}},6245:(e,t,r)=>{"use strict";function n(e){this.message=e}r.r(t),r.d(t,{InvalidTokenError:()=>s,default:()=>a}),n.prototype=new Error,n.prototype.name="InvalidCharacterError";var o="undefined"!=typeof window&&window.atob&&window.atob.bind(window)||function(e){var t=String(e).replace(/=+$/,"");if(t.length%4==1)throw new n("'atob' failed: The string to be decoded is not correctly encoded.");for(var r,o,i=0,s=0,a="";o=t.charAt(s++);~o&&(r=i%4?64*r+o:o,i++%4)?a+=String.fromCharCode(255&r>>(-2*i&6)):0)o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(o);return a};function i(e){var t=e.replace(/-/g,"+").replace(/_/g,"/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw"Illegal base64url string!"}try{return function(e){return decodeURIComponent(o(e).replace(/(.)/g,(function(e,t){var r=t.charCodeAt(0).toString(16).toUpperCase();return r.length<2&&(r="0"+r),"%"+r})))}(t)}catch(e){return o(t)}}function s(e){this.message=e}s.prototype=new Error,s.prototype.name="InvalidTokenError";const a=function(e,t){if("string"!=typeof e)throw new s("Invalid token specified");var r=!0===(t=t||{}).header?0:1;try{return JSON.parse(i(e.split(".")[r]))}catch(e){throw new s("Invalid token specified: "+e.message)}}},4244:e=>{"use strict";var t=function(e){return e!=e};e.exports=function(e,r){return 0===e&&0===r?1/e==1/r:e===r||!(!t(e)||!t(r))}},609:(e,t,r)=>{"use strict";var n=r(4289),o=r(5559),i=r(4244),s=r(5624),a=r(2281),u=o(s(),Object);n(u,{getPolyfill:s,implementation:i,shim:a}),e.exports=u},5624:(e,t,r)=>{"use strict";var n=r(4244);e.exports=function(){return"function"==typeof Object.is?Object.is:n}},2281:(e,t,r)=>{"use strict";var n=r(5624),o=r(4289);e.exports=function(){var e=n();return o(Object,{is:e},{is:function(){return Object.is!==e}}),e}},8987:(e,t,r)=>{"use strict";var n;if(!Object.keys){var o=Object.prototype.hasOwnProperty,i=Object.prototype.toString,s=r(1414),a=Object.prototype.propertyIsEnumerable,u=!a.call({toString:null},"toString"),c=a.call((function(){}),"prototype"),l=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],f=function(e){var t=e.constructor;return t&&t.prototype===e},p={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},h=function(){if("undefined"==typeof window)return!1;for(var e in window)try{if(!p["$"+e]&&o.call(window,e)&&null!==window[e]&&"object"==typeof window[e])try{f(window[e])}catch(e){return!0}}catch(e){return!0}return!1}();n=function(e){var t=null!==e&&"object"==typeof e,r="[object Function]"===i.call(e),n=s(e),a=t&&"[object String]"===i.call(e),p=[];if(!t&&!r&&!n)throw new TypeError("Object.keys called on a non-object");var d=c&&r;if(a&&e.length>0&&!o.call(e,0))for(var y=0;y<e.length;++y)p.push(String(y));if(n&&e.length>0)for(var g=0;g<e.length;++g)p.push(String(g));else for(var v in e)d&&"prototype"===v||!o.call(e,v)||p.push(String(v));if(u)for(var b=function(e){if("undefined"==typeof window||!h)return f(e);try{return f(e)}catch(e){return!1}}(e),m=0;m<l.length;++m)b&&"constructor"===l[m]||!o.call(e,l[m])||p.push(l[m]);return p}}e.exports=n},2215:(e,t,r)=>{"use strict";var n=Array.prototype.slice,o=r(1414),i=Object.keys,s=i?function(e){return i(e)}:r(8987),a=Object.keys;s.shim=function(){if(Object.keys){var e=function(){var e=Object.keys(arguments);return e&&e.length===arguments.length}(1,2);e||(Object.keys=function(e){return o(e)?a(n.call(e)):a(e)})}else Object.keys=s;return Object.keys||s},e.exports=s},1414:e=>{"use strict";var t=Object.prototype.toString;e.exports=function(e){var r=t.call(e),n="[object Arguments]"===r;return n||(n="[object Array]"!==r&&null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Function]"===t.call(e.callee)),n}},4155:e=>{var t,r,n=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function s(e){if(t===setTimeout)return setTimeout(e,0);if((t===o||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(r){try{return t.call(null,e,0)}catch(r){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:o}catch(e){t=o}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var a,u=[],c=!1,l=-1;function f(){c&&a&&(c=!1,a.length?u=a.concat(u):l=-1,u.length&&p())}function p(){if(!c){var e=s(f);c=!0;for(var t=u.length;t;){for(a=u,u=[];++l<t;)a&&a[l].run();l=-1,t=u.length}a=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{return r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function d(){}n.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];u.push(new h(e,t)),1!==u.length||c||s(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=d,n.addListener=d,n.once=d,n.off=d,n.removeListener=d,n.removeAllListeners=d,n.emit=d,n.prependListener=d,n.prependOnceListener=d,n.listeners=function(e){return[]},n.binding=function(e){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},3689:(e,t,r)=>{"use strict";r.r(t),r.d(t,{decode:()=>v,default:()=>S,encode:()=>b,toASCII:()=>w,toUnicode:()=>m,ucs2decode:()=>h,ucs2encode:()=>d});const n=2147483647,o=36,i=/^xn--/,s=/[^\0-\x7F]/,a=/[\x2E\u3002\uFF0E\uFF61]/g,u={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},c=Math.floor,l=String.fromCharCode;function f(e){throw new RangeError(u[e])}function p(e,t){const r=e.split("@");let n="";r.length>1&&(n=r[0]+"@",e=r[1]);const o=function(e,t){const r=[];let n=e.length;for(;n--;)r[n]=t(e[n]);return r}((e=e.replace(a,".")).split("."),t).join(".");return n+o}function h(e){const t=[];let r=0;const n=e.length;for(;r<n;){const o=e.charCodeAt(r++);if(o>=55296&&o<=56319&&r<n){const n=e.charCodeAt(r++);56320==(64512&n)?t.push(((1023&o)<<10)+(1023&n)+65536):(t.push(o),r--)}else t.push(o)}return t}const d=e=>String.fromCodePoint(...e),y=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},g=function(e,t,r){let n=0;for(e=r?c(e/700):e>>1,e+=c(e/t);e>455;n+=o)e=c(e/35);return c(n+36*e/(e+38))},v=function(e){const t=[],r=e.length;let i=0,s=128,a=72,u=e.lastIndexOf("-");u<0&&(u=0);for(let r=0;r<u;++r)e.charCodeAt(r)>=128&&f("not-basic"),t.push(e.charCodeAt(r));for(let p=u>0?u+1:0;p<r;){const u=i;for(let t=1,s=o;;s+=o){p>=r&&f("invalid-input");const u=(l=e.charCodeAt(p++))>=48&&l<58?l-48+26:l>=65&&l<91?l-65:l>=97&&l<123?l-97:o;u>=o&&f("invalid-input"),u>c((n-i)/t)&&f("overflow"),i+=u*t;const h=s<=a?1:s>=a+26?26:s-a;if(u<h)break;const d=o-h;t>c(n/d)&&f("overflow"),t*=d}const h=t.length+1;a=g(i-u,h,0==u),c(i/h)>n-s&&f("overflow"),s+=c(i/h),i%=h,t.splice(i++,0,s)}var l;return String.fromCodePoint(...t)},b=function(e){const t=[],r=(e=h(e)).length;let i=128,s=0,a=72;for(const r of e)r<128&&t.push(l(r));const u=t.length;let p=u;for(u&&t.push("-");p<r;){let r=n;for(const t of e)t>=i&&t<r&&(r=t);const h=p+1;r-i>c((n-s)/h)&&f("overflow"),s+=(r-i)*h,i=r;for(const r of e)if(r<i&&++s>n&&f("overflow"),r===i){let e=s;for(let r=o;;r+=o){const n=r<=a?1:r>=a+26?26:r-a;if(e<n)break;const i=e-n,s=o-n;t.push(l(y(n+i%s,0))),e=c(i/s)}t.push(l(y(e,0))),a=g(s,h,p===u),s=0,++p}++s,++i}return t.join("")},m=function(e){return p(e,(function(e){return i.test(e)?v(e.slice(4).toLowerCase()):e}))},w=function(e){return p(e,(function(e){return s.test(e)?"xn--"+b(e):e}))},S={version:"2.1.0",ucs2:{decode:h,encode:d},decode:v,encode:b,toASCII:w,toUnicode:m}},7129:(e,t)=>{"use strict";var r,n=Object.prototype.hasOwnProperty;function o(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(e){return null}}function i(e){try{return encodeURIComponent(e)}catch(e){return null}}t.stringify=function(e,t){t=t||"";var o,s,a=[];for(s in"string"!=typeof t&&(t="?"),e)if(n.call(e,s)){if((o=e[s])||null!==o&&o!==r&&!isNaN(o)||(o=""),s=i(s),o=i(o),null===s||null===o)continue;a.push(s+"="+o)}return a.length?t+a.join("&"):""},t.parse=function(e){for(var t,r=/([^=?#&]+)=?([^&]*)/g,n={};t=r.exec(e);){var i=o(t[1]),s=o(t[2]);null===i||null===s||i in n||(n[i]=s)}return n}},7418:e=>{"use strict";e.exports=function(e,t){if(t=t.split(":")[0],!(e=+e))return!1;switch(t){case"http":case"ws":return 80!==e;case"https":case"wss":return 443!==e;case"ftp":return 21!==e;case"gopher":return 70!==e;case"file":return!1}return 0!==e}},7857:(e,t,r)=>{"use strict";const n=r(3689),o=r(4564),i=r(2224).y,s=r(5761).m,a=r(8971).U,u=r(7652),c=r(456),{fromCallback:l}=r(7041),{getCustomInspectSymbol:f}=r(1269),p=/^[\x21\x23-\x2B\x2D-\x3A\x3C-\x5B\x5D-\x7E]+$/,h=/[\x00-\x1F]/,d=["\n","\r","\0"],y=/[\x20-\x3A\x3C-\x7E]+/,g=/[\x09\x20-\x2F\x3B-\x40\x5B-\x60\x7B-\x7E]/,v={jan:0,feb:1,mar:2,apr:3,may:4,jun:5,jul:6,aug:7,sep:8,oct:9,nov:10,dec:11},b=2147483647e3,m='Invalid sameSiteContext option for getCookies(); expected one of "strict", "lax", or "none"';function w(e){u.validate(u.isNonEmptyString(e),e);const t=String(e).toLowerCase();return"none"===t||"lax"===t||"strict"===t?t:null}const S=Object.freeze({SILENT:"silent",STRICT:"strict",DISABLED:"unsafe-disabled"}),O=/(?:^(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}$)|(?:^(?:(?:[a-f\d]{1,4}:){7}(?:[a-f\d]{1,4}|:)|(?:[a-f\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|:[a-f\d]{1,4}|:)|(?:[a-f\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,2}|:)|(?:[a-f\d]{1,4}:){4}(?:(?::[a-f\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,3}|:)|(?:[a-f\d]{1,4}:){3}(?:(?::[a-f\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,4}|:)|(?:[a-f\d]{1,4}:){2}(?:(?::[a-f\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,5}|:)|(?:[a-f\d]{1,4}:){1}(?:(?::[a-f\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,6}|:)|(?::(?:(?::[a-f\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,7}|:)))$)/,_="\n\\[?(?:\n(?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|\n(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|\n(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,2}|:)|\n(?:[a-fA-F\\d]{1,4}:){4}(?:(?::[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,3}|:)|\n(?:[a-fA-F\\d]{1,4}:){3}(?:(?::[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,4}|:)|\n(?:[a-fA-F\\d]{1,4}:){2}(?:(?::[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,5}|:)|\n(?:[a-fA-F\\d]{1,4}:){1}(?:(?::[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,6}|:)|\n(?::(?:(?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:))\n)(?:%[0-9a-zA-Z]{1,})?\\]?\n".replace(/\s*\/\/.*$/gm,"").replace(/\n/g,"").trim(),E=new RegExp(`^${_}$`);function x(e,t,r,n){let o=0;for(;o<e.length;){const t=e.charCodeAt(o);if(t<=47||t>=58)break;o++}return o<t||o>r?null:n||o==e.length?parseInt(e.substr(0,o),10):null}function j(e){const t=e.split(":"),r=[0,0,0];if(3!==t.length)return null;for(let e=0;e<3;e++){const n=2==e,o=x(t[e],1,2,n);if(null===o)return null;r[e]=o}return r}function A(e){e=String(e).substr(0,3).toLowerCase();const t=v[e];return t>=0?t:null}function C(e){if(!e)return;const t=e.split(g);if(!t)return;let r=null,n=null,o=null,i=null,s=null,a=null;for(let e=0;e<t.length;e++){const u=t[e].trim();if(!u.length)continue;let c;null===o&&(c=j(u),c)?(r=c[0],n=c[1],o=c[2]):null!==i||(c=x(u,1,2,!0),null===c)?null!==s||(c=A(u),null===c)?null===a&&(c=x(u,2,4,!0),null!==c&&(a=c,a>=70&&a<=99?a+=1900:a>=0&&a<=69&&(a+=2e3))):s=c:i=c}return null===i||null===s||null===a||null===o||i<1||i>31||a<1601||r>23||n>59||o>59?void 0:new Date(Date.UTC(a,s,i,r,n,o))}function P(e){return u.validate(u.isDate(e),e),e.toUTCString()}function T(e){return null==e?null:(e=e.trim().replace(/^\./,""),E.test(e)&&(e=e.replace("[","").replace("]","")),n&&/[^\u0001-\u007f]/.test(e)&&(e=n.toASCII(e)),e.toLowerCase())}function k(e,t,r){if(null==e||null==t)return null;if(!1!==r&&(e=T(e),t=T(t)),e==t)return!0;const n=e.lastIndexOf(t);return!(n<=0)&&(e.length===t.length+n&&("."===e.substr(n-1,1)&&!O.test(e)))}function R(e){if(!e||"/"!==e.substr(0,1))return"/";if("/"===e)return e;const t=e.lastIndexOf("/");return 0===t?"/":e.slice(0,t)}function U(e,t){e=function(e){if(u.isEmptyString(e))return e;for(let t=0;t<d.length;t++){const r=e.indexOf(d[t]);-1!==r&&(e=e.substr(0,r))}return e}(e),u.validate(u.isString(e),e);let r,n,o=e.indexOf("=");if(t)0===o&&(o=(e=e.substr(1)).indexOf("="));else if(o<=0)return;if(o<=0?(r="",n=e.trim()):(r=e.substr(0,o).trim(),n=e.substr(o+1).trim()),h.test(r)||h.test(n))return;const i=new D;return i.key=r,i.value=n,i}function I(e,t){if(t&&"object"==typeof t||(t={}),u.isEmptyString(e)||!u.isString(e))return null;const r=(e=e.trim()).indexOf(";"),n=U(-1===r?e:e.substr(0,r),!!t.loose);if(!n)return;if(-1===r)return n;const o=e.slice(r+1).trim();if(0===o.length)return n;const i=o.split(";");for(;i.length;){const e=i.shift().trim();if(0===e.length)continue;const t=e.indexOf("=");let r,o;switch(-1===t?(r=e,o=null):(r=e.substr(0,t),o=e.substr(t+1)),r=r.trim().toLowerCase(),o&&(o=o.trim()),r){case"expires":if(o){const e=C(o);e&&(n.expires=e)}break;case"max-age":if(o&&/^-?[0-9]+$/.test(o)){const e=parseInt(o,10);n.setMaxAge(e)}break;case"domain":if(o){const e=o.trim().replace(/^\./,"");e&&(n.domain=e.toLowerCase())}break;case"path":n.path=o&&"/"===o[0]?o:null;break;case"secure":n.secure=!0;break;case"httponly":n.httpOnly=!0;break;case"samesite":switch(o?o.toLowerCase():""){case"strict":n.sameSite="strict";break;case"lax":n.sameSite="lax";break;case"none":n.sameSite="none";break;default:n.sameSite=void 0}break;default:n.extensions=n.extensions||[],n.extensions.push(e)}}return n}function N(e){let t;try{t=JSON.parse(e)}catch(e){return e}return t}function L(e){if(!e||u.isEmptyString(e))return null;let t;if("string"==typeof e){if(t=N(e),t instanceof Error)return null}else t=e;const r=new D;for(let e=0;e<D.serializableProperties.length;e++){const n=D.serializableProperties[e];void 0!==t[n]&&t[n]!==B[n]&&("expires"===n||"creation"===n||"lastAccessed"===n?null===t[n]?r[n]=null:r[n]="Infinity"==t[n]?"Infinity":new Date(t[n]):r[n]=t[n])}return r}function F(e,t){u.validate(u.isObject(e),e),u.validate(u.isObject(t),t);let r=0;const n=e.path?e.path.length:0;if(r=(t.path?t.path.length:0)-n,0!==r)return r;return r=(e.creation?e.creation.getTime():b)-(t.creation?t.creation.getTime():b),0!==r||(r=e.creationIndex-t.creationIndex),r}function M(e){if(e instanceof Object)return e;try{e=decodeURI(e)}catch(e){}return o(e)}const B={key:"",value:"",expires:"Infinity",maxAge:null,domain:null,path:null,secure:!1,httpOnly:!1,extensions:null,hostOnly:null,pathIsDefault:null,creation:null,lastAccessed:null,sameSite:void 0};class D{constructor(e={}){const t=f();t&&(this[t]=this.inspect),Object.assign(this,B,e),this.creation=this.creation||new Date,Object.defineProperty(this,"creationIndex",{configurable:!1,enumerable:!1,writable:!0,value:++D.cookiesCreated})}inspect(){const e=Date.now(),t=null!=this.hostOnly?this.hostOnly:"?",r=this.creation?e-this.creation.getTime()+"ms":"?",n=this.lastAccessed?e-this.lastAccessed.getTime()+"ms":"?";return`Cookie="${this.toString()}; hostOnly=${t}; aAge=${n}; cAge=${r}"`}toJSON(){const e={};for(const t of D.serializableProperties)this[t]!==B[t]&&("expires"===t||"creation"===t||"lastAccessed"===t?null===this[t]?e[t]=null:e[t]="Infinity"==this[t]?"Infinity":this[t].toISOString():"maxAge"===t?null!==this[t]&&(e[t]=this[t]==1/0||this[t]==-1/0?this[t].toString():this[t]):this[t]!==B[t]&&(e[t]=this[t]));return e}clone(){return L(this.toJSON())}validate(){if(!p.test(this.value))return!1;if(!(this.expires==1/0||this.expires instanceof Date||C(this.expires)))return!1;if(null!=this.maxAge&&this.maxAge<=0)return!1;if(null!=this.path&&!y.test(this.path))return!1;const e=this.cdomain();return!e||!e.match(/\.$/)}setExpires(e){e instanceof Date?this.expires=e:this.expires=C(e)||"Infinity"}setMaxAge(e){this.maxAge=e===1/0||e===-1/0?e.toString():e}cookieString(){let e=this.value;return null==e&&(e=""),""===this.key?e:`${this.key}=${e}`}toString(){let e=this.cookieString();if(this.expires!=1/0&&(this.expires instanceof Date?e+=`; Expires=${P(this.expires)}`:e+=`; Expires=${this.expires}`),null!=this.maxAge&&this.maxAge!=1/0&&(e+=`; Max-Age=${this.maxAge}`),this.domain&&!this.hostOnly&&(e+=`; Domain=${this.domain}`),this.path&&(e+=`; Path=${this.path}`),this.secure&&(e+="; Secure"),this.httpOnly&&(e+="; HttpOnly"),this.sameSite&&"none"!==this.sameSite){const t=D.sameSiteCanonical[this.sameSite.toLowerCase()];e+=`; SameSite=${t||this.sameSite}`}return this.extensions&&this.extensions.forEach((t=>{e+=`; ${t}`})),e}TTL(e){if(null!=this.maxAge)return this.maxAge<=0?0:1e3*this.maxAge;let t=this.expires;return t!=1/0?(t instanceof Date||(t=C(t)||1/0),t==1/0?1/0:t.getTime()-(e||Date.now())):1/0}expiryTime(e){if(null!=this.maxAge){const t=e||this.creation||new Date,r=this.maxAge<=0?-1/0:1e3*this.maxAge;return t.getTime()+r}return this.expires==1/0?1/0:this.expires.getTime()}expiryDate(e){const t=this.expiryTime(e);return t==1/0?new Date(b):t==-1/0?new Date(0):new Date(t)}isPersistent(){return null!=this.maxAge||this.expires!=1/0}canonicalizedDomain(){return null==this.domain?null:T(this.domain)}cdomain(){return this.canonicalizedDomain()}}function q(e){if(null!=e){const t=e.toLowerCase();switch(t){case S.STRICT:case S.SILENT:case S.DISABLED:return t}}return S.SILENT}D.cookiesCreated=0,D.parse=I,D.fromJSON=L,D.serializableProperties=Object.keys(B),D.sameSiteLevel={strict:3,lax:2,none:1},D.sameSiteCanonical={strict:"Strict",lax:"Lax"};class J{constructor(e,t={rejectPublicSuffixes:!0}){"boolean"==typeof t&&(t={rejectPublicSuffixes:t}),u.validate(u.isObject(t),t),this.rejectPublicSuffixes=t.rejectPublicSuffixes,this.enableLooseMode=!!t.looseMode,this.allowSpecialUseDomain="boolean"!=typeof t.allowSpecialUseDomain||t.allowSpecialUseDomain,this.store=e||new s,this.prefixSecurity=q(t.prefixSecurity),this._cloneSync=z("clone"),this._importCookiesSync=z("_importCookies"),this.getCookiesSync=z("getCookies"),this.getCookieStringSync=z("getCookieString"),this.getSetCookieStringsSync=z("getSetCookieStrings"),this.removeAllCookiesSync=z("removeAllCookies"),this.setCookieSync=z("setCookie"),this.serializeSync=z("serialize")}setCookie(e,t,r,n){let o;if(u.validate(u.isNonEmptyString(t),n,r),u.isFunction(t))return(n=t)(new Error("No URL was specified"));const i=M(t);if(u.isFunction(r)&&(n=r,r={}),u.validate(u.isFunction(n),n),!u.isNonEmptyString(e)&&!u.isObject(e)&&e instanceof String&&0==e.length)return n(null);const s=T(i.hostname),a=r.loose||this.enableLooseMode;let c=null;if(r.sameSiteContext&&(c=w(r.sameSiteContext),!c))return n(new Error(m));if("string"==typeof e||e instanceof String){if(!(e=D.parse(e,{loose:a})))return o=new Error("Cookie failed to parse"),n(r.ignoreError?null:o)}else if(!(e instanceof D))return o=new Error("First argument to setCookie must be a Cookie object or string"),n(r.ignoreError?null:o);const l=r.now||new Date;if(e.domain){if(!k(s,e.cdomain(),!1))return o=new Error(`Cookie not in this host's domain. Cookie:${e.cdomain()} Request:${s}`),n(r.ignoreError?null:o);null==e.hostOnly&&(e.hostOnly=!1)}else e.hostOnly=!0,e.domain=s;if(e.path&&"/"===e.path[0]||(e.path=R(i.pathname),e.pathIsDefault=!0),!1===r.http&&e.httpOnly)return o=new Error("Cookie is HttpOnly and this isn't an HTTP API"),n(r.ignoreError?null:o);if("none"!==e.sameSite&&void 0!==e.sameSite&&c&&"none"===c)return o=new Error("Cookie is SameSite but this is a cross-origin request"),n(r.ignoreError?null:o);const f=this.prefixSecurity===S.SILENT;if(!(this.prefixSecurity===S.DISABLED)){let t,o=!1;if(!function(e){return u.validate(u.isObject(e),e),!e.key.startsWith("__Secure-")||e.secure}(e)?(o=!0,t="Cookie has __Secure prefix but Secure attribute is not set"):function(e){return u.validate(u.isObject(e)),!e.key.startsWith("__Host-")||e.secure&&e.hostOnly&&null!=e.path&&"/"===e.path}(e)||(o=!0,t="Cookie has __Host prefix but either Secure or HostOnly attribute is not set or Path is not '/'"),o)return n(r.ignoreError||f?null:new Error(t))}const p=this.store;p.updateCookie||(p.updateCookie=function(e,t,r){this.putCookie(t,r)}),p.findCookie(e.domain,e.path,e.key,(function(t,o){if(t)return n(t);const i=function(t){if(t)return n(t);n(null,e)};if(o){if(!1===r.http&&o.httpOnly)return t=new Error("old Cookie is HttpOnly and this isn't an HTTP API"),n(r.ignoreError?null:t);e.creation=o.creation,e.creationIndex=o.creationIndex,e.lastAccessed=l,p.updateCookie(o,e,i)}else e.creation=e.lastAccessed=l,p.putCookie(e,i)}))}getCookies(e,t,r){u.validate(u.isNonEmptyString(e),r,e);const n=M(e);u.isFunction(t)&&(r=t,t={}),u.validate(u.isObject(t),r,t),u.validate(u.isFunction(r),r);const o=T(n.hostname),i=n.pathname||"/";let s=t.secure;null!=s||!n.protocol||"https:"!=n.protocol&&"wss:"!=n.protocol||(s=!0);let c=0;if(t.sameSiteContext){const e=w(t.sameSiteContext);if(c=D.sameSiteLevel[e],!c)return r(new Error(m))}let l=t.http;null==l&&(l=!0);const f=t.now||Date.now(),p=!1!==t.expire,h=!!t.allPaths,d=this.store;function y(e){if(e.hostOnly){if(e.domain!=o)return!1}else if(!k(o,e.domain,!1))return!1;if(!h&&!a(i,e.path))return!1;if(e.secure&&!s)return!1;if(e.httpOnly&&!l)return!1;if(c){if(D.sameSiteLevel[e.sameSite||"none"]>c)return!1}return!(p&&e.expiryTime()<=f)||(d.removeCookie(e.domain,e.path,e.key,(()=>{})),!1)}d.findCookies(o,h?null:i,this.allowSpecialUseDomain,((e,n)=>{if(e)return r(e);n=n.filter(y),!1!==t.sort&&(n=n.sort(F));const o=new Date;for(const e of n)e.lastAccessed=o;r(null,n)}))}getCookieString(...e){const t=e.pop();u.validate(u.isFunction(t),t);e.push((function(e,r){e?t(e):t(null,r.sort(F).map((e=>e.cookieString())).join("; "))})),this.getCookies.apply(this,e)}getSetCookieStrings(...e){const t=e.pop();u.validate(u.isFunction(t),t);e.push((function(e,r){e?t(e):t(null,r.map((e=>e.toString())))})),this.getCookies.apply(this,e)}serialize(e){u.validate(u.isFunction(e),e);let t=this.store.constructor.name;u.isObject(t)&&(t=null);const r={version:`tough-cookie@${c}`,storeType:t,rejectPublicSuffixes:!!this.rejectPublicSuffixes,enableLooseMode:!!this.enableLooseMode,allowSpecialUseDomain:!!this.allowSpecialUseDomain,prefixSecurity:q(this.prefixSecurity),cookies:[]};if(!this.store.getAllCookies||"function"!=typeof this.store.getAllCookies)return e(new Error("store does not support getAllCookies and cannot be serialized"));this.store.getAllCookies(((t,n)=>t?e(t):(r.cookies=n.map((e=>(delete(e=e instanceof D?e.toJSON():e).creationIndex,e))),e(null,r))))}toJSON(){return this.serializeSync()}_importCookies(e,t){let r=e.cookies;if(!r||!Array.isArray(r))return t(new Error("serialized jar has no cookies array"));r=r.slice();const n=e=>{if(e)return t(e);if(!r.length)return t(e,this);let o;try{o=L(r.shift())}catch(e){return t(e)}if(null===o)return n(null);this.store.putCookie(o,n)};n()}clone(e,t){1===arguments.length&&(t=e,e=null),this.serialize(((r,n)=>{if(r)return t(r);J.deserialize(n,e,t)}))}cloneSync(e){if(0===arguments.length)return this._cloneSync();if(!e.synchronous)throw new Error("CookieJar clone destination store is not synchronous; use async API instead.");return this._cloneSync(e)}removeAllCookies(e){u.validate(u.isFunction(e),e);const t=this.store;if("function"==typeof t.removeAllCookies&&t.removeAllCookies!==i.prototype.removeAllCookies)return t.removeAllCookies(e);t.getAllCookies(((r,n)=>{if(r)return e(r);if(0===n.length)return e(null);let o=0;const i=[];function s(t){if(t&&i.push(t),o++,o===n.length)return e(i.length?i[0]:null)}n.forEach((e=>{t.removeCookie(e.domain,e.path,e.key,s)}))}))}static deserialize(e,t,r){let n;if(3!==arguments.length&&(r=t,t=null),u.validate(u.isFunction(r),r),"string"==typeof e){if(n=N(e),n instanceof Error)return r(n)}else n=e;const o=new J(t,{rejectPublicSuffixes:n.rejectPublicSuffixes,looseMode:n.enableLooseMode,allowSpecialUseDomain:n.allowSpecialUseDomain,prefixSecurity:n.prefixSecurity});o._importCookies(n,(e=>{if(e)return r(e);r(null,o)}))}static deserializeSync(e,t){const r="string"==typeof e?JSON.parse(e):e,n=new J(t,{rejectPublicSuffixes:r.rejectPublicSuffixes,looseMode:r.enableLooseMode});if(!n.store.synchronous)throw new Error("CookieJar store is not synchronous; use async API instead.");return n._importCookiesSync(r),n}}function z(e){return function(...t){if(!this.store.synchronous)throw new Error("CookieJar store is not synchronous; use async API instead.");let r,n;if(this[e](...t,((e,t)=>{r=e,n=t})),r)throw r;return n}}J.fromJSON=J.deserializeSync,["_importCookies","clone","getCookies","getCookieString","getSetCookieStrings","removeAllCookies","serialize","setCookie"].forEach((e=>{J.prototype[e]=l(J.prototype[e])})),J.deserialize=l(J.deserialize),t.version=c,t.CookieJar=J,t.Cookie=D,t.Store=i,t.MemoryCookieStore=s,t.parseDate=C,t.formatDate=P,t.parse=I,t.fromJSON=L,t.domainMatch=k,t.defaultPath=R,t.pathMatch=a,t.cookieCompare=F,t.permutePath=function(e){if(u.validate(u.isString(e)),"/"===e)return["/"];const t=[e];for(;e.length>1;){const r=e.lastIndexOf("/");if(0===r)break;e=e.substr(0,r),t.push(e)}return t.push("/"),t},t.canonicalDomain=T,t.PrefixSecurityEnum=S,t.ParameterError=u.ParameterError},5761:(e,t,r)=>{"use strict";const{fromCallback:n}=r(7041),o=r(2224).y,i=r(8971).U,{getCustomInspectSymbol:s,getUtilInspect:a}=r(1269);class u extends o{constructor(){super(),this.synchronous=!0,this.idx={};const e=s();e&&(this[e]=this.inspect)}inspect(){return`{ idx: ${{inspect:a(c)}.inspect(this.idx,!1,2)} }`}findCookie(e,t,r,n){return this.idx[e]&&this.idx[e][t]?n(null,this.idx[e][t][r]||null):n(null,void 0)}findCookies(e,t,r,n){const o=[];if("function"==typeof r&&(n=r,r=!0),!e)return n(null,[]);let s;s=t?function(e){Object.keys(e).forEach((r=>{if(i(t,r)){const t=e[r];for(const e in t)o.push(t[e])}}))}:function(e){for(const t in e){const r=e[t];for(const e in r)o.push(r[e])}};const a=[e],u=this.idx;a.forEach((e=>{const t=u[e];t&&s(t)})),n(null,o)}putCookie(e,t){this.idx[e.domain]||(this.idx[e.domain]={}),this.idx[e.domain][e.path]||(this.idx[e.domain][e.path]={}),this.idx[e.domain][e.path][e.key]=e,t(null)}updateCookie(e,t,r){this.putCookie(t,r)}removeCookie(e,t,r,n){this.idx[e]&&this.idx[e][t]&&this.idx[e][t][r]&&delete this.idx[e][t][r],n(null)}removeCookies(e,t,r){return this.idx[e]&&(t?delete this.idx[e][t]:delete this.idx[e]),r(null)}removeAllCookies(e){return this.idx={},e(null)}getAllCookies(e){const t=[],r=this.idx;Object.keys(r).forEach((e=>{Object.keys(r[e]).forEach((n=>{Object.keys(r[e][n]).forEach((o=>{null!==o&&t.push(r[e][n][o])}))}))})),t.sort(((e,t)=>(e.creationIndex||0)-(t.creationIndex||0))),e(null,t)}}function c(e){const t=Object.keys(e);if(0===t.length)return"{}";let r="{\n";return Object.keys(e).forEach(((n,o)=>{r+=function(e,t){const r="  ";let n=`${r}'${e}': {\n`;return Object.keys(t).forEach(((e,r,o)=>{n+=function(e,t){const r="    ";let n=`${r}'${e}': {\n`;return Object.keys(t).forEach(((e,r,o)=>{const i=t[e];n+=`      ${e}: ${i.inspect()}`,r<o.length-1&&(n+=","),n+="\n"})),n+=`${r}}`,n}(e,t[e]),r<o.length-1&&(n+=","),n+="\n"})),n+=`${r}}`,n}(n,e[n]),o<t.length-1&&(r+=","),r+="\n"})),r+="}",r}["findCookie","findCookies","putCookie","updateCookie","removeCookie","removeCookies","removeAllCookies","getAllCookies"].forEach((e=>{u.prototype[e]=n(u.prototype[e])})),t.m=u},8971:(e,t)=>{"use strict";t.U=function(e,t){if(t===e)return!0;if(0===e.indexOf(t)){if("/"===t.substr(-1))return!0;if("/"===e.substr(t.length,1))return!0}return!1}},2224:(e,t)=>{"use strict";t.y=class{constructor(){this.synchronous=!1}findCookie(e,t,r,n){throw new Error("findCookie is not implemented")}findCookies(e,t,r,n){throw new Error("findCookies is not implemented")}putCookie(e,t){throw new Error("putCookie is not implemented")}updateCookie(e,t,r){throw new Error("updateCookie is not implemented")}removeCookie(e,t,r,n){throw new Error("removeCookie is not implemented")}removeCookies(e,t,r){throw new Error("removeCookies is not implemented")}removeAllCookies(e){throw new Error("removeAllCookies is not implemented")}getAllCookies(e){throw new Error("getAllCookies is not implemented (therefore jar cannot be serialized)")}}},1269:(e,t,r)=>{function n(){try{return r(9539)}catch(e){return null}}function o(){return Symbol.for("nodejs.util.inspect.custom")}t.getUtilInspect=function(e,t={}){const r=(t.requireUtil||n)();return function(t,n,o){return r?r.inspect(t,n,o):e(t)}},t.getCustomInspectSymbol=function(e={}){return(e.lookupCustomInspectSymbol||o)()||function(e){const t=(e.requireUtil||n)();return t?t.inspect.custom:null}(e)}},7652:(e,t)=>{"use strict";function r(e){return"function"==typeof e}function n(e){return"string"==typeof e||e instanceof String}function o(e){return"[object Object]"===toString.call(e)}class i extends Error{constructor(...e){super(...e)}}t.ParameterError=i,t.isFunction=r,t.isNonEmptyString=function(e){return n(e)&&""!==e},t.isDate=function(e){return function(e,t){try{return e instanceof t}catch(e){return!1}}(e,Date)&&function(e){return"number"==typeof e&&e%1==0}(e.getTime())},t.isEmptyString=function(e){return""===e||e instanceof String&&""===e.toString()},t.isString=n,t.isObject=o,t.validate=function(e,t,n){if(r(t)||(n=t,t=null),o(n)||(n={Error:"Failed Check"}),!e){if(!t)throw new i(n);t(new i(n))}}},456:e=>{e.exports="4.1.2"},7041:(e,t)=>{"use strict";t.fromCallback=function(e){return Object.defineProperty((function(){if("function"!=typeof arguments[arguments.length-1])return new Promise(((t,r)=>{arguments[arguments.length]=(e,n)=>{if(e)return r(e);t(n)},arguments.length++,e.apply(this,arguments)}));e.apply(this,arguments)}),"name",{value:e.name})},t.fromPromise=function(e){return Object.defineProperty((function(){const t=arguments[arguments.length-1];if("function"!=typeof t)return e.apply(this,arguments);delete arguments[arguments.length-1],arguments.length--,e.apply(this,arguments).then((e=>t(null,e)),t)}),"name",{value:e.name})}},8306:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var n,o=0,i=t.length;o<i;o++)!n&&o in t||(n||(n=Array.prototype.slice.call(t,0,o)),n[o]=t[o]);return e.concat(n||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.SAS9ApiClient=void 0;var s=r(7757),a=r(6230),u=r(795),c=r(5928),l=function(){function e(e,t,r){this.serverUrl=e,this.jobsPath=t,e&&(0,c.isUrl)(e),this.requestClient=new u.Sas9RequestClient(e,r)}return e.prototype.getConfig=function(){return{serverUrl:this.serverUrl}},e.prototype.setConfig=function(e){e&&(this.serverUrl=e)},e.prototype.executeScript=function(e,t,r){return n(this,void 0,void 0,(function(){var n,s,a,u,c,l,p;return o(this,(function(o){switch(o.label){case 0:return[4,this.requestClient.login(t,r,this.jobsPath)];case 1:return o.sent(),n=["data _null_;","file _webout;","put 'Executed sasjs run';","run;"],s=f(i(i([],e,!0),n,!0).join("\n")),a="/User Folders/".concat(t,"/My Folder/sasjs/runner"),u="multipart/form-data; boundary="+s.getBoundary(),c=s.getLengthSync(),l={"cache-control":"no-cache",Accept:"*/*","Content-Type":u,"Content-Length":c,Connection:"keep-alive"},p="".concat(this.jobsPath,"/?").concat("_program="+a+"&_debug=log"),[4,this.requestClient.post(p,s,void 0,u,l)];case 2:return[2,o.sent().result]}}))}))},e}();t.SAS9ApiClient=l;var f=function(e){var t=new a,r="sasjs-execute-sas9-".concat((0,s.generateTimestamp)(""),".sas");return t.append(r,e,{filename:r,contentType:"text/plain"}),t}},387:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)},o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var s=r(5928),a=r(1230),u=r(8306),c=r(1381),l=r(3900),f=r(4588),p=r(8217),h=r(1395),d={serverUrl:"",pathSASJS:"/SASjsApi/stp/execute",pathSAS9:"/SASStoredProcess/do",pathSASViya:"/SASJobExecution",appLoc:"/Public/seedapp",serverType:l.ServerType.Sas9,debug:!1,contextName:"SAS Job Execution compute context",useComputeApi:null,loginMechanism:a.LoginMechanism.Default},y=function(){function e(e){var t=this;this.sasjsConfig=new a.SASjsConfig,this.jobsPath="",this.sas9ApiClient=null,this.fileUploader=null,this.authManager=null,this.requestClient=null,this.webJobExecutor=null,this.sas9JobExecutor=null,this.resendWaitingRequests=function(){return o(t,void 0,void 0,(function(){var e,t;return i(this,(function(r){switch(r.label){case 0:return[4,null===(e=this.webJobExecutor)||void 0===e?void 0:e.resendWaitingRequests()];case 1:return r.sent(),[4,null===(t=this.fileUploader)||void 0===t?void 0:t.resendWaitingRequests()];case 2:return r.sent(),[2]}}))}))},this.sasjsConfig=n(n({},d),e),this.setupConfiguration()}return e.prototype.logIn=function(e,t,r,n){return void 0===n&&(n={}),o(this,void 0,void 0,(function(){return i(this,(function(r){if(this.sasjsConfig.loginMechanism===a.LoginMechanism.Default){if(!e||!t)throw new Error("A username and password are required when using the default login mechanism.");return[2,this.authManager.logIn(e,t)]}if("undefined"==typeof window)throw new Error("The redirected login mechanism is only available for use in the browser.");return[2,this.authManager.redirectedLogIn(n)]}))}))},e.prototype.logOut=function(){return this.authManager.logOut()},e.prototype.uploadFile=function(e,t,r,s,a){return void 0===s&&(s={}),o(this,void 0,void 0,(function(){var o;return i(this,(function(i){switch(i.label){case 0:return s=n(n({},this.sasjsConfig),s),o={files:t,params:r},[4,this.fileUploader.execute(e,o,s,a)];case 1:return[2,i.sent()]}}))}))},e.prototype.request=function(e,t,r,a,u,c){return void 0===r&&(r={}),void 0===c&&(c=[]),o(this,void 0,void 0,(function(){var o;return i(this,(function(i){switch(i.label){case 0:return r=n(n({},this.sasjsConfig),r),(o=(0,s.validateInput)(t)).status?r.serverType===l.ServerType.Sas9&&r.username&&r.password?[4,this.sas9JobExecutor.execute(e,t,r)]:[3,2]:[3,5];case 1:case 3:return[2,i.sent()];case 2:return[4,this.webJobExecutor.execute(e,t,r,a,u,c)];case 4:return[3,6];case 5:return[2,Promise.reject(new h.ErrorResponse(o.msg))];case 6:return[2]}}))}))},e.prototype.checkSession=function(){return o(this,void 0,void 0,(function(){return i(this,(function(e){return[2,this.authManager.checkSession()]}))}))},e.prototype.setupConfiguration=function(){if(void 0===this.sasjsConfig.serverUrl||""===this.sasjsConfig.serverUrl)if("undefined"!=typeof location){var e="".concat(location.protocol,"//").concat(location.hostname);location.port&&(e="".concat(e,":").concat(location.port)),this.sasjsConfig.serverUrl=e}else this.sasjsConfig.serverUrl="";if("/"===this.sasjsConfig.serverUrl.slice(-1)&&(this.sasjsConfig.serverUrl=this.sasjsConfig.serverUrl.slice(0,-1)),this.requestClient)this.requestClient.setConfig(this.sasjsConfig.serverUrl,this.sasjsConfig.httpsAgentOptions);else{var t=f.RequestClient;this.requestClient=new t(this.sasjsConfig.serverUrl,this.sasjsConfig.httpsAgentOptions,this.sasjsConfig.requestHistoryLimit)}this.jobsPath=this.sasjsConfig.pathSAS9,this.authManager=new c.AuthManager(this.sasjsConfig.serverUrl,this.sasjsConfig.serverType,this.requestClient,this.resendWaitingRequests),this.sasjsConfig.serverType===l.ServerType.Sas9&&(this.sas9ApiClient?this.sas9ApiClient.setConfig(this.sasjsConfig.serverUrl):this.sas9ApiClient=new u.SAS9ApiClient(this.sasjsConfig.serverUrl,this.jobsPath,this.sasjsConfig.httpsAgentOptions)),this.fileUploader=new p.FileUploader(this.sasjsConfig.serverUrl,this.sasjsConfig.serverType,this.jobsPath,this.requestClient),this.sas9JobExecutor=new p.Sas9JobExecutor(this.sasjsConfig.serverUrl,this.sasjsConfig.serverType,this.jobsPath,this.requestClient,this.sasjsConfig.httpsAgentOptions)},e}();t.default=y},1381:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.AuthManager=void 0;var i=r(5928),s=r(1170),a=r(5418),u=r(4582),c=function(){function e(e,t,r,n){var o=this;this.serverUrl=e,this.serverType=t,this.requestClient=r,this.loginCallback=n,this.userName="",this.userLongName="",this.redirectedLoginUrl="/SASLogon/home",this.extractUserName=function(e){return""},this.extractUserLongName=function(e){return(0,s.extractUserLongNameSas9)(e)},this.setLoginUrl=function(e){var t=e[1].replace(/\?.*/,"");if("/"===t[0]){t=t.substr(1);var r=o.serverUrl?"".concat(o.serverUrl,"/").concat(t):"".concat(t);o.loginUrl=r.replace("/SASLogon/login.do","/SASLogon/login")}},this.loginUrl="/SASLogon/login",this.logoutUrl="/SASLogon/logout?"}return e.prototype.redirectedLogIn=function(e){var t=e.onLoggedOut;return n(this,void 0,void 0,(function(){var e,r,n,i,s,c,l,f,p;return o(this,(function(o){switch(o.label){case 0:return[4,this.fetchUserName()];case 1:return e=o.sent(),r=e.isLoggedIn,n=e.userName,i=e.userLongName,r?[4,this.loginCallback()]:[3,3];case 2:return o.sent(),[2,{isLoggedIn:!0,userName:n,userLongName:i}];case 3:return[4,(0,a.openWebPage)(this.redirectedLoginUrl,"SASLogon",{width:500,height:600},t)];case 4:return(s=o.sent())?[4,(0,u.verifySas9Login)(s)]:[2,{isLoggedIn:!1,userName:"",userLongName:""}];case 5:return c=o.sent().isLoggedIn,s.close(),c?[4,this.performCASSecurityCheck()]:[3,9];case 6:return o.sent(),[4,this.fetchUserName()];case 7:return l=o.sent(),f=l.userName,p=l.userLongName,[4,this.loginCallback()];case 8:return o.sent(),[2,{isLoggedIn:!0,userName:f,userLongName:p}];case 9:return[2,{isLoggedIn:!1,userName:"",userLongName:""}]}}))}))},e.prototype.logIn=function(e,t){return n(this,void 0,void 0,(function(){var r,n,i,s,a,u,c,p,h;return o(this,(function(o){switch(o.label){case 0:return r={_service:"default",username:e,password:t},this.userName="",this.userLongName="",[4,this.checkSession()];case 1:return n=o.sent(),i=n.isLoggedIn,s=n.loginForm,a=n.userLongName,i?[4,this.loginCallback()]:[3,3];case 2:return o.sent(),this.userName=r.username,this.userLongName=a,[2,{isLoggedIn:!0,userName:this.userName,userLongName:this.userLongName}];case 3:return[4,this.sendLoginRequest(s,r)];case 4:return u=o.sent(),(c=f(this.serverType,u))?[3,9]:l(u)?[4,this.getLoginForm(u)]:[3,7];case 5:return p=o.sent(),[4,this.sendLoginRequest(p,r)];case 6:u=o.sent(),o.label=7;case 7:return[4,this.checkSession()];case 8:h=o.sent(),c=h.isLoggedIn,this.userLongName=h.userLongName,o.label=9;case 9:return c?[4,this.performCASSecurityCheck()]:[3,11];case 10:o.sent(),this.loginCallback(),this.userName=r.username,o.label=11;case 11:return[2,{isLoggedIn:c,userName:this.userName,userLongName:this.userLongName}]}}))}))},e.prototype.performCASSecurityCheck=function(){return n(this,void 0,void 0,(function(){var e;return o(this,(function(t){switch(t.label){case 0:return e="".concat(this.serverUrl,"/SASStoredProcess/j_spring_cas_security_check"),[4,this.requestClient.get("/SASLogon/login?service=".concat(e),void 0)];case 1:return t.sent(),[2]}}))}))},e.prototype.sendLoginRequest=function(e,t){return n(this,void 0,void 0,(function(){var r,n;return o(this,(function(o){switch(o.label){case 0:for(r in e)t[r]=e[r];return n=(0,i.serialize)(t),[4,this.requestClient.post(this.loginUrl,n,void 0,"text/plain",{"Content-Type":"application/x-www-form-urlencoded",Accept:"*/*"})];case 1:return[2,o.sent().result]}}))}))},e.prototype.checkSession=function(){return n(this,void 0,void 0,(function(){var e,t,r,n,i;return o(this,(function(o){switch(o.label){case 0:return[4,this.fetchUserName()];case 1:return e=o.sent(),t=e.isLoggedIn,r=e.userName,n=e.userLongName,i=null,t?[3,4]:[4,this.logOut()];case 2:return o.sent(),[4,this.getNewLoginForm()];case 3:i=o.sent(),o.label=4;case 4:return[2,Promise.resolve({isLoggedIn:t,userName:r,userLongName:n,loginForm:i})]}}))}))},e.prototype.getNewLoginForm=function(){return n(this,void 0,void 0,(function(){var e;return o(this,(function(t){switch(t.label){case 0:return[4,this.requestClient.get(this.loginUrl.replace("/SASLogon/login.do","/SASLogon/login"),void 0,"text/plain")];case 1:return e=t.sent().result,[4,this.getLoginForm(e)];case 2:return[2,t.sent()]}}))}))},e.prototype.fetchUserName=function(){return n(this,void 0,void 0,(function(){var e,t,r;return o(this,(function(n){switch(n.label){case 0:return e="".concat(this.serverUrl,"/SASStoredProcess"),[4,this.requestClient.get(e,void 0,"text/plain").catch((function(e){return{result:"authErr"}}))];case 1:return t=n.sent().result,(r="authErr"!==t)?[3,3]:[4,this.logOut()];case 2:return n.sent(),[2,{isLoggedIn:r,userName:"",userLongName:""}];case 3:return[2,{isLoggedIn:r,userName:this.extractUserName(t),userLongName:this.extractUserLongName(t)}]}}))}))},e.prototype.getLoginForm=function(e){var t=/<form.+action="(.*Logon[^"]*).*>/.exec(e),r={};if(t&&t.length){this.setLoginUrl(t);var n=e.match(/<input.*"hidden"[^>]*>/g);n&&n.forEach((function(e){var t=e.match(/name="([^"]*)"\svalue="([^"]*)/);t&&t.length&&(r[t[1]]=t[2])}))}return Object.keys(r).length?r:null},e.prototype.logOut=function(){return n(this,void 0,void 0,(function(){return o(this,(function(e){return this.requestClient.clearCsrfTokens(),[2,this.requestClient.get(this.logoutUrl,void 0).then((function(){return!0}))]}))}))},e}();t.AuthManager=c;var l=function(e){return/An error occurred while the system was verifying your credentials. Please enter your credentials again./gm.test(e)},f=function(e,t){return/You have signed in/gm.test(t)}},2851:function(e,t,r){"use strict";var n=r(5108),o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.AuthManager=void 0;var s=r(3900),a=r(5928),u=r(1170),c=r(5418),l=r(4582),f=r(6547),p=function(){function e(e,t,r,o){var i=this;this.serverUrl=e,this.serverType=t,this.requestClient=r,this.loginCallback=o,this.userName="",this.userLongName="",this.redirectedLoginUrl="/SASLogon/home",this.extractUserName=function(e){switch(i.serverType){case s.ServerType.SasViya:return null==e?void 0:e.id;case s.ServerType.Sas9:return"";case s.ServerType.Sasjs:return null==e?void 0:e.username;default:return n.error("Server Type not found in extractUserName function"),""}},this.extractUserLongName=function(e){switch(i.serverType){case s.ServerType.SasViya:return null==e?void 0:e.name;case s.ServerType.Sas9:return(0,u.extractUserLongNameSas9)(e);case s.ServerType.Sasjs:return null==e?void 0:e.displayName;default:return n.error("Server Type not found in extractUserName function"),""}},this.setLoginUrl=function(e){var t=e[1].replace(/\?.*/,"");if("/"===t[0]){t=t.substr(1);var r=i.serverUrl?"".concat(i.serverUrl,"/").concat(t):"".concat(t),n=r;i.loginUrl=i.serverType===s.ServerType.SasViya?r:n.replace("/SASLogon/login.do","/SASLogon/login")}},this.loginUrl="/SASLogon/login",this.logoutUrl=this.serverType===s.ServerType.Sas9?"/SASLogon/logout?":this.serverType===s.ServerType.SasViya?"/SASLogon/logout.do?":"/SASLogon/logout"}return e.prototype.redirectedLogIn=function(e){var t=e.onLoggedOut;return o(this,void 0,void 0,(function(){var e,r,n,o,a,u,p,h,d,y;return i(this,(function(i){switch(i.label){case 0:return[4,this.fetchUserName()];case 1:return e=i.sent(),r=e.isLoggedIn,n=e.userName,o=e.userLongName,r?[4,this.loginCallback()]:[3,3];case 2:return i.sent(),[2,{isLoggedIn:!0,userName:n,userLongName:o}];case 3:return[4,(0,c.openWebPage)(this.redirectedLoginUrl,"SASLogon",{width:500,height:600},t)];case 4:return(a=i.sent())?this.serverType!==s.ServerType.SasViya?[3,6]:[4,(0,f.verifySasViyaLogin)(a)]:[2,{isLoggedIn:!1,userName:"",userLongName:""}];case 5:return p=i.sent(),[3,8];case 6:return[4,(0,l.verifySas9Login)(a)];case 7:p=i.sent(),i.label=8;case 8:return u=p.isLoggedIn,a.close(),u?this.serverType!==s.ServerType.Sas9?[3,10]:[4,this.performCASSecurityCheck()]:[3,13];case 9:i.sent(),i.label=10;case 10:return[4,this.fetchUserName()];case 11:return h=i.sent(),d=h.userName,y=h.userLongName,[4,this.loginCallback()];case 12:return i.sent(),[2,{isLoggedIn:!0,userName:d,userLongName:y}];case 13:return[2,{isLoggedIn:!1,userName:"",userLongName:""}]}}))}))},e.prototype.logIn=function(e,t){return o(this,void 0,void 0,(function(){var r,n,o,a,u,c,l,f,p;return i(this,(function(i){switch(i.label){case 0:return r={_service:"default",username:e,password:t},this.userName="",this.userLongName="",[4,this.checkSession()];case 1:return n=i.sent(),o=n.isLoggedIn,a=n.loginForm,u=n.userLongName,o?[4,this.loginCallback()]:[3,3];case 2:return i.sent(),this.userName=r.username,this.userLongName=u,[2,{isLoggedIn:!0,userName:this.userName,userLongName:this.userLongName}];case 3:return[4,this.sendLoginRequest(a,r)];case 4:return c=i.sent(),(l=d(this.serverType,c))?[3,9]:h(c)?[4,this.getLoginForm(c)]:[3,7];case 5:return f=i.sent(),[4,this.sendLoginRequest(f,r)];case 6:c=i.sent(),i.label=7;case 7:return[4,this.checkSession()];case 8:p=i.sent(),l=p.isLoggedIn,this.userLongName=p.userLongName,i.label=9;case 9:return l?this.serverType!==s.ServerType.Sas9?[3,11]:[4,this.performCASSecurityCheck()]:[3,12];case 10:i.sent(),i.label=11;case 11:this.loginCallback(),this.userName=r.username,i.label=12;case 12:return[2,{isLoggedIn:l,userName:this.userName,userLongName:this.userLongName}]}}))}))},e.prototype.performCASSecurityCheck=function(){return o(this,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return e="".concat(this.serverUrl,"/SASStoredProcess/j_spring_cas_security_check"),[4,this.requestClient.get("/SASLogon/login?service=".concat(e),void 0)];case 1:return t.sent(),[2]}}))}))},e.prototype.sendLoginRequest=function(e,t){return o(this,void 0,void 0,(function(){var r,n,o,u;return i(this,(function(i){switch(i.label){case 0:return this.serverType!==s.ServerType.Sasjs?[3,2]:(r=t.username,n=t.password,[4,this.requestClient.post(this.loginUrl,{username:r,password:n},void 0)]);case 1:return[2,i.sent().result];case 2:for(o in e)t[o]=e[o];return u=(0,a.serialize)(t),[4,this.requestClient.post(this.loginUrl,u,void 0,"text/plain",{"Content-Type":"application/x-www-form-urlencoded",Accept:"*/*"})];case 3:return[2,i.sent().result]}}))}))},e.prototype.checkSession=function(){return o(this,void 0,void 0,(function(){var e,t,r,n,o;return i(this,(function(i){switch(i.label){case 0:return[4,this.fetchUserName()];case 1:return e=i.sent(),t=e.isLoggedIn,r=e.userName,n=e.userLongName,o=null,t?[3,4]:[4,this.logOut()];case 2:return i.sent(),[4,this.getNewLoginForm()];case 3:o=i.sent(),i.label=4;case 4:return[2,Promise.resolve({isLoggedIn:t,userName:r,userLongName:n,loginForm:o})]}}))}))},e.prototype.getNewLoginForm=function(){return o(this,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return this.serverType===s.ServerType.Sasjs?[2,this.requestClient.get("/",void 0).then((function(e){var t,r=e.result,n=null===(t=/<script>document.cookie = '(XSRF-TOKEN=.*; Max-Age=86400; SameSite=Strict; Path=\/;)'<\/script>/.exec(r))||void 0===t?void 0:t[1];n&&(document.cookie=n)}))]:[4,this.requestClient.get(this.loginUrl.replace("/SASLogon/login.do","/SASLogon/login"),void 0,"text/plain")];case 1:return e=t.sent().result,[4,this.getLoginForm(e)];case 2:return[2,t.sent()]}}))}))},e.prototype.fetchUserName=function(){return o(this,void 0,void 0,(function(){var e,t,r;return i(this,(function(n){switch(n.label){case 0:return e=this.serverType===s.ServerType.SasViya?"".concat(this.serverUrl,"/identities/users/@currentUser"):this.serverType===s.ServerType.Sas9?"".concat(this.serverUrl,"/SASStoredProcess"):"".concat(this.serverUrl,"/SASjsApi/session"),[4,this.requestClient.get(e,void 0,"text/plain").catch((function(e){return{result:"authErr"}}))];case 1:return t=n.sent().result,(r="authErr"!==t)?[3,3]:[4,this.logOut()];case 2:return n.sent(),[2,{isLoggedIn:r,userName:"",userLongName:""}];case 3:return[2,{isLoggedIn:r,userName:this.extractUserName(t),userLongName:this.extractUserLongName(t)}]}}))}))},e.prototype.getLoginForm=function(e){var t=/<form.+action="(.*Logon[^"]*).*>/.exec(e),r={};if(t&&t.length){this.setLoginUrl(t);var n=e.match(/<input.*"hidden"[^>]*>/g);n&&n.forEach((function(e){var t=e.match(/name="([^"]*)"\svalue="([^"]*)/);t&&t.length&&(r[t[1]]=t[2])}))}return Object.keys(r).length?r:null},e.prototype.logOut=function(){return o(this,void 0,void 0,(function(){return i(this,(function(e){return this.requestClient.clearCsrfTokens(),[2,this.requestClient.get(this.logoutUrl,void 0).then((function(){return!0}))]}))}))},e}();t.AuthManager=p;var h=function(e){return/An error occurred while the system was verifying your credentials. Please enter your credentials again./gm.test(e)},d=function(e,t){return e===s.ServerType.Sasjs?null==t?void 0:t.loggedin:/You have signed in/gm.test(t)}},1527:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(2851),t),o(r(9097),t),o(r(9166),t)},9097:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isAuthorizeFormRequired=void 0;t.isAuthorizeFormRequired=function(e){return/<form.+action="(.*Logon\/oauth\/authorize[^"]*).*>/gm.test(e)}},9166:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isLogInRequired=void 0;t.isLogInRequired=function(e){return/<form.+action="(.*Logon[^"]*).*>/gm.test(e)}},5418:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.openWebPage=void 0;var i=r(1210),s={width:500,height:600};t.openWebPage=function(e,t,r,a){return void 0===t&&(t=""),void 0===r&&(r=s),n(this,void 0,void 0,(function(){var n,s,u,c,l;return o(this,(function(o){switch(o.label){case 0:return n=r.width,s=r.height,u=screen.width/2-n/2,c=screen.height/2-s/2,(l=window.open(e,t,"toolbar=0,location=0,menubar=0,width=".concat(n,",height=").concat(s,",left=").concat(u,",top=").concat(c)))?[3,2]:[4,(null!=a?a:i.openLoginPrompt)()];case 1:return[2,o.sent()?window.open(e,t,"toolbar=0,location=0,menubar=0,width=".concat(n,",height=").concat(s,",left=").concat(u,",top=").concat(c)):null];case 2:return[2,l]}}))}))}},4582:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.verifySas9Login=void 0;var i=r(5928);t.verifySas9Login=function(e){return n(this,void 0,void 0,(function(){var t,r,n;return o(this,(function(o){switch(o.label){case 0:t=!1,r=new Date,n=0,o.label=1;case 1:return[4,(0,i.delay)(1e3)];case 2:if(o.sent(),e.closed)return[3,4];t=e.window.location.href.includes("SASLogon")&&e.window.document.body.innerText.includes("You have signed in."),n=((new Date).valueOf()-r.valueOf())/1e3,o.label=3;case 3:if(!t&&n<300)return[3,1];o.label=4;case 4:return[2,{isLoggedIn:t}]}}))}))}},6547:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.isLoggedInSASVIYA=t.verifySasViyaLogin=void 0;var i=r(5928);t.verifySasViyaLogin=function(e){var r,s;return n(this,void 0,void 0,(function(){var n,a,u,c;return o(this,(function(o){switch(o.label){case 0:n=!1,a=new Date,u=0,o.label=1;case 1:return[4,(0,i.delay)(1e3)];case 2:if(o.sent(),e.closed)return[3,4];n=(0,t.isLoggedInSASVIYA)(),u=((new Date).valueOf()-a.valueOf())/1e3,o.label=3;case 3:if(!n&&u<300)return[3,1];o.label=4;case 4:c=!1,a=new Date,o.label=5;case 5:return[4,(0,i.delay)(1e3)];case 6:if(o.sent(),e.closed)return[3,8];c=e.window.location.href.includes("SASLogon")||(null===(s=null===(r=e.window.document.body)||void 0===r?void 0:r.innerText)||void 0===s?void 0:s.includes("You have signed in.")),u=((new Date).valueOf()-a.valueOf())/1e3,o.label=7;case 7:if(!c&&u<300)return[3,5];o.label=8;case 8:return[2,{isLoggedIn:n&&c}]}}))}))};t.isLoggedInSASVIYA=function(){return document.cookie.includes("Current-User")&&document.cookie.includes("userId")}},4037:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateFileUploadForm=void 0;var n=r(6230),o=r(2402);t.generateFileUploadForm=function(e,t){for(var r in t)if(Array.isArray(t[r])){var i=r,s=(0,o.convertToCSV)(t,r);if("ERROR: LARGE STRING LENGTH"===s)throw new Error("The max length of a string value in SASjs is 32765 characters.");if("undefined"==typeof FormData&&e instanceof n)e.append(i,s,{filename:"".concat(i,".csv"),contentType:"application/csv"});else{var a=new Blob([s],{type:"application/csv"});e.append(i,a,"".concat(i,".csv"))}}return e}},2170:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateTableUploadForm=void 0;var n=r(2402),o=r(4799);t.generateTableUploadForm=function(e,t){var r=[],i={},s=0;for(var a in t){s++,(0,n.isFormatsTable)(a)||r.push(a);var u=(0,n.convertToCSV)(t,a);if("ERROR: LARGE STRING LENGTH"===u)throw new Error("The max length of a string value in SASjs is 32765 characters.");if(u.length>16e3)(0,o.splitChunks)(u).map((function(t){e.append("sasjs".concat(s,"data"),t)}));else i["sasjs".concat(s,"data")]=u}return i.sasjs_tables=r.join(" "),{formData:e,requestParams:i}}},9576:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0});var i=r(387);o(r(1230),t),o(r(1395),t),o(r(8306),t),t.default=i.default},1570:function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.ComputeJobExecutor=void 0;var a=r(3900),u=r(1395),c=function(e){function t(t,r){var n=e.call(this,t,a.ServerType.SasViya)||this;return n.sasViyaApiClient=r,n}return o(t,e),t.prototype.execute=function(e,t,r,n,o){return i(this,void 0,void 0,(function(){var a,c,l=this;return s(this,(function(f){return a=n||function(){return Promise.resolve()},!0,!0,c=new Promise((function(c,f){var p;null===(p=l.sasViyaApiClient)||void 0===p||p.executeComputeJob(e,r.contextName,r.debug,t,o,true,true).then((function(t){l.sasViyaApiClient.appendRequest(t,e,r.debug),c(t.result)})).catch((function(o){return i(l,void 0,void 0,(function(){var i=this;return s(this,(function(s){switch(s.label){case 0:return o instanceof u.ComputeJobExecutionError&&(this.sasViyaApiClient.appendRequest(o,e,r.debug),f(new u.ErrorResponse(null==o?void 0:o.message,o))),o instanceof u.LoginRequiredError?(this.appendWaitingRequest((function(){return i.execute(e,t,r,n).then((function(e){c(e)}),(function(e){f(e)}))})),[4,a()]):[3,2];case 1:return s.sent(),[3,3];case 2:f(new u.ErrorResponse(null==o?void 0:o.message,o)),s.label=3;case 3:return[2]}}))}))}))})),[2,c]}))}))},t}(r(6118).BaseJobExecutor);t.ComputeJobExecutor=c},3491:function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FileUploader=void 0;var a=r(5928),u=r(1395),c=r(3900),l=function(e){function t(t,r,n,o){var i=e.call(this,t,r)||this;return i.jobsPath=n,i.requestClient=o,i}return o(t,e),t.prototype.execute=function(e,t,r,n){return i(this,void 0,void 0,(function(){var o,l,f,p,h,d,y,g,v,b,m,w,S,O,_=this;return s(this,(function(E){if(o=t.files,l=t.params,f=n||function(){return Promise.resolve()},!(null==o?void 0:o.length))throw new u.ErrorResponse("At least one file must be provided.");if(!e||""===e)throw new u.ErrorResponse("sasJob must be provided.");for(h in p="",l)l.hasOwnProperty(h)&&(p+="&".concat(h,"=").concat(l[h]));for(d=r.appLoc?r.appLoc.replace(/\/?$/,"/")+e.replace(/^\//,""):e,y="".concat(this.jobsPath,"/?").concat("_program="+d).concat(p),g=new FormData,v=0,b=o;v<b.length;v++)m=b[v],g.append("file",m.file,m.fileName);return(w=this.requestClient.getCsrfToken("file"))&&g.append("_csrf",w.value),r.debug&&g.append("_debug","131"),r.serverType===c.ServerType.SasViya&&r.contextName&&g.append("_contextname",r.contextName),S={"cache-control":"no-cache",Accept:"*/*","Content-Type":"text/plain"},O=new Promise((function(o,l){_.requestClient.post(y,g,void 0,"application/json",S).then((function(t){return i(_,void 0,void 0,(function(){var n;return s(this,(function(i){switch(i.label){case 0:if(this.requestClient.appendRequest(t,e,r.debug),n=t.result,!r.debug)return[3,5];switch(this.serverType){case c.ServerType.SasViya:return[3,1];case c.ServerType.Sas9:return[3,3]}return[3,4];case 1:return[4,(0,a.parseSasViyaDebugResponse)(t.result,this.requestClient,r.serverUrl)];case 2:return n=i.sent(),[3,4];case 3:return n="string"==typeof t.result?(0,a.parseWeboutResponse)(t.result,y):t.result,[3,4];case 4:return[3,6];case 5:this.serverType!==c.ServerType.Sasjs&&(n="string"==typeof t.result?(0,a.getValidJson)(t.result):t.result),i.label=6;case 6:return o(n),[2]}}))}))})).catch((function(a){return i(_,void 0,void 0,(function(){var i=this;return s(this,(function(s){switch(s.label){case 0:return a instanceof u.JobExecutionError&&(this.requestClient.appendRequest(a,e,r.debug),l(new u.ErrorResponse(null==a?void 0:a.message,a))),a instanceof u.LoginRequiredError?(this.appendWaitingRequest((function(){return i.execute(e,t,r,n).then((function(e){o(e)}),(function(e){l(e)}))})),[4,f()]):[3,2];case 1:return s.sent(),[3,3];case 2:l(new u.ErrorResponse("File upload request failed.",a)),s.label=3;case 3:return[2]}}))}))}))})),[2,O]}))}))},t}(r(6118).BaseJobExecutor);t.FileUploader=l},4446:function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.JesJobExecutor=void 0;var a=r(3900),u=r(1395),c=r(6118),l=r(5928),f=function(e){function t(t,r){var n=e.call(this,t,a.ServerType.SasViya)||this;return n.sasViyaApiClient=r,n}return o(t,e),t.prototype.execute=function(e,t,r,n,o,a){return void 0===a&&(a=[]),i(this,void 0,void 0,(function(){var c,f,p=this;return s(this,(function(h){return c=n||function(){return Promise.resolve()},f=new Promise((function(f,h){var d;null===(d=p.sasViyaApiClient)||void 0===d||d.executeJob(e,r.contextName,r.debug,t,o).then((function(t){p.sasViyaApiClient.appendRequest(t,e,r.debug);var n=(0,l.appendExtraResponseAttributes)(t,a);f(n)})).catch((function(l){return i(p,void 0,void 0,(function(){var i=this;return s(this,(function(s){switch(s.label){case 0:return l instanceof u.JobExecutionError&&(this.sasViyaApiClient.appendRequest(l,e,r.debug),h(new u.ErrorResponse(null==l?void 0:l.message,l))),l instanceof u.LoginRequiredError?(this.appendWaitingRequest((function(){return i.execute(e,t,r,n,o,a).then((function(e){f(e)}),(function(e){h(e)}))})),[4,c()]):[3,2];case 1:return s.sent(),[3,3];case 2:h(new u.ErrorResponse(null==l?void 0:l.message,l)),s.label=3;case 3:return[2]}}))}))}))})),[2,f]}))}))},t}(c.BaseJobExecutor);t.JesJobExecutor=f},6118:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.BaseJobExecutor=void 0;var i=r(5928),s=function(){function e(e,t){var r=this;this.serverUrl=e,this.serverType=t,this.waitingRequests=[],this.resendWaitingRequests=function(){return n(r,void 0,void 0,(function(){var e=this;return o(this,(function(t){switch(t.label){case 0:return[4,(0,i.asyncForEach)(this.waitingRequests,(function(t){return n(e,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return[4,t()];case 1:return e.sent(),[2]}}))}))}))];case 1:return t.sent(),this.waitingRequests=[],[2]}}))}))}}return e.prototype.appendWaitingRequest=function(e){this.waitingRequests.push(e)},e.prototype.getRequestParams=function(e){var t={};return e.debug&&(t._omittextlog="false",t._omitsessionresults="false",t._debug=131),t},e}();t.BaseJobExecutor=s},2693:function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)},s=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.Sas9JobExecutor=void 0;var u=r(6230),c=r(1395),l=r(5928),f=r(6118),p=r(795),h=function(e){function t(t,r,n,o,i){var s=e.call(this,t,r)||this;return s.jobsPath=n,s.requestClient=o,s.sas9RequestClient=new p.Sas9RequestClient(t,i),s}return o(t,e),t.prototype.execute=function(e,t,r){return s(this,void 0,void 0,(function(){var n,o,s,f,p,h,y=this;return a(this,(function(a){switch(a.label){case 0:if(n=(0,l.isRelativePath)(e)&&r.appLoc?r.appLoc.replace(/\/?$/,"/")+e.replace(/^\//,""):e,o="".concat(r.serverUrl).concat(this.jobsPath,"?").concat("_program="+n),o="".concat(o).concat(r.username&&r.password?"&_username="+r.username+"&_password="+r.password:""),o="".concat(o).concat(r.debug?"&_debug=131":""),s=i({},this.getRequestParams(r)),f=new u,t)try{f=d(f,t)}catch(e){return[2,Promise.reject(new c.ErrorResponse(null==e?void 0:e.message,e))]}else t="";for(p in s)s.hasOwnProperty(p)&&f.append(p,s[p]);return[4,this.sas9RequestClient.login(r.username,r.password,this.jobsPath)];case 1:return a.sent(),h=t&&Object.keys(t).length?"multipart/form-data; boundary="+f._boundary:"text/plain",[2,new Promise((function(t,n){return y.sas9RequestClient.post(o,f,void 0,h,{Accept:"*/*",Connection:"Keep-Alive"}).then((function(n){y.requestClient.appendRequest(n,e,r.debug),t(n)})).catch((function(t){var o=t;t.result&&""!==t.result?o=t.result:t.message&&(o=t.message),y.requestClient.appendRequest(o,e,r.debug),n(new c.ErrorResponse(null==t?void 0:t.message,t))}))}))]}}))}))},t.prototype.getRequestParams=function(e){var t={};return e.debug&&(t._debug=131),t},t}(f.BaseJobExecutor);t.Sas9JobExecutor=h;var d=function(e,t){for(var r in t){var n=r,o=(0,l.convertToCSV)(t,r);if("ERROR: LARGE STRING LENGTH"===o)throw new Error("The max length of a string value in SASjs is 32765 characters.");e.append(n,o,{filename:"".concat(n,".csv"),contentType:"application/csv"})}return e}},1065:function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)},s=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.SasjsJobExecutor=void 0;var u=r(6230),c=r(3900),l=r(1395),f=r(4037),p=r(5928),h=function(e){function t(t,r,n){var o=e.call(this,t,c.ServerType.Sasjs)||this;return o.jobsPath=r,o.requestClient=n,o}return o(t,e),t.prototype.execute=function(e,t,r,n,o,c){return void 0===c&&(c=[]),s(this,void 0,void 0,(function(){var h,d,y,g,v,b,m,w,S=this;return a(this,(function(O){if(h=n,d=(0,p.isRelativePath)(e)&&r.appLoc?r.appLoc.replace(/\/?$/,"/")+e.replace(/^\//,""):e,y="".concat(r.serverUrl).concat(this.jobsPath,"/?").concat("_program="+d),g=i({},this.getRequestParams(r)),v="undefined"==typeof FormData?new u:new FormData,t)try{v=(0,f.generateFileUploadForm)(v,t)}catch(e){return[2,Promise.reject(new l.ErrorResponse(null==e?void 0:e.message,e))]}for(b in g)g.hasOwnProperty(b)&&v.append(b,g[b]);return m=v instanceof u&&"undefined"==typeof FormData?"multipart/form-data; boundary=".concat(v.getBoundary()):void 0,w=new Promise((function(i,u){S.requestClient.post(y,v,null==o?void 0:o.access_token,m).then((function(t){return s(S,void 0,void 0,(function(){var n;return a(this,(function(o){if(Object.entries(t.result).length<1)throw new l.JobExecutionError(0,"No webout was returned by job ".concat(d,".  Please check the SAS log for more info."),t.log);return this.requestClient.appendRequest(t,e,r.debug),n=(0,p.appendExtraResponseAttributes)(t,c),i(n),[2]}))}))})).catch((function(f){return s(S,void 0,void 0,(function(){var s=this;return a(this,(function(a){switch(a.label){case 0:return f instanceof l.JobExecutionError&&(this.requestClient.appendRequest(f,e,r.debug),u(new l.ErrorResponse(null==f?void 0:f.message,f))),f instanceof l.LoginRequiredError?(n||u(new l.ErrorResponse("Request is not authenticated. Make sure .env file exists with valid credentials.",f)),this.appendWaitingRequest((function(){return s.execute(e,t,r,n,o,c).then((function(e){i(e)}),(function(e){u(e)}))})),h?[4,h()]:[3,2]):[3,3];case 1:a.sent(),a.label=2;case 2:return[3,4];case 3:u(new l.ErrorResponse(null==f?void 0:f.message,f)),a.label=4;case 4:return[2]}}))}))}))})),[2,w]}))}))},t}(r(6118).BaseJobExecutor);t.SasjsJobExecutor=h},6084:function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)},s=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.WebJobExecutor=void 0;var u=r(6230),c=r(3900),l=r(1395),f=r(4037),p=r(2170),h=r(5928),d=r(6118),y=r(2813),g=function(e){function t(t,r,n,o,i){var s=e.call(this,t,r)||this;return s.jobsPath=n,s.requestClient=o,s.sasViyaApiClient=i,s}return o(t,e),t.prototype.execute=function(e,t,r,n,o,d){return void 0===d&&(d=[]),s(this,void 0,void 0,(function(){var g,v,b,m,w,S,O,_,E,x,j,A,C,P,T=this;return a(this,(function(k){switch(k.label){case 0:if(g=n,v=(0,h.isRelativePath)(e)&&r.appLoc?r.appLoc.replace(/\/?$/,"/")+e.replace(/^\//,""):e,b="".concat(r.serverUrl).concat(this.jobsPath,"/?").concat("_program="+v),r.serverType!==c.ServerType.SasViya)return[3,5];m=void 0,k.label=1;case 1:return k.trys.push([1,3,,4]),[4,this.getJobUri(e)];case 2:return m=k.sent(),[3,4];case 3:return w=k.sent(),[2,new Promise((function(i,u){return s(T,void 0,void 0,(function(){var s=this;return a(this,(function(a){switch(a.label){case 0:return w instanceof l.LoginRequiredError?(this.appendWaitingRequest((function(){return s.execute(e,t,r,n,o,d).then((function(e){i(e)}),(function(e){u(e)}))})),g?[4,g()]:[3,2]):[3,3];case 1:a.sent(),a.label=2;case 2:return[3,4];case 3:u(new l.ErrorResponse(null==w?void 0:w.message,w)),a.label=4;case 4:return[2]}}))}))}))];case 4:b+=m.length>0?"&_job="+m:"",m.length>0&&(b=(b+="&_job="+m).replace("_program=","__program=")),b+=r.contextName&&!/\s/.test(r.contextName)?"&_contextname=".concat(r.contextName):"",k.label=5;case 5:if(S=i({},this.getRequestParams(r)),O="undefined"==typeof FormData?new u:new FormData,t)if(_=JSON.stringify(t),r.serverType===c.ServerType.Sas9||_.length>5e5||_.includes(";"))try{O=(0,f.generateFileUploadForm)(O,t)}catch(e){return[2,Promise.reject(new l.ErrorResponse(null==e?void 0:e.message,e))]}else try{E=(0,p.generateTableUploadForm)(O,t),x=E.formData,j=E.requestParams,O=x,S=i(i({},S),j)}catch(e){return[2,Promise.reject(new l.ErrorResponse(null==e?void 0:e.message,e))]}for(A in S)S.hasOwnProperty(A)&&O.append(A,S[A]);return C=O instanceof u&&"undefined"==typeof FormData?"multipart/form-data; boundary=".concat(O.getBoundary()):void 0,P=new Promise((function(i,u){T.requestClient.post(b,O,null==o?void 0:o.access_token,C).then((function(t){return s(T,void 0,void 0,(function(){var n,o;return a(this,(function(s){switch(s.label){case 0:if(this.requestClient.appendRequest(t,e,r.debug),n=t.result,!r.debug)return[3,4];switch(this.serverType){case c.ServerType.SasViya:return[3,1];case c.ServerType.Sas9:return[3,3]}return[3,4];case 1:return[4,(0,h.parseSasViyaDebugResponse)(t.result,this.requestClient,this.serverUrl)];case 2:return n=s.sent(),[3,4];case 3:return n="string"==typeof t.result?(0,y.parseWeboutResponse)(t.result,b):t.result,[3,4];case 4:return o=(0,h.appendExtraResponseAttributes)({result:n,log:t.log},d),i(o),[2]}}))}))})).catch((function(c){return s(T,void 0,void 0,(function(){var s=this;return a(this,(function(a){switch(a.label){case 0:return c instanceof l.JobExecutionError&&(this.requestClient.appendRequest(c,e,r.debug),u(new l.ErrorResponse(null==c?void 0:c.message,c))),c instanceof l.LoginRequiredError?(n||u(new l.ErrorResponse("Request is not authenticated. Make sure .env file exists with valid credentials.",c)),this.appendWaitingRequest((function(){return s.execute(e,t,r,n,o,d).then((function(e){i(e)}),(function(e){u(e)}))})),g?[4,g()]:[3,2]):[3,3];case 1:a.sent(),a.label=2;case 2:return[3,4];case 3:u(new l.ErrorResponse(null==c?void 0:c.message,c)),a.label=4;case 4:return[2]}}))}))}))})),[2,P]}}))}))},t.prototype.getJobUri=function(e){return s(this,void 0,void 0,(function(){var t,r,n,o,i,s;return a(this,(function(a){switch(a.label){case 0:if(!this.sasViyaApiClient)return[2,""];if(t="",(0,h.isRelativePath)(e)?(o=e.split("/"),r=o.length>1?o[0]:"",n=o.length>1?o[1]:""):(o=e.split("/"),n=o.pop()||"",r=o.join("/")),!n)throw new Error("Job name is empty, null or undefined.");return[4,this.sasViyaApiClient.getJobsInFolder(r)];case 1:return(i=a.sent())&&(s=i.find((function(e){return e.name===n&&"jobDefinition"===e.contentType})))&&(t=s.uri),[2,t]}}))}))},t}(d.BaseJobExecutor);t.WebJobExecutor=g},8217:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(1570),t),o(r(3491),t),o(r(4446),t),o(r(6118),t),o(r(2693),t),o(r(6084),t),o(r(1065),t)},4588:function(e,t,r){"use strict";var n=r(4155),o=r(5108),i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)},s=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.throwIfError=t.RequestClient=void 0;var u=r(8373),c=r(1527),l=r(1395),f=r(2813),p=r(9778),h=r(9526),d=r(5928),y=r(1005),g=function(){function e(e,t,r){var i=this;this.baseUrl=e,this.requests=[],this.requestsLimit=10,this.csrfToken={headerName:"",value:""},this.getRequests=function(){return i.requests},this.clearRequests=function(){i.requests=[]},this.authorize=function(e){return s(i,void 0,void 0,(function(){var t,r,i,s,u,c,l,f,p,h,d,y;return a(this,(function(a){switch(a.label){case 0:for(null,r={},i=e.split("<body>")[1].split("</body>")[0],(s=document.createElement("div")).innerHTML=i,u=s.querySelector("#application_authorization"),t=u?this.baseUrl+u.getAttribute("action"):null,c=null==u?void 0:u.querySelectorAll("input"),l=0,f=c;l<f.length;l++)"user_oauth_approval"===(p=f[l]).name&&(p.value="true"),r[p.name]=p.value;for(y in(h=Object.keys(r).find((function(e){return null==e?void 0:e.toLowerCase().includes("csrf")})))&&(this.csrfToken.value=r[h],this.csrfToken.headerName=this.csrfToken.headerName||"x-csrf-token"),d=new FormData,r)r.hasOwnProperty(y)&&d.append(y,r[y]);if(!t)throw new Error("Auth Form URL is null or undefined.");return[4,this.httpClient.post(t,d,{responseType:"text",headers:{Accept:"*/*","Content-Type":"text/plain"}}).then((function(e){return e.data})).catch((function(e){(n.logger||o).error(e)}))];case 1:return[2,a.sent()]}}))}))},this.getHeaders=function(e,t){var r={};return"application/x-www-form-urlencoded"!==t&&(r["Content-Type"]=t),r.Accept="application/json"===t?"application/json":"*/*",e&&(r.Authorization="Bearer ".concat(e)),i.csrfToken.headerName&&i.csrfToken.value&&(r[i.csrfToken.headerName]=i.csrfToken.value),r},this.parseAndSetFileUploadCsrfToken=function(e){var t=i.parseCsrfToken(e);t&&(i.fileUploadCsrfToken=t)},this.parseAndSetCsrfToken=function(e){var t=i.parseCsrfToken(e);t&&(i.csrfToken=t)},this.parseCsrfToken=function(e){var t,r=null===(t=e.headers["x-csrf-header"])||void 0===t?void 0:t.toLowerCase();if(r)return{headerName:r,value:e.headers[r]||""}},this.handleError=function(e,t,r){return void 0===r&&(r=!1),s(i,void 0,void 0,(function(){var n,o;return a(this,(function(i){switch(i.label){case 0:return n=e.response,e instanceof l.AuthorizeError?[4,this.httpClient.get(e.confirmUrl,{responseType:"text",headers:{"Content-Type":"text/plain",Accept:"*/*"}}).catch((function(e){throw(0,p.prefixMessage)(e,"Error while getting error confirmUrl. ")}))]:[3,5];case 1:return o=i.sent(),(0,c.isAuthorizeFormRequired)(null==o?void 0:o.data)?[4,this.authorize(o.data).catch((function(e){throw(0,p.prefixMessage)(e,"Error while authorizing request. ")}))]:[3,3];case 2:i.sent(),i.label=3;case 3:return[4,t().catch((function(e){throw(0,p.prefixMessage)(e,"Error while executing callback in handleError. ")}))];case 4:return[2,i.sent()];case 5:if(e instanceof l.LoginRequiredError)throw this.clearCsrfTokens(),e;return e instanceof y.InvalidSASjsCsrfError?[4,this.httpClient.get("/",{withCredentials:!0}).then((function(e){var t,r=null===(t=/<script>document.cookie = '(XSRF-TOKEN=.*; Max-Age=86400; SameSite=Strict; Path=\/;)'<\/script>/.exec(e.data))||void 0===t?void 0:t[1];r&&(document.cookie=r)})).catch((function(e){throw(0,p.prefixMessage)(e,"Error while re-fetching CSRF token.")}))]:[3,8];case 6:return i.sent(),[4,t().catch((function(e){throw(0,p.prefixMessage)(e,"Error while executing callback in handleError. ")}))];case 7:return[2,i.sent()];case 8:return 403!==(null==n?void 0:n.status)&&449!==(null==n?void 0:n.status)?[3,11]:(this.parseAndSetCsrfToken(n),this.csrfToken.headerName&&this.csrfToken.value?[4,t().catch((function(e){throw(0,p.prefixMessage)(e,"Error while executing callback in handleError. ")}))]:[3,10]);case 9:return[2,i.sent()];case 10:throw e;case 11:if(404===(null==n?void 0:n.status))throw new l.NotFoundError(n.config.url);if(502===(null==n?void 0:n.status)){if(r)throw new l.InternalServerError;return[2]}i.label=12;case 12:if(e.isAxiosError&&"UNABLE_TO_VERIFY_LEAF_SIGNATURE"===e.code)throw new l.CertificateError(e.message);throw e.message?e:(0,p.prefixMessage)(e,"Error while handling error. ")}}))}))},this.createHttpClient(e,t),r&&(this.requestsLimit=r)}return e.prototype.setConfig=function(e,t){this.createHttpClient(e,t)},e.prototype.saveLocalStorageToken=function(e,t){localStorage.setItem("accessToken",e),localStorage.setItem("refreshToken",t)},e.prototype.getCsrfToken=function(e){return void 0===e&&(e="general"),"file"===e?this.fileUploadCsrfToken:this.csrfToken},e.prototype.clearCsrfTokens=function(){this.csrfToken={headerName:"",value:""},this.fileUploadCsrfToken={headerName:"",value:""}},e.prototype.clearLocalStorageTokens=function(){localStorage.setItem("accessToken",""),localStorage.setItem("refreshToken","")},e.prototype.getBaseUrl=function(){return this.httpClient.defaults.baseURL||""},e.prototype.appendRequest=function(e,t,r){var n="",o="",i=null;r&&((null==e?void 0:e.log)?(n=(0,d.parseSourceCode)(e.log),o=(0,d.parseGeneratedCode)(e.log),i=(null==e?void 0:e.result)?e.result.WORK:e.log):(null==e?void 0:e.result)&&("string"==typeof e.result&&(n=(0,d.parseSourceCode)(e.result),o=(0,d.parseGeneratedCode)(e.result)),i=e.result.WORK));var s="string"==typeof(null==e?void 0:e.result)?null==e?void 0:e.result:JSON.stringify(null==e?void 0:e.result,null,2);this.requests.push({logFile:(null==e?void 0:e.log)||s||e,serviceLink:t,timestamp:new Date,sourceCode:n,generatedCode:o,SASWORK:i}),this.requests.length>this.requestsLimit&&this.requests.splice(0,1)},e.prototype.get=function(e,r,n,o,u){return void 0===n&&(n="application/json"),void 0===o&&(o={}),void 0===u&&(u=!1),s(this,void 0,void 0,(function(){var c,l,f=this;return a(this,(function(h){return c=i(i({},this.getHeaders(r,n)),o),l={headers:c,responseType:"text/plain"===n?"text":"json",withCredentials:!0},"text/plain"===n&&(l.transformResponse=void 0),[2,this.httpClient.get(e,l).then((function(e){return(0,t.throwIfError)(e),f.parseResponse(e)})).catch((function(t){return s(f,void 0,void 0,(function(){var i=this;return a(this,(function(s){switch(s.label){case 0:return[4,this.handleError(t,(function(){return i.get(e,r,n,o).catch((function(e){throw(0,p.prefixMessage)(e,"Error while executing handle error callback. ")}))}),u)];case 1:return[2,s.sent()]}}))}))}))]}))}))},e.prototype.post=function(e,r,n,o,u,c){return void 0===o&&(o="application/json"),void 0===u&&(u={}),void 0===c&&(c={}),s(this,void 0,void 0,(function(){var l,f=this;return a(this,(function(p){return l=i(i({},this.getHeaders(n,o)),u),[2,this.httpClient.post(e,r,i({headers:l,withCredentials:!0},c)).then((function(e){return(0,t.throwIfError)(e),f.parseResponse(e)})).catch((function(t){return s(f,void 0,void 0,(function(){var i=this;return a(this,(function(s){switch(s.label){case 0:return[4,this.handleError(t,(function(){return i.post(e,r,n,o,u)}))];case 1:return[2,s.sent()]}}))}))}))]}))}))},e.prototype.put=function(e,r,n,o){return void 0===o&&(o={}),s(this,void 0,void 0,(function(){var u,c=this;return a(this,(function(l){return u=i(i({},this.getHeaders(n,"application/json")),o),[2,this.httpClient.put(e,r,{headers:u,withCredentials:!0}).then((function(e){return(0,t.throwIfError)(e),c.parseResponse(e)})).catch((function(t){return s(c,void 0,void 0,(function(){var i=this;return a(this,(function(s){switch(s.label){case 0:return[4,this.handleError(t,(function(){return i.put(e,r,n,o)}))];case 1:return[2,s.sent()]}}))}))}))]}))}))},e.prototype.delete=function(e,r){return s(this,void 0,void 0,(function(){var n,o=this;return a(this,(function(i){return n=this.getHeaders(r,"application/json"),[2,this.httpClient.delete(e,{headers:n,withCredentials:!0}).then((function(e){return(0,t.throwIfError)(e),o.parseResponse(e)})).catch((function(t){return s(o,void 0,void 0,(function(){var n=this;return a(this,(function(o){switch(o.label){case 0:return[4,this.handleError(t,(function(){return n.delete(e,r)}))];case 1:return[2,o.sent()]}}))}))}))]}))}))},e.prototype.patch=function(e,r,n){return void 0===r&&(r={}),s(this,void 0,void 0,(function(){var o,i=this;return a(this,(function(u){return o=this.getHeaders(n,"application/json"),[2,this.httpClient.patch(e,r,{headers:o,withCredentials:!0}).then((function(e){return(0,t.throwIfError)(e),i.parseResponse(e)})).catch((function(t){return s(i,void 0,void 0,(function(){var o=this;return a(this,(function(i){switch(i.label){case 0:return[4,this.handleError(t,(function(){return o.patch(e,r,n)}))];case 1:return[2,i.sent()]}}))}))}))]}))}))},e.prototype.uploadFile=function(e,t,r){var n;return s(this,void 0,void 0,(function(){var o,i,s;return a(this,(function(a){switch(a.label){case 0:o=this.getHeaders(r,"application/json"),(null===(n=this.fileUploadCsrfToken)||void 0===n?void 0:n.value)&&(o[this.fileUploadCsrfToken.headerName]=this.fileUploadCsrfToken.value),a.label=1;case 1:return a.trys.push([1,3,,4]),[4,this.httpClient.post(e,t,{headers:o,transformRequest:function(e){return e}})];case 2:return[2,{result:(s=a.sent()).data,etag:s.headers.etag}];case 3:if(i=a.sent(),403===(null==(s=i.response)?void 0:s.status)||449===(null==s?void 0:s.status)){if(this.parseAndSetFileUploadCsrfToken(s),this.fileUploadCsrfToken)return[2,this.uploadFile(e,t,r)];throw i}throw i;case 4:return[2]}}))}))},e.prototype.parseResponse=function(e){var t,r=(null==e?void 0:e.headers)?e.headers.etag:"",n=!1;try{t="string"==typeof e.data?JSON.parse(e.data):e.data}catch(r){try{t=JSON.parse((0,f.parseWeboutResponse)(e.data))}catch(r){t=e.data}n=!0}var o={result:t,etag:r,status:e.status};return n&&(o.log=e.data),o},e.prototype.createHttpClient=function(e,t){var r=t?new u.Agent(t):void 0;this.httpClient=(0,d.createAxiosInstance)(e,r),this.httpClient.defaults.validateStatus=function(e){return e>=200&&e<=401}},e}();t.RequestClient=g;t.throwIfError=function(e){var t,r,n,o,i,s,a;switch(e.status){case 400:if("object"==typeof e.data&&"invalid_grant"===e.data.error)throw new l.LoginRequiredError(e.data);if("string"==typeof e.data&&"invalid csrf token!"===e.data.toLowerCase())throw new y.InvalidSASjsCsrfError;break;case 401:throw"object"==typeof e.data?new l.LoginRequiredError(e.data):new l.LoginRequiredError}if(null===(r=null===(t=e.data)||void 0===t?void 0:t.entityID)||void 0===r?void 0:r.includes("login"))throw new l.LoginRequiredError;if("string"==typeof e.data&&(0,c.isAuthorizeFormRequired)(e.data))throw new l.AuthorizeError("Authorization required",e.request.responseURL);if("string"==typeof e.data&&(0,c.isLogInRequired)(e.data)&&!(null===(o=null===(n=e.config)||void 0===n?void 0:n.url)||void 0===o?void 0:o.includes("/SASLogon/login")))throw new l.LoginRequiredError;if(null===(i=e.data)||void 0===i?void 0:i.auth_request){var u=e.request.responseURL;throw new l.AuthorizeError(e.data.message,u)}if(null===(a=null===(s=e.config)||void 0===s?void 0:s.url)||void 0===a?void 0:a.includes("sasAuthError"))throw new h.SAS9AuthError;var f=v(e.data);if(f)throw f};var v=function(e){if(!e)return null;try{var t=JSON.parse(null==e?void 0:e.replace(/[\n\r]/g," "));if(t.errorCode&&t.message)return new l.JobExecutionError(t.errorCode,t.message,null==e?void 0:e.replace(/[\n\r]/g," "))}catch(e){}try{if(null==e?void 0:e.includes('{"errorCode'))if((s=e.split('{"errorCode')).length>1){var r='{"errorCode'+s[1].split('"}')[0]+'"}',n=JSON.parse(r.replace(/[\n\r]/g," "));return new l.JobExecutionError(n.errorCode,n.message,null==e?void 0:e.replace(/[\n\r]/g,"\n"))}}catch(e){}try{if(!!(null==e?void 0:e.match(/stored process not found: /i)))if((s=e.split(/stored process not found: /i)).length>1){var o=s[1].split("<i>")[1].split("</i>")[0],i=o.endsWith("runner")?"SASJS runner not found. Here's the link (https://cli.sasjs.io/auth/#sasjs-runner) to the SAS code for registering the SASjs runner":"Stored process not found: ".concat(o);return new l.JobExecutionError(500,i,"")}}catch(e){}try{var s;if(!(null==e?void 0:e.match(/>>weboutBEGIN<</))&&!!(null==e?void 0:e.match(/Stored Process Error/i))&&!!(null==e?void 0:e.match(/This request completed with errors./i)))if((s=e.split("<h2>SAS Log</h2>")).length>1){var a=s[1].split("<pre>")[1].split("</pre>")[0];i="This request completed with errors.";return new l.JobExecutionError(500,i,a)}}catch(e){}return null}},795:function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)},s=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.Sas9RequestClient=void 0;var u=r(8224),c=r(7857),l=r(9778),f=r(4588),p=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.httpClient.defaults.maxRedirects=0,n.httpClient.defaults.validateStatus=function(e){return e>=200&&e<303},u.default&&((0,u.default)(n.httpClient),n.httpClient.defaults.jar=new c.CookieJar),n}return o(t,e),t.prototype.login=function(e,t,r){return s(this,void 0,void 0,(function(){var n;return a(this,(function(o){switch(o.label){case 0:return n="/User Folders/".concat(e,"/My Folder/sasjs/runner"),this.httpClient.defaults.jar?(this.httpClient.defaults.jar.removeAllCookies(),[4,this.get("".concat(r,"?_program=").concat(n,"&_username=").concat(e,"&_password=").concat(t),void 0,"text/plain")]):[3,2];case 1:o.sent(),o.label=2;case 2:return[2]}}))}))},t.prototype.get=function(e,t,r,n,o){return void 0===r&&(r="application/json"),void 0===n&&(n={}),void 0===o&&(o=!1),s(this,void 0,void 0,(function(){var u,c,p=this;return a(this,(function(h){return u=i(i({},this.getHeaders(t,r)),n),c={headers:u,responseType:"text/plain"===r?"text":"json",withCredentials:!0},"text/plain"===r&&(c.transformResponse=void 0),[2,this.httpClient.get(e,c).then((function(e){return 302===e.status?p.get(e.headers.location,t,r):((0,f.throwIfError)(e),p.parseResponse(e))})).catch((function(i){return s(p,void 0,void 0,(function(){var s=this;return a(this,(function(a){switch(a.label){case 0:return[4,this.handleError(i,(function(){return s.get(e,t,r,n).catch((function(e){throw(0,l.prefixMessage)(e,"Error while executing handle error callback. ")}))}),o).catch((function(e){throw(0,l.prefixMessage)(e,"Error while handling error. ")}))];case 1:return[2,a.sent()]}}))}))}))]}))}))},t.prototype.post=function(e,t,r,n,o){return void 0===n&&(n="application/json"),void 0===o&&(o={}),s(this,void 0,void 0,(function(){var u,c=this;return a(this,(function(l){return u=i(i({},this.getHeaders(r,n)),o),[2,this.httpClient.post(e,t,{headers:u,withCredentials:!0}).then((function(e){return s(c,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return 302!==e.status?[3,2]:[4,this.get(e.headers.location,void 0,n,o)];case 1:return[2,t.sent()];case 2:return(0,f.throwIfError)(e),[2,this.parseResponse(e)]}}))}))})).catch((function(i){return s(c,void 0,void 0,(function(){var s=this;return a(this,(function(a){switch(a.label){case 0:return[4,this.handleError(i,(function(){return s.post(e,t,r,n,o)}))];case 1:return[2,a.sent()]}}))}))}))]}))}))},t}(f.RequestClient);t.Sas9RequestClient=p},470:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4666:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6177:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5766:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4975:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},215:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4782:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4168:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8516:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},3153:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5841:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LoginMechanism=t.SASjsConfig=void 0;var r,n=function(){this.serverUrl="",this.pathSASJS="",this.pathSAS9="",this.pathSASViya="",this.appLoc="",this.serverType=null,this.debug=!0,this.contextName="",this.useComputeApi=null,this.loginMechanism=r.Default,this.requestHistoryLimit=10};t.SASjsConfig=n,function(e){e.Default="Default",e.Redirected="Redirected"}(r=t.LoginMechanism||(t.LoginMechanism={}))},2493:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6038:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},9493:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8650:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},124:function(e,t){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.AuthorizeError=void 0;var o=function(e){function t(r,n){var o=e.call(this,r)||this;return o.message=r,o.confirmUrl=n,o.name="AuthorizeError",Object.setPrototypeOf(o,t.prototype),o}return n(t,e),t}(Error);t.AuthorizeError=o},9465:function(e,t){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.CertificateError=void 0;var o="https://github.com/sasjs/cli/issues/1181#issuecomment-1090638584",i=function(e){function t(r){var n=e.call(this,"".concat(r,"\nPlease visit the link below for further information on this issue:\n- ").concat(o,"\n"))||this;return n.name="CertificateError",Object.setPrototypeOf(n,t.prototype),n}return n(t,e),t}(Error);t.CertificateError=i},5267:function(e,t){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.ComputeJobExecutionError=void 0;var o=function(e){function t(r,n){var o=e.call(this,"Error: Job execution failed")||this;return o.job=r,o.log=n,o.name="ComputeJobExecutionError",Object.setPrototypeOf(o,t.prototype),o}return n(t,e),t}(Error);t.ComputeJobExecutionError=o},9232:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ErrorResponse=void 0;var r=function(e,t,r){var n=t;if("object"!=typeof t)try{n=JSON.parse(t)}catch(e){r=t,n=""}this.error={message:e,details:n,raw:r}};t.ErrorResponse=r},5109:function(e,t){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.InternalServerError=void 0;var o=function(e){function t(){var r=e.call(this,"Error: Internal server error.")||this;return r.name="InternalServerError",Object.setPrototypeOf(r,t.prototype),r}return n(t,e),t}(Error);t.InternalServerError=o},5518:function(e,t){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.InvalidJsonError=void 0;var o=function(e){function t(){var r=e.call(this,"Error: invalid Json string")||this;return r.name="InvalidJsonError",Object.setPrototypeOf(r,t.prototype),r}return n(t,e),t}(Error);t.InvalidJsonError=o},1005:function(e,t){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.InvalidSASjsCsrfError=void 0;var o=function(e){function t(){var r=this;return(r=e.call(this,"Auth error: ".concat("Invalid CSRF token!"))||this).name="InvalidSASjsCsrfError",Object.setPrototypeOf(r,t.prototype),r}return n(t,e),t}(Error);t.InvalidSASjsCsrfError=o},8531:function(e,t){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.JobExecutionError=void 0;var o=function(e){function t(r,n,o){var i=e.call(this,"Error Code ".concat(r,": ").concat(n))||this;return i.errorCode=r,i.errorMessage=n,i.result=o,i.name="JobExecutionError",Object.setPrototypeOf(i,t.prototype),i}return n(t,e),t}(Error);t.JobExecutionError=o},9079:function(e,t){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.JobStatePollError=void 0;var o=function(e){function t(r,n){var o=e.call(this,"Error while polling job state for job ".concat(r,": ").concat(n.message||n))||this;return o.originalError=n,o.name="JobStatePollError",Object.setPrototypeOf(o,t.prototype),o}return n(t,e),t}(Error);t.JobStatePollError=o},3096:function(e,t){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.JsonParseArrayError=void 0;var o=function(e){function t(){var r=e.call(this,"Can not parse array object to json.")||this;return r.name="JsonParseArrayError",Object.setPrototypeOf(r,t.prototype),r}return n(t,e),t}(Error);t.JsonParseArrayError=o},6743:function(e,t){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.LoginRequiredError=void 0;var o=function(e){function t(r){var n=this,o=r?JSON.stringify(r,null,2):"You must be logged in to access this resource";return(n=e.call(this,"Auth error: ".concat(o))||this).name="LoginRequiredError",Object.setPrototypeOf(n,t.prototype),n}return n(t,e),t}(Error);t.LoginRequiredError=o},7864:function(e,t){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.NoSessionStateError=void 0;var o=function(e){function t(r,n,o){var i=e.call(this,"Could not get session state. Server responded with ".concat(r," whilst checking state: ").concat(n))||this;return i.serverResponseStatus=r,i.sessionStateUrl=n,i.logUrl=o,i.name="NoSessionStatus",Object.setPrototypeOf(i,t.prototype),i}return n(t,e),t}(Error);t.NoSessionStateError=o},9577:function(e,t){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.NotFoundError=void 0;var o=function(e){function t(r){var n=e.call(this,"Error: Resource at ".concat(r," was not found"))||this;return n.url=r,n.name="NotFoundError",Object.setPrototypeOf(n,t.prototype),n}return n(t,e),t}(Error);t.NotFoundError=o},9279:function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.RootFolderNotFoundError=void 0;var i=r(6799),s=function(e){function t(r,n,o){var s=this,a="Root folder ".concat(r," was not found.")+"\nPlease check ".concat(n,"/SASDrive.")+"\nIf the folder DOES exist then it is likely a permission problem.\n";if(o){var u=(0,i.decodeToken)(o).scope;a+="Your access token contains the following scopes:\n"+(u=u.map((function(e){return"* "+e}))).join("\n")}return(s=e.call(this,a)||this).name="RootFolderNotFoundError",Object.setPrototypeOf(s,t.prototype),s}return o(t,e),t}(Error);t.RootFolderNotFoundError=s},9526:function(e,t){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.SAS9AuthError=void 0;var o=function(e){function t(){var r=e.call(this,"The credentials you provided cannot be authenticated. Please provide a valid set of credentials.")||this;return r.name="AuthorizeError",Object.setPrototypeOf(r,t.prototype),r}return n(t,e),t}(Error);t.SAS9AuthError=o},8875:function(e,t){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.WeboutResponseError=void 0;var o=function(e){function t(r){var n=e.call(this,"Error: error while parsing response from ".concat(r))||this;return n.url=r,n.name="WeboutResponseError",Object.setPrototypeOf(n,t.prototype),n}return n(t,e),t}(Error);t.WeboutResponseError=o},1395:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(124),t),o(r(9465),t),o(r(5267),t),o(r(9232),t),o(r(5109),t),o(r(5518),t),o(r(8531),t),o(r(9079),t),o(r(3096),t),o(r(6743),t),o(r(7864),t),o(r(9577),t),o(r(9279),t),o(r(8875),t)},1230:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(470),t),o(r(4666),t),o(r(4975),t),o(r(5766),t),o(r(215),t),o(r(4782),t),o(r(4168),t),o(r(8516),t),o(r(5841),t),o(r(2493),t),o(r(6038),t),o(r(9493),t),o(r(3153),t),o(r(8650),t),o(r(6177),t)},3302:function(e,t){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.appendExtraResponseAttributes=void 0,t.appendExtraResponseAttributes=function(e,t){return n(this,void 0,void 0,(function(){var n,i;return o(this,(function(o){return n={},(null==t?void 0:t.length)?(i=t.reduce((function(t,r){return t[r]=e[r],t}),{}),n=r({result:e.result},i)):n=e.result,[2,n]}))}))}},7922:function(e,t){"use strict";var r=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.asyncForEach=void 0,t.asyncForEach=function(e,t){return r(this,void 0,void 0,(function(){var r;return n(this,(function(n){switch(n.label){case 0:r=0,n.label=1;case 1:return r<e.length?[4,t(e[r],r,e)]:[3,4];case 2:n.sent(),n.label=3;case 3:return r++,[3,1];case 4:return[2]}}))}))}},3793:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.compareTimestamps=void 0;t.compareTimestamps=function(e,t){return t.timestamp.getTime()-e.timestamp.getTime()}},3553:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SASJS_LOGS_SEPARATOR=void 0,t.SASJS_LOGS_SEPARATOR="SASJS_LOGS_SEPARATOR_163ee17b6ff24f028928972d80a26784"},2402:(e,t,r)=>{"use strict";var n=r(5108);Object.defineProperty(t,"__esModule",{value:!0}),t.isFormatsTable=t.convertToCSV=void 0;var o=r(6467),i=r(9778);t.convertToCSV=function(e,t){var r;if(!e[t])throw(0,i.prefixMessage)("No table provided to be converted to CSV.","Error while converting to CSV. ");var a=e[t];if(!Array.isArray(a))return"";var u,c=null===(r=e["$".concat(t)])||void 0===r?void 0:r.formats,l=[],f=!1;c&&(l=Object.keys(c).map((function(e){return"".concat(e,":").concat(c[e])})));var p=Object.keys(a[0]);return p.forEach((function(e){if(!c||!Object.keys(c).includes(e)){var t=!1,r=!1;if(a.forEach((function(n){null===n[e]||"number"==typeof n[e]?t=!0:"string"==typeof n[e]&&(0,o.isSpecialMissing)(n[e])&&(r=!0)})),t&&r)l.push("".concat(e,":best.")),c||(c={}),c[e]="best.";else{var i=null,u=!1,p=-1,h=a.map((function(t,r){if(t[e]||""===t[e]){if(i){var n=""===t[e]||"string"==typeof t[e]?"chars":"number";u||(p=(u=n!==i)?r+1:-1)}else i=""===t[e]||"string"==typeof t[e]?"chars":"number";var o=void 0;return"string"==typeof t[e]&&(o=s(t[e])),o}})).sort((function(e,t){return t-e}))[0];h&&h>32765&&(f=!0),u&&n.error("Row (".concat(p,"), Column (").concat(e,") has mixed types: ERROR")),l.push("".concat(e,":").concat("chars"===i?"$char":"").concat(h||("chars"===i?"1":"best"),"."))}}})),c&&(l=l.sort((function(e,t){return p.indexOf(e.replace(/:.*/,""))-p.indexOf(t.replace(/:.*/,""))}))),f?"ERROR: LARGE STRING LENGTH":(u=a.map((function(e){return Object.keys(e).map((function(t,r){var n,i=e[t];if("number"==typeof i)return i;if(n=null===i?"":i,c&&"best."===c[t]){if(n&&!(0,o.isSpecialMissing)(n))throw new Error("A Special missing value can only be a single character from 'A' to 'Z', '_', '.[a-z]', '._'");var s=n.includes(".")?"":".";return"".concat(s).concat(n.toLowerCase())}return n=n.replace(/"/g,'""'),(n='"'.concat(n,'"')).substring(1,n.length-1).search(/(\t|\n|\r|,|\'|\")/gm)<0&&(n=n.substring(1,n.length-1)),""===(n=n.replace(/\r\n/gm,"\n"))&&l[r].includes("best")&&(n="."),n})).join(",")})),l.join(",").replace(/,/g," ")+"\r\n"+u.join("\r\n"))};t.isFormatsTable=function(e){return/^\$.*/.test(e)};var s=function(e){for(var t=e.length,r=e.length-1;r>=0;r--){var n=e.charCodeAt(r);n>127&&n<=2047?t++:n>2047&&n<=65535&&(t+=2),n>=56320&&n<=57343&&r--}return t}},6116:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createAxiosInstance=void 0;var n=r(9669);t.createAxiosInstance=function(e,t){return n.default.create({baseURL:e,httpsAgent:t})}},9825:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.delay=void 0;t.delay=function(e){return new Promise((function(t){return setTimeout(t,e)}))}},990:function(e,t,r){"use strict";var n=r(4155),o=r(5108),i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.fetchLog=t.fetchLogByChunks=void 0;var a=r(9778);t.fetchLogByChunks=function(e,r,n,o){return i(void 0,void 0,void 0,(function(){return s(this,(function(i){switch(i.label){case 0:return[4,(0,t.fetchLog)(e,r,n,0,o)];case 1:return[2,i.sent()]}}))}))};t.fetchLog=function(e,t,r,u,c){return i(void 0,void 0,void 0,(function(){var i,l,f,p,h;return s(this,(function(s){switch(s.label){case 0:i=n.logger||o,l="",f=c<1e4?c:1e4,s.label=1;case 1:return i.info("Fetching logs from line no: ".concat(u+1," to ").concat(u+f," of ").concat(c,".")),[4,e.get("".concat(r,"?start=").concat(u,"&limit=").concat(f),t).then((function(e){return e.result})).catch((function(e){throw(0,a.prefixMessage)(e,"Error while getting log. ")}))];case 2:if(0===(p=s.sent()).items.length)return[3,4];h=p.items.map((function(e){return e.line})).join("\n"),l+=h,u+=f,s.label=3;case 3:if(u<c)return[3,1];s.label=4;case 4:return[2,l]}}))}))}},1884:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getValidJson=void 0;var n=r(1395);t.getValidJson=function(e){try{if(null==e)throw new n.InvalidJsonError;if(Array.isArray(e))throw new n.JsonParseArrayError;return"object"==typeof e?e:""===e?{}:JSON.parse(e)}catch(e){if(e instanceof n.JsonParseArrayError)throw e;throw new n.InvalidJsonError}}},5928:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(3302),t),o(r(7922),t),o(r(3793),t),o(r(2402),t),o(r(3553),t),o(r(6116),t),o(r(9825),t),o(r(990),t),o(r(1884),t),o(r(4243),t),o(r(257),t),o(r(2),t),o(r(2615),t),o(r(2920),t),o(r(2422),t),o(r(31),t),o(r(6515),t),o(r(6416),t),o(r(2813),t),o(r(9896),t),o(r(4799),t),o(r(4516),t)},4243:(e,t,r)=>{"use strict";var n=r(4155);Object.defineProperty(t,"__esModule",{value:!0}),t.isNode=void 0;t.isNode=function(){return void 0!==n&&null!=n.versions&&null!=n.versions.node}},257:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isRelativePath=void 0;t.isRelativePath=function(e){return!!e&&!e.startsWith("/")}},2:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isUri=void 0;t.isUri=function(e){return/^\/folders\/folders\//.test(e)}},2615:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isUrl=void 0;t.isUrl=function(e){try{var t=new URL(e);if(!["http:","https:"].includes(t.protocol))return!1}catch(e){return!1}return!0}},1210:function(e,t){"use strict";var r,n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.openLoginPrompt=void 0,function(e){e.styles="sasjsAdapterStyles",e.overlay="sasjsAdapterLoginPromptBG",e.dialog="sasjsAdapterLoginPrompt"}(r||(r={}));var i="sasjs-adapter",s={popUp:"".concat(i,"popUp"),popUpBG:"".concat(i,"popUpBG")};t.openLoginPrompt=function(){return new Promise((function(e){return n(void 0,void 0,void 0,(function(){var t,n,i,c,l,f,p,h;return o(this,(function(o){return(t=document.createElement("style")).id=r.styles,t.innerText=u,(n=document.createElement("div")).id=r.overlay,n.classList.add(s.popUpBG),(i=document.createElement("div")).id=r.dialog,i.classList.add(s.popUp),(c=document.createElement("h1")).innerText="Session Expired!",i.appendChild(c),l=document.createElement("div"),(f=document.createElement("span")).innerText="You need to relogin, click OK to login.",l.appendChild(f),i.appendChild(l),(p=document.createElement("button")).classList.add("cancel"),p.innerText="Cancel",p.onclick=function(){a(),e(!1)},i.appendChild(p),(h=document.createElement("button")).classList.add("confirm"),h.innerText="Ok",h.onclick=function(){a(),e(!0)},i.appendChild(h),document.body.style.overflow="hidden",document.body.appendChild(t),document.body.appendChild(n),document.body.appendChild(i),[2]}))}))}))};var a=function(){Object.values(r).forEach((function(e){var t,r=document.getElementById(e);null===(t=null==r?void 0:r.parentNode)||void 0===t||t.removeChild(r)})),document.body.style.overflow="auto"},u="\n.".concat(s.popUpBG," ,\n.").concat(s.popUp," {\n  z-index: 10000;\n}\n.").concat(s.popUp," {\n  box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  display: block;\n  position: fixed;\n  top: 40%;\n  left: 50%;\n  padding: 0;\n  font-size: 14px;\n  font-family: 'PT Sans', sans-serif;\n  color: #fff;\n  border-style: none;\n  z-index: 999;\n  overflow: hidden;\n  background: rgba(0, 0, 0, 0.2);\n  margin: 0;\n  width: 100%;\n  max-width: 300px;\n  height: auto;\n  max-height: 300px;\n  transform: translate(-50%, -50%);\n}\n.").concat(s.popUp," > h1 {\n  box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  padding: 5px;\n  min-height: 40px;\n  font-size: 1.2em;\n  font-weight: bold;\n  text-align: center;\n  color: #fff;\n  background-color: transparent;\n  border-style: none;\n  border-width: 5px;\n  border-color: black;\n}\n.").concat(s.popUp," > div {\n  width: 100%;\n  height: calc(100% -108px);\n  margin: 0;\n  display: block;\n  box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  padding: 5%;\n  text-align: center;\n  border-width: 1px;\n  border-color: #ccc;\n  border-style: none none solid none;\n  overflow: auto;\n}\n.").concat(s.popUp," > div > span {\n  display: table-cell;\n  box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  width: 300px;\n  height: 108px;\n  vertical-align: middle;\n  border-style: none;\n}\n.").concat(s.popUp," .cancel {\n  float: left;\n}\n.").concat(s.popUp," .confirm {\n  float: right;\n}\n.").concat(s.popUp," > button {\n  box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  margin: 0;\n  padding: 10px;\n  width: 50%;\n  border: 1px none #ccc;\n  color: #fff;\n  font-family: inherit;\n  cursor: pointer;\n  height: 50px;\n  background: rgba(1, 1, 1, 0.2);\n}\n.").concat(s.popUp," > button:hover {\n  background: rgba(0, 0, 0, 0.2);\n}\n.").concat(s.popUpBG," {\n  display: block;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  opacity: 0.95;\n  z-index: 50;\n  background-image: radial-gradient(#0378cd, #012036);\n}\n")},2920:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.needsRetry=void 0;t.needsRetry=function(e){return!!e&&(e.includes('"errorCode":403')&&e.includes("_csrf")&&e.includes("X-CSRF-TOKEN")||e.includes('"status":403')&&e.includes('"error":"Forbidden"')||e.includes('"status":449')&&e.includes("Authentication success, retry original request"))}},2422:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseGeneratedCode=void 0;t.parseGeneratedCode=function(e){return e.split("\n").filter((function(e){return e.trim().startsWith("MPRINT")})).join("\r\n")}},31:(e,t,r)=>{"use strict";var n=r(5108);Object.defineProperty(t,"__esModule",{value:!0}),t.parseSasViyaLog=void 0;t.parseSasViyaLog=function(e){var t;try{t=e.items?e.items.map((function(e){return e.line})).join("\n"):JSON.stringify(e)}catch(r){n.error("An error has occurred while parsing the log response",r),t=e}return t}},6515:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseSourceCode=void 0;t.parseSourceCode=function(e){return e.split("\n").filter((function(e){return e.trim().substring(0,10).trimStart().match(/^\d/)})).join("\r\n")}},6416:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.parseSasViyaDebugResponse=void 0;var i=r(5928);t.parseSasViyaDebugResponse=function(e,t,r){return n(void 0,void 0,void 0,(function(){var n,s;return o(this,(function(o){if(n=e.split(/<iframe style="width: 99%; height: 500px" src="|<iframe style="width: 99%; height: 500px; background-color:Canvas;" src=/)[1],!(s=n?n.split(/"><\/iframe>|><\/iframe>/)[0]:null))throw new Error("Unable to find webout file URL.");return[2,t.get(r+s,void 0,"text/plain").then((function(e){return(0,i.getValidJson)(e.result)}))]}))}))}},2813:(e,t,r)=>{"use strict";var n=r(5108);Object.defineProperty(t,"__esModule",{value:!0}),t.parseWeboutResponse=void 0;var o=r(1395);t.parseWeboutResponse=function(e,t){var r="";if(e.includes(">>weboutBEGIN<<"))try{r=e.split(">>weboutBEGIN<<")[1].split(">>weboutEND<<")[0]}catch(e){if(t)throw new o.WeboutResponseError(t);r="",n.error(e)}return r}},1170:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.extractUserLongNameSas9=void 0;var r=["Log Off"];t.extractUserLongNameSas9=function(e){var t=null==e?void 0:e.match(/"title":\s?".*?"/),n=null==t?void 0:t[0].split(":")[1].trim(),o=null==n?void 0:n.indexOf(" ");return n?(r.map((function(e){var t=(null==n?void 0:n.indexOf(e))||-1;t>-1&&(o=t+e.length)})),n.slice(o,-1).trim()):"unknown"}},9896:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.serialize=void 0;t.serialize=function(e){var t=[];for(var r in e)if(e.hasOwnProperty(r))if(e[r]instanceof Array)for(var n=0,o=e[r].length;n<o;n++)t.push(encodeURIComponent(r)+"="+encodeURIComponent(e[r][n]));else t.push(encodeURIComponent(r)+"="+encodeURIComponent(e[r]));return t.join("&")}},4799:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.splitChunks=void 0;t.splitChunks=function(e){for(var t=16e3,r=Math.ceil(e.length/t),n=new Array(r),o=0,i=0;o<r;++o,i+=t)n[o]=e.substr(i,t);return n}},4516:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateInput=t.INVALID_TABLE_STRUCTURE=t.MORE_INFO=void 0,t.MORE_INFO="For more info see https://sasjs.io/sasjs-adapter/#request-response",t.INVALID_TABLE_STRUCTURE="Parameter data contains invalid table structure. ".concat(t.MORE_INFO);t.validateInput=function(e){if(null===e)return{status:!0,msg:""};if("object"!==r(e))return{status:!1,msg:t.INVALID_TABLE_STRUCTURE};var n=function(t){return t.match(/^\$.*/)&&Object.keys(e).includes(t.replace(/^\$/,""))};for(var o in e){if(!o.match(/^[a-zA-Z_]/)&&!n(o))return{status:!1,msg:"First letter of table should be alphabet or underscore."};if(!o.match(/^[a-zA-Z_][a-zA-Z0-9_]*$/)&&!n(o))return{status:!1,msg:"Table name should be alphanumeric."};if(o.length>32)return{status:!1,msg:"Maximum length for table name could be 32 characters."};if("Array"!==r(e[o])&&!n(o))return{status:!1,msg:t.INVALID_TABLE_STRUCTURE};for(var i=0,s=e[o];i<s.length;i++){var a=s[i];if("object"!==r(a))return{status:!1,msg:"Table ".concat(o," contains invalid structure. ").concat(t.MORE_INFO)};for(var u=0,c=Object.keys(a);u<c.length;u++){var l=c[u];if(void 0===a[l])return{status:!1,msg:"A row in table ".concat(o," contains invalid value. Can't assign undefined to ").concat(l,".")}}}}return{status:!0,msg:""}};var r=function(e){return Array.isArray(e)?"Array":typeof e}},4564:(e,t,r)=>{"use strict";var n=r(7418),o=r(7129),i=/^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/,s=/[\n\r\t]/g,a=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,u=/:\d+$/,c=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i,l=/^[a-zA-Z]:/;function f(e){return(e||"").toString().replace(i,"")}var p=[["#","hash"],["?","query"],function(e,t){return y(t.protocol)?e.replace(/\\/g,"/"):e},["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d*)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],h={hash:1,query:1};function d(e){var t,n=("undefined"!=typeof window?window:void 0!==r.g?r.g:"undefined"!=typeof self?self:{}).location||{},o={},i=typeof(e=e||n);if("blob:"===e.protocol)o=new v(unescape(e.pathname),{});else if("string"===i)for(t in o=new v(e,{}),h)delete o[t];else if("object"===i){for(t in e)t in h||(o[t]=e[t]);void 0===o.slashes&&(o.slashes=a.test(e.href))}return o}function y(e){return"file:"===e||"ftp:"===e||"http:"===e||"https:"===e||"ws:"===e||"wss:"===e}function g(e,t){e=(e=f(e)).replace(s,""),t=t||{};var r,n=c.exec(e),o=n[1]?n[1].toLowerCase():"",i=!!n[2],a=!!n[3],u=0;return i?a?(r=n[2]+n[3]+n[4],u=n[2].length+n[3].length):(r=n[2]+n[4],u=n[2].length):a?(r=n[3]+n[4],u=n[3].length):r=n[4],"file:"===o?u>=2&&(r=r.slice(2)):y(o)?r=n[4]:o?i&&(r=r.slice(2)):u>=2&&y(t.protocol)&&(r=n[4]),{protocol:o,slashes:i||y(o),slashesCount:u,rest:r}}function v(e,t,r){if(e=(e=f(e)).replace(s,""),!(this instanceof v))return new v(e,t,r);var i,a,u,c,h,b,m=p.slice(),w=typeof t,S=this,O=0;for("object"!==w&&"string"!==w&&(r=t,t=null),r&&"function"!=typeof r&&(r=o.parse),i=!(a=g(e||"",t=d(t))).protocol&&!a.slashes,S.slashes=a.slashes||i&&t.slashes,S.protocol=a.protocol||t.protocol||"",e=a.rest,("file:"===a.protocol&&(2!==a.slashesCount||l.test(e))||!a.slashes&&(a.protocol||a.slashesCount<2||!y(S.protocol)))&&(m[3]=[/(.*)/,"pathname"]);O<m.length;O++)"function"!=typeof(c=m[O])?(u=c[0],b=c[1],u!=u?S[b]=e:"string"==typeof u?~(h="@"===u?e.lastIndexOf(u):e.indexOf(u))&&("number"==typeof c[2]?(S[b]=e.slice(0,h),e=e.slice(h+c[2])):(S[b]=e.slice(h),e=e.slice(0,h))):(h=u.exec(e))&&(S[b]=h[1],e=e.slice(0,h.index)),S[b]=S[b]||i&&c[3]&&t[b]||"",c[4]&&(S[b]=S[b].toLowerCase())):e=c(e,S);r&&(S.query=r(S.query)),i&&t.slashes&&"/"!==S.pathname.charAt(0)&&(""!==S.pathname||""!==t.pathname)&&(S.pathname=function(e,t){if(""===e)return t;for(var r=(t||"/").split("/").slice(0,-1).concat(e.split("/")),n=r.length,o=r[n-1],i=!1,s=0;n--;)"."===r[n]?r.splice(n,1):".."===r[n]?(r.splice(n,1),s++):s&&(0===n&&(i=!0),r.splice(n,1),s--);return i&&r.unshift(""),"."!==o&&".."!==o||r.push(""),r.join("/")}(S.pathname,t.pathname)),"/"!==S.pathname.charAt(0)&&y(S.protocol)&&(S.pathname="/"+S.pathname),n(S.port,S.protocol)||(S.host=S.hostname,S.port=""),S.username=S.password="",S.auth&&(~(h=S.auth.indexOf(":"))?(S.username=S.auth.slice(0,h),S.username=encodeURIComponent(decodeURIComponent(S.username)),S.password=S.auth.slice(h+1),S.password=encodeURIComponent(decodeURIComponent(S.password))):S.username=encodeURIComponent(decodeURIComponent(S.auth)),S.auth=S.password?S.username+":"+S.password:S.username),S.origin="file:"!==S.protocol&&y(S.protocol)&&S.host?S.protocol+"//"+S.host:"null",S.href=S.toString()}v.prototype={set:function(e,t,r){var i=this;switch(e){case"query":"string"==typeof t&&t.length&&(t=(r||o.parse)(t)),i[e]=t;break;case"port":i[e]=t,n(t,i.protocol)?t&&(i.host=i.hostname+":"+t):(i.host=i.hostname,i[e]="");break;case"hostname":i[e]=t,i.port&&(t+=":"+i.port),i.host=t;break;case"host":i[e]=t,u.test(t)?(t=t.split(":"),i.port=t.pop(),i.hostname=t.join(":")):(i.hostname=t,i.port="");break;case"protocol":i.protocol=t.toLowerCase(),i.slashes=!r;break;case"pathname":case"hash":if(t){var s="pathname"===e?"/":"#";i[e]=t.charAt(0)!==s?s+t:t}else i[e]=t;break;case"username":case"password":i[e]=encodeURIComponent(t);break;case"auth":var a=t.indexOf(":");~a?(i.username=t.slice(0,a),i.username=encodeURIComponent(decodeURIComponent(i.username)),i.password=t.slice(a+1),i.password=encodeURIComponent(decodeURIComponent(i.password))):i.username=encodeURIComponent(decodeURIComponent(t))}for(var c=0;c<p.length;c++){var l=p[c];l[4]&&(i[l[1]]=i[l[1]].toLowerCase())}return i.auth=i.password?i.username+":"+i.password:i.username,i.origin="file:"!==i.protocol&&y(i.protocol)&&i.host?i.protocol+"//"+i.host:"null",i.href=i.toString(),i},toString:function(e){e&&"function"==typeof e||(e=o.stringify);var t,r=this,n=r.host,i=r.protocol;i&&":"!==i.charAt(i.length-1)&&(i+=":");var s=i+(r.protocol&&r.slashes||y(r.protocol)?"//":"");return r.username?(s+=r.username,r.password&&(s+=":"+r.password),s+="@"):r.password?(s+=":"+r.password,s+="@"):"file:"!==r.protocol&&y(r.protocol)&&!n&&"/"!==r.pathname&&(s+="@"),(":"===n[n.length-1]||u.test(r.hostname)&&!r.port)&&(n+=":"),s+=n+r.pathname,(t="object"==typeof r.query?e(r.query):r.query)&&(s+="?"!==t.charAt(0)?"?"+t:t),r.hash&&(s+=r.hash),s}},v.extractProtocol=g,v.location=d,v.trimLeft=f,v.qs=o,e.exports=v},384:e=>{e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},5955:(e,t,r)=>{"use strict";var n=r(2584),o=r(8662),i=r(6430),s=r(5692);function a(e){return e.call.bind(e)}var u="undefined"!=typeof BigInt,c="undefined"!=typeof Symbol,l=a(Object.prototype.toString),f=a(Number.prototype.valueOf),p=a(String.prototype.valueOf),h=a(Boolean.prototype.valueOf);if(u)var d=a(BigInt.prototype.valueOf);if(c)var y=a(Symbol.prototype.valueOf);function g(e,t){if("object"!=typeof e)return!1;try{return t(e),!0}catch(e){return!1}}function v(e){return"[object Map]"===l(e)}function b(e){return"[object Set]"===l(e)}function m(e){return"[object WeakMap]"===l(e)}function w(e){return"[object WeakSet]"===l(e)}function S(e){return"[object ArrayBuffer]"===l(e)}function O(e){return"undefined"!=typeof ArrayBuffer&&(S.working?S(e):e instanceof ArrayBuffer)}function _(e){return"[object DataView]"===l(e)}function E(e){return"undefined"!=typeof DataView&&(_.working?_(e):e instanceof DataView)}t.isArgumentsObject=n,t.isGeneratorFunction=o,t.isTypedArray=s,t.isPromise=function(e){return"undefined"!=typeof Promise&&e instanceof Promise||null!==e&&"object"==typeof e&&"function"==typeof e.then&&"function"==typeof e.catch},t.isArrayBufferView=function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):s(e)||E(e)},t.isUint8Array=function(e){return"Uint8Array"===i(e)},t.isUint8ClampedArray=function(e){return"Uint8ClampedArray"===i(e)},t.isUint16Array=function(e){return"Uint16Array"===i(e)},t.isUint32Array=function(e){return"Uint32Array"===i(e)},t.isInt8Array=function(e){return"Int8Array"===i(e)},t.isInt16Array=function(e){return"Int16Array"===i(e)},t.isInt32Array=function(e){return"Int32Array"===i(e)},t.isFloat32Array=function(e){return"Float32Array"===i(e)},t.isFloat64Array=function(e){return"Float64Array"===i(e)},t.isBigInt64Array=function(e){return"BigInt64Array"===i(e)},t.isBigUint64Array=function(e){return"BigUint64Array"===i(e)},v.working="undefined"!=typeof Map&&v(new Map),t.isMap=function(e){return"undefined"!=typeof Map&&(v.working?v(e):e instanceof Map)},b.working="undefined"!=typeof Set&&b(new Set),t.isSet=function(e){return"undefined"!=typeof Set&&(b.working?b(e):e instanceof Set)},m.working="undefined"!=typeof WeakMap&&m(new WeakMap),t.isWeakMap=function(e){return"undefined"!=typeof WeakMap&&(m.working?m(e):e instanceof WeakMap)},w.working="undefined"!=typeof WeakSet&&w(new WeakSet),t.isWeakSet=function(e){return w(e)},S.working="undefined"!=typeof ArrayBuffer&&S(new ArrayBuffer),t.isArrayBuffer=O,_.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&_(new DataView(new ArrayBuffer(1),0,1)),t.isDataView=E;var x="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function j(e){return"[object SharedArrayBuffer]"===l(e)}function A(e){return void 0!==x&&(void 0===j.working&&(j.working=j(new x)),j.working?j(e):e instanceof x)}function C(e){return g(e,f)}function P(e){return g(e,p)}function T(e){return g(e,h)}function k(e){return u&&g(e,d)}function R(e){return c&&g(e,y)}t.isSharedArrayBuffer=A,t.isAsyncFunction=function(e){return"[object AsyncFunction]"===l(e)},t.isMapIterator=function(e){return"[object Map Iterator]"===l(e)},t.isSetIterator=function(e){return"[object Set Iterator]"===l(e)},t.isGeneratorObject=function(e){return"[object Generator]"===l(e)},t.isWebAssemblyCompiledModule=function(e){return"[object WebAssembly.Module]"===l(e)},t.isNumberObject=C,t.isStringObject=P,t.isBooleanObject=T,t.isBigIntObject=k,t.isSymbolObject=R,t.isBoxedPrimitive=function(e){return C(e)||P(e)||T(e)||k(e)||R(e)},t.isAnyArrayBuffer=function(e){return"undefined"!=typeof Uint8Array&&(O(e)||A(e))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(e){Object.defineProperty(t,e,{enumerable:!1,value:function(){throw new Error(e+" is not supported in userland")}})}))},9539:(e,t,r)=>{var n=r(4155),o=r(5108),i=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),r={},n=0;n<t.length;n++)r[t[n]]=Object.getOwnPropertyDescriptor(e,t[n]);return r},s=/%[sdj%]/g;t.format=function(e){if(!w(e)){for(var t=[],r=0;r<arguments.length;r++)t.push(l(arguments[r]));return t.join(" ")}r=1;for(var n=arguments,o=n.length,i=String(e).replace(s,(function(e){if("%%"===e)return"%";if(r>=o)return e;switch(e){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(e){return"[Circular]"}default:return e}})),a=n[r];r<o;a=n[++r])b(a)||!_(a)?i+=" "+a:i+=" "+l(a);return i},t.deprecate=function(e,r){if(void 0!==n&&!0===n.noDeprecation)return e;if(void 0===n)return function(){return t.deprecate(e,r).apply(this,arguments)};var i=!1;return function(){if(!i){if(n.throwDeprecation)throw new Error(r);n.traceDeprecation?o.trace(r):o.error(r),i=!0}return e.apply(this,arguments)}};var a={},u=/^$/;if(n.env.NODE_DEBUG){var c=n.env.NODE_DEBUG;c=c.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),u=new RegExp("^"+c+"$","i")}function l(e,r){var n={seen:[],stylize:p};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),v(r)?n.showHidden=r:r&&t._extend(n,r),S(n.showHidden)&&(n.showHidden=!1),S(n.depth)&&(n.depth=2),S(n.colors)&&(n.colors=!1),S(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=f),h(n,e,n.depth)}function f(e,t){var r=l.styles[t];return r?"["+l.colors[r][0]+"m"+e+"["+l.colors[r][1]+"m":e}function p(e,t){return e}function h(e,r,n){if(e.customInspect&&r&&j(r.inspect)&&r.inspect!==t.inspect&&(!r.constructor||r.constructor.prototype!==r)){var o=r.inspect(n,e);return w(o)||(o=h(e,o,n)),o}var i=function(e,t){if(S(t))return e.stylize("undefined","undefined");if(w(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}if(m(t))return e.stylize(""+t,"number");if(v(t))return e.stylize(""+t,"boolean");if(b(t))return e.stylize("null","null")}(e,r);if(i)return i;var s=Object.keys(r),a=function(e){var t={};return e.forEach((function(e,r){t[e]=!0})),t}(s);if(e.showHidden&&(s=Object.getOwnPropertyNames(r)),x(r)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return d(r);if(0===s.length){if(j(r)){var u=r.name?": "+r.name:"";return e.stylize("[Function"+u+"]","special")}if(O(r))return e.stylize(RegExp.prototype.toString.call(r),"regexp");if(E(r))return e.stylize(Date.prototype.toString.call(r),"date");if(x(r))return d(r)}var c,l="",f=!1,p=["{","}"];(g(r)&&(f=!0,p=["[","]"]),j(r))&&(l=" [Function"+(r.name?": "+r.name:"")+"]");return O(r)&&(l=" "+RegExp.prototype.toString.call(r)),E(r)&&(l=" "+Date.prototype.toUTCString.call(r)),x(r)&&(l=" "+d(r)),0!==s.length||f&&0!=r.length?n<0?O(r)?e.stylize(RegExp.prototype.toString.call(r),"regexp"):e.stylize("[Object]","special"):(e.seen.push(r),c=f?function(e,t,r,n,o){for(var i=[],s=0,a=t.length;s<a;++s)T(t,String(s))?i.push(y(e,t,r,n,String(s),!0)):i.push("");return o.forEach((function(o){o.match(/^\d+$/)||i.push(y(e,t,r,n,o,!0))})),i}(e,r,n,a,s):s.map((function(t){return y(e,r,n,a,t,f)})),e.seen.pop(),function(e,t,r){var n=e.reduce((function(e,t){return t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0);if(n>60)return r[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+r[1];return r[0]+t+" "+e.join(", ")+" "+r[1]}(c,l,p)):p[0]+l+p[1]}function d(e){return"["+Error.prototype.toString.call(e)+"]"}function y(e,t,r,n,o,i){var s,a,u;if((u=Object.getOwnPropertyDescriptor(t,o)||{value:t[o]}).get?a=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(a=e.stylize("[Setter]","special")),T(n,o)||(s="["+o+"]"),a||(e.seen.indexOf(u.value)<0?(a=b(r)?h(e,u.value,null):h(e,u.value,r-1)).indexOf("\n")>-1&&(a=i?a.split("\n").map((function(e){return"  "+e})).join("\n").slice(2):"\n"+a.split("\n").map((function(e){return"   "+e})).join("\n")):a=e.stylize("[Circular]","special")),S(s)){if(i&&o.match(/^\d+$/))return a;(s=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.slice(1,-1),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+a}function g(e){return Array.isArray(e)}function v(e){return"boolean"==typeof e}function b(e){return null===e}function m(e){return"number"==typeof e}function w(e){return"string"==typeof e}function S(e){return void 0===e}function O(e){return _(e)&&"[object RegExp]"===A(e)}function _(e){return"object"==typeof e&&null!==e}function E(e){return _(e)&&"[object Date]"===A(e)}function x(e){return _(e)&&("[object Error]"===A(e)||e instanceof Error)}function j(e){return"function"==typeof e}function A(e){return Object.prototype.toString.call(e)}function C(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(e){if(e=e.toUpperCase(),!a[e])if(u.test(e)){var r=n.pid;a[e]=function(){var n=t.format.apply(t,arguments);o.error("%s %d: %s",e,r,n)}}else a[e]=function(){};return a[e]},t.inspect=l,l.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},l.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.types=r(5955),t.isArray=g,t.isBoolean=v,t.isNull=b,t.isNullOrUndefined=function(e){return null==e},t.isNumber=m,t.isString=w,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=S,t.isRegExp=O,t.types.isRegExp=O,t.isObject=_,t.isDate=E,t.types.isDate=E,t.isError=x,t.types.isNativeError=x,t.isFunction=j,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=r(384);var P=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function T(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){var e,r;o.log("%s - %s",(e=new Date,r=[C(e.getHours()),C(e.getMinutes()),C(e.getSeconds())].join(":"),[e.getDate(),P[e.getMonth()],r].join(" ")),t.format.apply(t,arguments))},t.inherits=r(5717),t._extend=function(e,t){if(!t||!_(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e};var k="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function R(e,t){if(!e){var r=new Error("Promise was rejected with a falsy value");r.reason=e,e=r}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(k&&e[k]){var t;if("function"!=typeof(t=e[k]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,k,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,r,n=new Promise((function(e,n){t=e,r=n})),o=[],i=0;i<arguments.length;i++)o.push(arguments[i]);o.push((function(e,n){e?r(e):t(n)}));try{e.apply(this,o)}catch(e){r(e)}return n}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),k&&Object.defineProperty(t,k,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,i(e))},t.promisify.custom=k,t.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function t(){for(var t=[],r=0;r<arguments.length;r++)t.push(arguments[r]);var o=t.pop();if("function"!=typeof o)throw new TypeError("The last argument must be of type Function");var i=this,s=function(){return o.apply(i,arguments)};e.apply(this,t).then((function(e){n.nextTick(s.bind(null,null,e))}),(function(e){n.nextTick(R.bind(null,e,s))}))}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),Object.defineProperties(t,i(e)),t}},481:(e,t,r)=>{!function(e){"use strict";e.exports.is_uri=r,e.exports.is_http_uri=n,e.exports.is_https_uri=o,e.exports.is_web_uri=i,e.exports.isUri=r,e.exports.isHttpUri=n,e.exports.isHttpsUri=o,e.exports.isWebUri=i;var t=function(e){return e.match(/(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/)};function r(e){if(e&&!/[^a-z0-9\:\/\?\#\[\]\@\!\$\&\'\(\)\*\+\,\;\=\.\-\_\~\%]/i.test(e)&&!/%[^0-9a-f]/i.test(e)&&!/%[0-9a-f](:?[^0-9a-f]|$)/i.test(e)){var r,n,o,i,s,a="",u="";if(a=(r=t(e))[1],n=r[2],o=r[3],i=r[4],s=r[5],a&&a.length&&o.length>=0){if(n&&n.length){if(0!==o.length&&!/^\//.test(o))return}else if(/^\/\//.test(o))return;if(/^[a-z][a-z0-9\+\-\.]*$/.test(a.toLowerCase()))return u+=a+":",n&&n.length&&(u+="//"+n),u+=o,i&&i.length&&(u+="?"+i),s&&s.length&&(u+="#"+s),u}}}function n(e,n){if(r(e)){var o,i,s,a,u="",c="",l="",f="";if(u=(o=t(e))[1],c=o[2],i=o[3],s=o[4],a=o[5],u){if(n){if("https"!=u.toLowerCase())return}else if("http"!=u.toLowerCase())return;if(c)return/:(\d+)$/.test(c)&&(l=c.match(/:(\d+)$/)[0],c=c.replace(/:\d+$/,"")),f+=u+":",f+="//"+c,l&&(f+=l),f+=i,s&&s.length&&(f+="?"+s),a&&a.length&&(f+="#"+a),f}}}function o(e){return n(e,!0)}function i(e){return n(e)||o(e)}}(e=r.nmd(e))},6430:(e,t,r)=>{"use strict";var n=r(4029),o=r(3083),i=r(1924),s=r(7296),a=i("Object.prototype.toString"),u=r(6410)(),c="undefined"==typeof globalThis?r.g:globalThis,l=o(),f=i("String.prototype.slice"),p={},h=Object.getPrototypeOf;u&&s&&h&&n(l,(function(e){if("function"==typeof c[e]){var t=new c[e];if(Symbol.toStringTag in t){var r=h(t),n=s(r,Symbol.toStringTag);if(!n){var o=h(r);n=s(o,Symbol.toStringTag)}p[e]=n.get}}}));var d=r(5692);e.exports=function(e){return!!d(e)&&(u&&Symbol.toStringTag in e?function(e){var t=!1;return n(p,(function(r,n){if(!t)try{var o=r.call(e);o===n&&(t=o)}catch(e){}})),t}(e):f(a(e),8,-1))}},8373:()=>{},3083:(e,t,r)=>{"use strict";var n=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],o="undefined"==typeof globalThis?r.g:globalThis;e.exports=function(){for(var e=[],t=0;t<n.length;t++)"function"==typeof o[n[t]]&&(e[e.length]=n[t]);return e}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.loaded=!0,i.exports}return r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),r(9576)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,